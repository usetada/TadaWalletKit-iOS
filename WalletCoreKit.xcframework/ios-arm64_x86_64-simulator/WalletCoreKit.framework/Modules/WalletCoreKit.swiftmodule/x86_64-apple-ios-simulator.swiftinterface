// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WalletCoreKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreData
import CoreLocation
import CoreTelephony
import CryptoKit
import Foundation
import Security
import Swift
import UIKit
@_exported import WalletCoreKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ActivationRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(cardNumber: Swift.String, cardPIN: Swift.String, globalID: Swift.String?)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct AddCardDetailRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(cardNumber: Swift.String, country: Swift.String?, data: [Swift.String : Swift.String], additionalData: [Swift.String : Swift.String], additionalCheckboxData: [Swift.String : [Swift.String]], globalID: Swift.String?, isRequiredCustomerData: Swift.Bool)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct Additional : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdditionalData : Swift.Codable {
  public let key: Swift.String?
  public let value: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdditionalMetadata : WalletCoreKit.WalletCoreKitPayload {
  public let lat: Swift.Double
  public let long: Swift.Double
  public var parameters: [Swift.String : Any] {
    get
  }
}
public struct AdditionalQuestion : Swift.Codable {
  public let shareType: Swift.String?
  public let shareDestination: Swift.String?
  public let shareValue: Swift.String?
  public let videoUrl: Swift.String?
  public let maxImage: Swift.String?
  public let maxFileSize: Swift.String?
  public let startDate: Swift.String?
  public let endDate: Swift.String?
  public let isDecimal: Swift.Bool?
  public let minimumAmount: Swift.Double?
  public let maximumAmount: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AmbassadorHistory : Swift.Codable {
  public let count: Swift.Int?
  public let rows: [WalletCoreKit.AmbassadorHistory.Order]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.AmbassadorHistory {
  public struct Order : Swift.Codable {
    public let id: Swift.Int?
    public let date: Swift.String?
    public let customerName: Swift.String?
    public let amount: Swift.Double?
    public let quantity: Swift.Int?
    public let status: Swift.String?
    public let item: WalletCoreKit.AmbassadorHistory.Order.Item?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.AmbassadorHistory.Order {
  public struct Item : Swift.Codable {
    public let name: Swift.String?
    public let image: Swift.String?
    public let price: Swift.Double?
    public let ambassadorReward: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct AmbassadorHistoryRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(programId: Swift.String, status: Swift.String, page: Swift.Int, perPage: Swift.Int)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct AmbassadorProduct : Swift.Codable {
  public let id: Swift.String?
  public let active: Swift.Bool?
  public let name: Swift.String?
  public let category: Swift.String?
  public let image: Swift.String?
  public let images: [WalletCoreKit.Image]?
  public let originalPrice: Swift.String?
  public let salePrice: Swift.String?
  public let ambassadorReward: Swift.String?
  public let customerBenefit: Swift.String?
  public let description: Swift.String?
  public let variants: [WalletCoreKit.AmbassadorProduct.Variants]?
  public let itemStoreAvailability: WalletCoreKit.AmbassadorProduct.ItemStoreAvailability?
  public struct ItemStoreAvailability : Swift.Codable {
    public let availableOnAllStores: Swift.Bool?
    public let assignedStoreIds: [WalletCoreKit.ValueWrapper]?
    public let enabledStoreIds: [WalletCoreKit.ValueWrapper]?
    public let disabledStoreIds: [WalletCoreKit.ValueWrapper]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func testModel(type: Swift.Int) -> WalletCoreKit.AmbassadorProduct
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.AmbassadorProduct {
  public struct Variants : Swift.Codable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let image: Swift.String?
    public let price: Swift.Double?
    public let active: Swift.Bool?
    public let stock: WalletCoreKit.Variant.Stock?
    public let eGiftProperty: WalletCoreKit.Variant.EGiftProperty?
    public let disabledStoreIds: [WalletCoreKit.ValueWrapper]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.AmbassadorProduct.Variants {
  public var id: Swift.String? {
    get
  }
}
extension WalletCoreKit.AmbassadorProduct.Variants : Swift.Comparable {
  public static func < (lhs: WalletCoreKit.AmbassadorProduct.Variants, rhs: WalletCoreKit.AmbassadorProduct.Variants) -> Swift.Bool
  public static func == (lhs: WalletCoreKit.AmbassadorProduct.Variants, rhs: WalletCoreKit.AmbassadorProduct.Variants) -> Swift.Bool
}
public struct AmbassadorProductDetails : Swift.Decodable {
  public let ambassadorProgramId: Swift.Int?
  public let ambassadorProgramName: Swift.String?
  public let itemId: Swift.String?
  public let category: Swift.String?
  public let itemName: Swift.String?
  public let originalPrice: Swift.String?
  public let salePrice: Swift.String?
  public let ambassadorReward: Swift.String?
  public let customerBenefit: Swift.String?
  public let image: Swift.String?
  public let productDescription: Swift.String?
  public let active: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
}
public struct AmbassadorProductRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(programId: Swift.String, categoryId: Swift.String?, page: Swift.Int, perPage: Swift.Int, minPrice: Swift.Int, maxPrice: Swift.Int, sortProductOptions: WalletCoreKit.SortProductOptions, keyword: Swift.String?)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct AmbassadorProgram : Swift.Decodable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let image: Swift.String?
  public let themeColor: Swift.String?
  public let caption: Swift.String?
  public let merchantName: Swift.String?
  public let summary: WalletCoreKit.AmbassadorProgram.Summary?
  public let categories: [WalletCoreKit.StoreCategory]?
  public struct Metas : Swift.Codable {
    public let bannerColor: Swift.String?
    public let bannerCaption: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.AmbassadorProgram {
  public struct Summary : Swift.Codable {
    public let clicks: Swift.Double?
    public let totalReward: Swift.Double?
    public let totalShared: Swift.Double?
    public let pending: Swift.Double?
    public let sold: Swift.Double?
    public let onProcess: Swift.Double?
    public let totalTransaction: Swift.Double?
    public let totalItems: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct AmbassadorShareMessage : Swift.Decodable {
  public let message: Swift.String?
  public let ambassadorCode: Swift.String?
  public let ambassadorLink: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public enum SortProductOptions {
  case recommended
  case lowestPrice
  case highestPrice
  case bestSeller
  public static func == (a: WalletCoreKit.SortProductOptions, b: WalletCoreKit.SortProductOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RateAppResponse : Swift.Codable {
  public let email: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppUseCase {
  public func rateApp(star: Swift.Int, note: Swift.String, feedbacks: [Swift.String], completion: @escaping (Swift.Result<WalletCoreKit.RateAppResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getMerchantInfo(completion: @escaping (Swift.Result<WalletCoreKit.InfoResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func isLocked(completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitCheckLockResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
}
public struct AreaResponse : Swift.Codable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let suburbID: WalletCoreKit.WalletCoreKitAnyCodable?
  public let name: Swift.String?
  public let active: Swift.Bool?
  public let postCode: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthenticationUseCase {
  public func requestOtp(email: Swift.String, completion: @escaping (WalletCoreKit.LoginState) -> Swift.Void)
  public func requestOtp(countryCode: Swift.String, phoneNumber: Swift.String, senderType: WalletCoreKit.OtpMethod, completion: @escaping (WalletCoreKit.LoginState) -> Swift.Void)
  public func verifyOtp(email: Swift.String, otpInput: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.LoginWalletResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func verifyOtp(phoneNumber: Swift.String, countryCode: WalletCoreKit.WalletCoreKitCountryCode, otpInput: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.LoginWalletResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func checkLogin() -> Swift.Bool
  public func logoutSession()
}
@_hasMissingDesignatedInitializers public class Balance {
  final public let balance: Swift.Double
  final public let convertedAmount: Swift.Double
  final public let amountType: Swift.String
  final public let expired: Swift.String
  final public let hasExpiry: Swift.Bool
  final public let name: Swift.String
  @objc deinit
}
public struct BillingVendorInquiryRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(clientNumber: Swift.String, programId: Swift.String?, itemID: Swift.String, variantID: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct BillingVendorInquiryResponse : Swift.Decodable {
  public let clientNumber: Swift.String?
  public let price: Swift.Double?
  public let billPeriodCount: Swift.String?
  public let additionalData: WalletCoreKit.BillingVendorInquiryResponse.AdditionalData?
  public struct AdditionalData : Swift.Decodable {
    public let name: Swift.String?
    public let meterNumber: Swift.String?
    public let tarif: Swift.String?
    public let daya: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Buyback : Swift.Codable {
  public let isEnable: Swift.Bool?
  public let categoryName: Swift.String?
  public let absorbBy: Swift.String?
  public let feePct: Swift.Double?
  public let chargeRate: Swift.Double?
  public let buybackConfigs: [WalletCoreKit.BuybackConfigs]?
  public var isBuybackFeeAbsorbByUser: Swift.Bool {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BuybackConfigs : Swift.Codable {
  public let type: Swift.String?
  public let id: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BuybackUseCase {
  public func createBuyback(phone: Swift.String, bankName: Swift.String, email: Swift.String, accountNumber: Swift.String, cardNumber: Swift.String, imageUrl: Swift.String, accountName: Swift.String, amount: Swift.Double, pin: Swift.String, selectedWalletID: Swift.String?, completion: @escaping (Swift.Result<WalletCoreKit.CreateBuybackResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func receiveAmount(withdrawAmount: Swift.Double, cardDetail: WalletCoreKit.CardDetail) -> Swift.Double
  @objc deinit
}
public struct CancelSubscriptionResponse : Swift.Codable {
  public let success: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Card {
  final public let id: Swift.String
  final public let balance: Swift.Double
  final public let balanceName: Swift.String
  final public let cardNumber: Swift.String
  final public let iconUrl: Swift.String
  final public let imageUrl: Swift.String
  final public let programName: Swift.String
  final public let status: Swift.String
  final public let currencyCode: Swift.String
  final public let balanceType: Swift.String
  final public let primaryColor: Swift.String
  public func getCardIconOrImage() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CardDetail {
  final public let id: Swift.String
  final public let no: Swift.String
  final public let featureEligibility: [WalletCoreKit.CardDetail.FeatureEligibility]
  final public let features: WalletCoreKit.Features?
  final public let buyback: WalletCoreKit.Buyback?
  final public let taxConfig: WalletCoreKit.TaxConfig?
  final public let customer: WalletCoreKit.Customer?
  final public let isUpdateCustomerRequired: Swift.Bool
  final public let cardProgram: WalletCoreKit.Program?
  final public let status: Swift.String
  final public let expiredAt: Foundation.Date?
  final public let hasExpiry: Swift.Bool
  final public let merchant: WalletCoreKit.Merchant?
  final public let gciUserId: Swift.String?
  final public let isFixedAddress: Swift.Bool
  final public let pin: Swift.String
  final public let currency: WalletCoreKit.Currency?
  final public let balance: WalletCoreKit.Balance?
  final public let activatedAt: Swift.String
  final public let isNeedGlobalId: Swift.Bool?
  final public let distributionId: Swift.String
  final public let hasQrisExchange: Swift.Bool
  final public let walletId: Swift.String?
  final public let visualAttributes: WalletCoreKit.VisualAttributes?
  final public let leadGenerations: [WalletCoreKit.LeadGeneration]?
  public var isStampsProgram: Swift.Bool {
    get
  }
  public var currencyDecimalRounding: Swift.Int {
    get
  }
  public var currencySymbol: Swift.String {
    get
  }
  public var currencyCode: Swift.String {
    get
  }
  public var cardProgramImageUrl: Swift.String? {
    get
  }
  public var merchantCountryCode: Swift.String {
    get
  }
  public var isPointProgram: Swift.Bool {
    get
  }
  public var pointProgramRate: Swift.Double {
    get
  }
  public struct FeatureEligibility {
  }
  @objc deinit
}
public struct CardDetailBannersResponse : Swift.Decodable {
  public let position: Swift.Int?
  public let bannerType: Swift.String?
  public let bannerValue: Swift.String?
  public let imageUrl: Swift.String?
  public let isRedirect: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardDetailV2Response : Swift.Codable {
  public let id: Swift.String?
  public let no: Swift.String?
  public let distributionId: Swift.String?
  public let alias: Swift.String?
  public let status: Swift.String?
  public let pin: Swift.String?
  public let hasExpiry: Swift.Bool?
  public let expiredAt: Swift.String?
  public let group: Swift.String?
  public let balance: WalletCoreKit.CardDetailV2Response.Balance?
  public let balanceList: [WalletCoreKit.CardDetailV2Response.BalanceItem]?
  public let isFixedAddress: Swift.Bool?
  public let isUpdateCustomerRequired: Swift.String?
  public let isNeedGlobalId: Swift.String?
  public let gciUserId: Swift.String?
  public let customer: WalletCoreKit.CardDetailV2Response.Customer?
  public let program: WalletCoreKit.CardDetailV2Response.Program?
  public let merchant: WalletCoreKit.CardDetailV2Response.Merchant?
  public let buyback: WalletCoreKit.CardDetailV2Response.BuyBack?
  public let currency: WalletCoreKit.CardDetailV2Response.Currency?
  public let visualAttributes: WalletCoreKit.CardDetailV2Response.VisualAttributes?
  public let features: WalletCoreKit.Features?
  public let imageUrl: Swift.String?
  public let cardProgramIcon: Swift.String?
  public let isLoyalty: Swift.Bool?
  public let isChannelIncentiveProgram: Swift.Bool?
  public struct Balance : Swift.Codable {
    public let name: Swift.String?
    public let amount: Swift.Double?
    public let amountType: Swift.String?
    public let hasExpiry: Swift.Bool?
    public let expiredDate: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BalanceItem : Swift.Codable {
    public let balance: Swift.Double?
    public let collectedAt: Swift.String?
    public let expiredAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Program : Swift.Codable {
    public let productType: Swift.String?
    public let programType: Swift.String?
    public let programId: Swift.String?
    public let programName: Swift.String?
    public let active: Swift.Bool?
    public let imageUrl: Swift.String?
    public let iconUrl: Swift.String?
    public let enablePin: Swift.Bool?
    public let isPointProgram: Swift.Bool?
    public let pointProgramRate: Swift.Double?
    public let pointTopupRate: Swift.Double?
    public let isBalanceHide: Swift.Bool?
    public let isLevelHide: Swift.Bool?
    public let buyCatalogId: Swift.String?
    public let isConvertReward: Swift.Bool?
    public let isPromoted: Swift.Bool?
    public let promotedProgram: [Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Merchant : Swift.Codable {
    public let mId: Swift.String?
    public let brand: Swift.String?
    public let active: Swift.Bool?
    public let countryCode: Swift.String?
    public let contactId: Swift.String?
    public let currency: WalletCoreKit.CardDetailV2Response.Currency?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Currency : Swift.Codable {
    public let symbol: Swift.String?
    public let code: Swift.String?
    public let decimalDigits: Swift.Double?
    public let rounding: Swift.Double?
    public let thousandSeparator: Swift.String?
    public let decimalSeparator: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Customer : Swift.Codable {
    public let data: [WalletCoreKit.CardDetailV2Response.Customer.AdditionalData]?
    public let address: Swift.String?
    public let birthday: Swift.String?
    public let city: Swift.String?
    public let confirmedAt: Swift.String?
    public let email: Swift.String?
    public let id: Swift.Int?
    public let name: Swift.String?
    public let occupation: Swift.String?
    public let phone: Swift.String?
    public let sex: Swift.String?
    public struct AdditionalData : Swift.Codable {
      public let key: Swift.String?
      public let value: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BuyBack : Swift.Codable {
    public let isEnable: Swift.Bool?
    public let categoryName: Swift.String?
    public let absorbBy: Swift.String?
    public let feePct: Swift.Double?
    public let chargeRate: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct VisualAttributes : Swift.Codable {
    public let nameColor: Swift.String?
    public let showNameOnCard: Swift.Bool?
    public let showRewardExtTrans: Swift.Bool?
    public let showDeliveryButton: Swift.Bool?
    public let deliveryType: Swift.String?
    public let showBtnChat: Swift.Bool?
    public let showBtnShop: Swift.Bool?
    public let showBtnUseCashier: Swift.Bool?
    public let showScanBarcode: Swift.Bool?
    public let externalLink: Swift.String?
    public let deliveryCode: Swift.String?
    public let deliveryUrl: Swift.String?
    public let primaryColor: Swift.String?
    public let secondaryColor: Swift.String?
    public let deliveryUrlOrderHistory: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardItemsResponse : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let itemType: Swift.String?
  public let imageUrl: Swift.String?
  public let categoryId: Swift.String?
  public let catalogId: Swift.String?
  public let price: Swift.Double?
  public let isInStock: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardListResponse : Swift.Codable, Swift.Equatable {
  public let success: Swift.Bool?
  public let message: Swift.String?
  public let page: Swift.Int?
  public let perPage: Swift.Int?
  public let count: Swift.Int?
  public let data: [WalletCoreKit.CardListResponse.CardList]?
  public init(success: Swift.Bool?, message: Swift.String?, page: Swift.Int?, perPage: Swift.Int?, count: Swift.Int?, data: [WalletCoreKit.CardListResponse.CardList]?)
  public static func == (a: WalletCoreKit.CardListResponse, b: WalletCoreKit.CardListResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.CardListResponse {
  public struct CardList : Swift.Codable, Swift.Equatable {
    public let id: Swift.String?
    public let walletId: Swift.String?
    public let no: Swift.String?
    public let status: Swift.String?
    public let balanceAmount: Swift.Double?
    public let balanceName: Swift.String?
    public let balanceType: Swift.String?
    public let isBalance: Swift.Bool?
    public let hasExpiry: Swift.Bool?
    public let expiredAt: Swift.String?
    public let cardProgramId: Swift.Int?
    public let cardProgramName: Swift.String?
    public let cardProgramType: Swift.String?
    public let merchantId: Swift.Int?
    public let merchantBrand: Swift.String?
    public let countryName: Swift.String?
    public let currencyCode: Swift.String?
    public let nameColor: Swift.String?
    public let showNameOnCard: Swift.Bool?
    public let primaryColor: Swift.String?
    public let secondaryColor: Swift.String?
    public let imageUrl: Swift.String?
    public let iconUrl: Swift.String?
    public init(id: Swift.String?, walletId: Swift.String?, no: Swift.String?, status: Swift.String?, balanceAmount: Swift.Double?, balanceName: Swift.String?, balanceType: Swift.String?, isBalance: Swift.Bool?, hasExpiry: Swift.Bool?, expiredAt: Swift.String?, cardProgramId: Swift.Int?, cardProgramName: Swift.String?, cardProgramType: Swift.String?, merchantId: Swift.Int?, merchantBrand: Swift.String?, countryName: Swift.String?, currencyCode: Swift.String?, nameColor: Swift.String?, showNameOnCard: Swift.Bool?, primaryColor: Swift.String?, secondaryColor: Swift.String?, imageUrl: Swift.String?, iconUrl: Swift.String?)
    public static func == (a: WalletCoreKit.CardListResponse.CardList, b: WalletCoreKit.CardListResponse.CardList) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct CardNotificationPreferencesResponse : Swift.Codable {
  public enum Settings : Swift.String {
    case off
    case on
    case weekly
    case daily
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let email: WalletCoreKit.CardNotificationPreferencesResponse.Field?
  public let pushNotification: WalletCoreKit.CardNotificationPreferencesResponse.Field?
  public let sms: WalletCoreKit.CardNotificationPreferencesResponse.Field?
  public var smsNotificationSettings: WalletCoreKit.CardNotificationPreferencesResponse.Settings {
    get
  }
  public var emailSettings: WalletCoreKit.CardNotificationPreferencesResponse.Settings {
    get
  }
  public var pushNotificationSettings: WalletCoreKit.CardNotificationPreferencesResponse.Settings {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.CardNotificationPreferencesResponse {
  public struct Field : Swift.Codable {
    public let campaign: WalletCoreKit.CardNotificationPreferencesResponse.Campaign?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Campaign : Swift.Codable {
    public let value: Swift.String?
    public let updatedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct CachedPaidMembershipInfo : Swift.Codable {
  public init(name: Swift.String? = nil, expiredAt: Swift.String? = nil, hasShown: Swift.Bool? = nil)
  public let name: Swift.String?
  public let expiredAt: Swift.String?
  public let hasShown: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardPaidMembershipInfoResponse : Swift.Codable {
  public let cardNumber: Swift.String?
  public let isPaidMembership: Swift.Bool?
  public let paidMembership: WalletCoreKit.CardPaidMembershipInfoResponse.PaidMembershipInfo?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.CardPaidMembershipInfoResponse {
  public struct PaidMembershipInfo : Swift.Codable {
    public let status: Swift.Bool?
    public let expiredAt: Swift.String?
    public let name: Swift.String?
    public let value: Swift.Double?
    public let bannerColor: Swift.String?
    public let benefits: [WalletCoreKit.CardPaidMembershipInfoResponse.PaidMembershipInfoBenefit]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaidMembershipInfoBenefit : Swift.Codable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let name: Swift.String?
    public let type: Swift.String?
    public let amount: Swift.Double?
    public let percentageDiscount: Swift.Double?
    public let minTransaction: Swift.Double?
    public let maxDiscount: Swift.Double?
    public let reference: Swift.String?
    public let isActive: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum TransactionType {
  case card
  case egift
  public static func == (a: WalletCoreKit.TransactionType, b: WalletCoreKit.TransactionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CardTransactionType : Swift.Codable {
  public let transactionType: Swift.String?
  public let transactionMappedType: Swift.String?
  public let transactionMappedTypeIcon: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CardUseCase {
  public func getCardDetailById(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.CardDetailState, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardDetailByNumber(cardNo: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.CardDetailState, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardLoyalty(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.LoyaltyResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardBanners(cardId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.CardDetailBannersResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardPrivileges(cardId: Swift.String, page: Swift.Int? = nil, perPage: Swift.Int? = nil, categoryId: Swift.String? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.PrivilegeItem], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardReferrals(cardId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.PrivilegeItem], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardPaidMembership(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.CardPaidMembershipInfoResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardItems(cardId: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<[WalletCoreKit.CardItemsResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getReferralCount(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.TotalReferralResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getReferralHistories(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int, completion: @escaping (Swift.Result<[WalletCoreKit.ReferralItem], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPartnerList(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int, keyword: Swift.String? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.PreRegistrationHistoryResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardCurrentOrder(cardNumber: Swift.String, page: Swift.Int, perPage: Swift.Int, completion: @escaping (Swift.Result<[WalletCoreKit.TransactionHistoryUnfinishedOrderResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func addCard(addCardData: WalletCoreKit.AddCardDetailRequest, completion: @escaping (Swift.Result<WalletCoreKit.CardDetail, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func activateCard(cardNumber: Swift.String, cardPIN: Swift.String, globalID: Swift.String? = nil, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func registerCustomer(registerCardDetail: WalletCoreKit.RegisterCardDetail, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func updateCustomer(registerCardDetail: WalletCoreKit.RegisterCardDetail, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public enum CardDetailState {
  case success(cardDetail: WalletCoreKit.CardDetail)
  case requireRegister(cardDetail: WalletCoreKit.CardDetail, form: [WalletCoreKit.Form])
}
@_inheritsConvenienceInitializers @objc(CartCoreData) public class CartCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.CartCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.CartCoreData>
  @nonobjc public class func fetchRequest(id: Swift.String) -> CoreData.NSFetchRequest<WalletCoreKit.CartCoreData>
  @nonobjc public class func fetchRequest(cardNumber: Swift.String, catalogType: Swift.String) -> CoreData.NSFetchRequest<WalletCoreKit.CartCoreData>
  @objc @NSManaged dynamic public var cardNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var items: Foundation.NSSet? {
    @objc get
    @objc set
  }
  public var cartItems: [WalletCoreKit.CartItemCoreData] {
    get
  }
}
extension WalletCoreKit.CartCoreData {
  @objc(addItemsObject:) @NSManaged dynamic public func addToItems(_ value: WalletCoreKit.CartItemCoreData)
  @objc(removeItemsObject:) @NSManaged dynamic public func removeFromItems(_ value: WalletCoreKit.CartItemCoreData)
  @objc(addItems:) @NSManaged dynamic public func addToItems(_ values: Foundation.NSSet)
  @objc(removeItems:) @NSManaged dynamic public func removeFromItems(_ values: Foundation.NSSet)
}
public struct CartItem {
  public let id: Foundation.UUID
  public let catalogCategoryId: Swift.String
  public let catalogId: Swift.String
  public let categoryId: Swift.String
  public let itemId: Swift.String
  public let itemName: Swift.String
  public let variantId: Swift.String
  public let variantName: Swift.String
  public let variantImage: Swift.String?
  public var quantity: Swift.Int
  public let isDigital: Swift.Bool
  public let shippingMethod: [Swift.String]
  public let customPrice: Swift.Double?
  public let fixedPrice: Swift.Double?
  public let itemType: WalletCoreKit.ItemType
  public let targetValue: WalletCoreKit.TargetValue?
  public let notes: Swift.String?
  public init(id: Foundation.UUID, catalogCategoryId: Swift.String, catalogId: Swift.String, categoryId: Swift.String, itemId: Swift.String, itemName: Swift.String, variantId: Swift.String, variantName: Swift.String, variantImage: Swift.String?, quantity: Swift.Int, isDigital: Swift.Bool, shippingMethod: [Swift.String], customPrice: Swift.Double?, fixedPrice: Swift.Double?, itemType: WalletCoreKit.ItemType, targetValue: WalletCoreKit.TargetValue?, notes: Swift.String? = nil)
  public func getTotalPrice() -> Swift.Double
  public func getRealPrice() -> Swift.Double
}
extension WalletCoreKit.CartItem {
  public static func of(itemDetail: WalletCoreKit.ItemDetail, variant: WalletCoreKit.Variant, quantity: Swift.Int, customPrice: Swift.Double? = nil, targetValue: WalletCoreKit.TargetValue? = nil, notes: Swift.String? = nil) throws -> WalletCoreKit.CartItem
}
extension WalletCoreKit.CartItem : Swift.Comparable {
  public static func == (lhs: WalletCoreKit.CartItem, rhs: WalletCoreKit.CartItem) -> Swift.Bool
  public static func < (lhs: WalletCoreKit.CartItem, rhs: WalletCoreKit.CartItem) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(CartItemCoreData) public class CartItemCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.CartItemCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.CartItemCoreData>
  @nonobjc public class func fetchRequest(id: Swift.String) -> CoreData.NSFetchRequest<WalletCoreKit.CartItemCoreData>
  @objc @NSManaged dynamic public var brand: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogCategoryId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isBuyNow: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isDigital: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itemType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notes: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variantId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variantName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var customPrice: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var fixedPrice: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantity: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shoppingCart: WalletCoreKit.CartCoreData? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var targetValue: Swift.String? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class CartUseCase {
  public func addToCart(cardNumber: Swift.String, catalogType: WalletCoreKit.CatalogType, item: WalletCoreKit.ItemDetail, variant: WalletCoreKit.Variant? = nil, quantity: Swift.Int)
  public func getCartItems(cardNumber: Swift.String, catalogType: WalletCoreKit.CatalogType) -> WalletCoreKit.ShoppingCart?
  public func updateItemQty(item: WalletCoreKit.CartItem, quantity: Swift.Int) -> Swift.Bool
  public func updateItemNotes(item: WalletCoreKit.CartItem, notes: Swift.String) -> Swift.Bool
  public func removeFromCart(item: WalletCoreKit.CartItem) -> Swift.Bool
  public func clearCart(cardNumber: Swift.String, catalogType: WalletCoreKit.CatalogType) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CashierUseCase {
  public func scanQrUseAtCashier(useAtCashierScan: WalletCoreKit.ScanQrUseAtCashierRequest, completion: @escaping (Swift.Result<WalletCoreKit.ScanQrUseAtCashierResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func checkTerminalUseAtCashier(terminalId: Swift.String, cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.UseAtCashierResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func payAtCashier(payAtCashierRequest: WalletCoreKit.PayAtCashierRequest, completion: @escaping (Swift.Result<WalletCoreKit.RedeemAtCashierResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct CatalogItem : Swift.Codable {
  public let id: Swift.String?
  public let isDigital: Swift.Bool?
  public let catalogId: Swift.String?
  public let itemType: Swift.String?
  public let name: Swift.String?
  public let price: Swift.Double?
  public let inStock: Swift.Bool?
  public let imageUrl: Swift.String?
  public let active: Swift.Bool?
  public let prefix: Swift.String?
  public let isLimited: Swift.Bool?
  public let limitQty: Swift.Int?
  public let categoryId: Swift.String?
  public let categoryName: Swift.String?
  public let merchant: WalletCoreKit.CatalogItem.Merchant?
  public let variants: [WalletCoreKit.Variant]?
  public let itemStoreAvailability: WalletCoreKit.CatalogItem.ItemStoreAvailability?
  public let vendor: WalletCoreKit.CatalogItem.Vendor?
  public let position: Swift.Int?
  public let images: [WalletCoreKit.Image]?
  public static func testModel(type: Swift.Int) -> WalletCoreKit.CatalogItem
  public func getMinVariantPrice() -> Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.CatalogItem {
  public struct Merchant : Swift.Codable {
    public let id: Swift.String?
    public let mId: Swift.String?
    public let brand: Swift.String?
    public let countryName: Swift.String?
    public let countryCode: Swift.String?
    public let currency: WalletCoreKit.CatalogItem.Merchant.Currency?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CatalogCategory : Swift.Codable {
    public let id: Swift.Int?
    public let CatalogId: Swift.Int?
    public let CategoryId: Swift.Int?
    public let position: Swift.Int?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public let shippingMethods: [Swift.String]?
    public let shippingAttributes: [WalletCoreKit.CatalogItem.CatalogCategory.ShippingAttribute]?
    public let gosendVendor: Swift.String?
    public let sicepatVendor: Swift.String?
    public struct ShippingAttribute : Swift.Codable {
      public let name: Swift.String?
      public let attributes: WalletCoreKit.CatalogItem.CatalogCategory.ShippingAttribute.Attribute?
      public struct Attribute : Swift.Codable {
        public let pricePerKM: Swift.Double?
        public let minimumPrice: Swift.Double?
        public let maximumDistance: Swift.Double?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Vendor : Swift.Codable {
    public let integrationProcess: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ItemStoreAvailability : Swift.Codable {
    public let assignedStoreIds: [WalletCoreKit.ValueWrapper]?
    public let enabledStoreIds: [WalletCoreKit.ValueWrapper]?
    public let disabledStoreIds: [WalletCoreKit.ValueWrapper]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.CatalogItem.Merchant {
  public struct Currency : Swift.Codable {
    public let symbol: Swift.String?
    public let decimalDigits: Swift.Double?
    public let code: Swift.String?
    public let thousandSeparator: Swift.String?
    public let decimalSeparator: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class CatalogItemUseCase {
  public func getItemDetail(itemId: Swift.String, categoryId: Swift.String? = nil, catalogId: Swift.String? = nil, programId: Swift.String? = nil, completion: @escaping (Swift.Result<WalletCoreKit.ItemDetail, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func checkEWalletAccount(eWalletProduct: Swift.String, phoneNumber: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.EWalletCheckVendorResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func checkEWalletAccount(phoneNumber: Swift.String, itemDetail: WalletCoreKit.ItemDetail, completion: @escaping (Swift.Result<WalletCoreKit.EWalletCheckState, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func checkGarudaMiles(number: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.CheckGarudaMilesUserResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func inquireVendor(clientNumber: Swift.String, programId: Swift.String, itemId: Swift.String, variantId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.BillingVendorInquiryResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public enum EWalletCheckState {
  public struct RequestEWallet {
  }
  case requestEWallet(WalletCoreKit.EWalletCheckState.RequestEWallet)
  case userNotExist(name: Swift.String?)
}
public struct CatalogStore : Swift.Codable {
  public let operationHours: [WalletCoreKit.CatalogStore.StoreOpeartionHours]?
  public let id: Swift.String?
  public let sId: Swift.String?
  public let name: Swift.String?
  public let latitude: Swift.String?
  public let longitude: Swift.String?
  public let areaId: Swift.String?
  public let address: Swift.String?
  public let active: Swift.Bool?
  public let primaryImage: Swift.String?
  public let enableOperationHours: Swift.Bool?
  public let distance: Swift.Double?
  public let isOpen: Swift.Bool?
  public let distributor: WalletCoreKit.CatalogStore.ShopDistributor?
  public var originCoord: Swift.String {
    get
  }
  public struct ShopDistributor : Swift.Codable {
    public let merchant: WalletCoreKit.CatalogStore.ShopDistributorMerchant?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ShopDistributorMerchant : Swift.Codable {
    public let iconURL: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct StoreOpeartionHours : Swift.Codable {
    public let dayNumber: Swift.Int?
    public let start: Swift.String?
    public let end: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CatalogType : Swift.String {
  case buyCatalog
  case rewardCatalog
  case vfCatalog
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CatalogUseCase {
  public func getCategories(programId: Swift.String, catalogType: WalletCoreKit.CatalogType, storeId: Swift.String? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.StoreCategory], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCatalogItems(categoryId: Swift.String?, programId: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 20, minPrice: Swift.Int = 1, maxPrice: Swift.Int = 5_000_000, cardDetail: WalletCoreKit.CardDetail, keyword: Swift.String? = nil, catalogType: WalletCoreKit.CatalogType, storeId: Swift.String? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.CatalogItem], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCatalogShop(programId: Swift.String, latitude: Swift.String?, longitude: Swift.String?, location: Swift.String?, page: Swift.Int? = nil, perPage: Swift.Int? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.CatalogStore], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public protocol CellViewModelType {
  var identifier: Swift.String { get }
  var rowCount: Swift.Int { get }
}
extension WalletCoreKit.CellViewModelType {
  public var rowCount: Swift.Int {
    get
  }
}
public struct ChangePINResponse : Swift.Codable {
  public let pin: Swift.String?
  public let no: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckGarudaMilesUserResponse : Swift.Codable {
  public let awardMiles: Swift.Int?
  public let firstName: Swift.String?
  public let tierName: Swift.String?
  public let middleName: Swift.String?
  public let cardNumber: Swift.String?
  public let memberId: Swift.String?
  public let status: WalletCoreKit.WalletCoreKitAnyCodable?
  public let lastName: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NoMemberResponse : Swift.Codable, Swift.Hashable {
  public let responseDesc: Swift.String?
  public let responseMessage: Swift.String?
  public let responseCode: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletCoreKit.NoMemberResponse, b: WalletCoreKit.NoMemberResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletCoreKitCheckLockResponse : Swift.Decodable {
  public init(isLocked: Swift.Bool?, lockedUntil: Swift.String?, currentTime: Swift.String?)
  public let phoneNumber: Swift.String?
  public let email: Swift.String?
  public let isLocked: Swift.Bool?
  public let lockedUntil: Swift.String?
  public let currentTime: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct CheckoutEVoucher : Swift.Codable, Swift.Equatable {
  public let id: Swift.Int?
  public let mId: Swift.String?
  public let egiftMasterId: Swift.Int?
  public let quantity: Swift.Int?
  public let number: Swift.String?
  public let expiredAt: Swift.String?
  public let name: Swift.String?
  public let type: Swift.String?
  public let amount: Swift.Double?
  public let imageUrl: Swift.String?
  public let termCondition: Swift.String?
  public let maxDiscount: Swift.Double?
  public let minTransaction: Swift.Double?
  public let list: [WalletCoreKit.CheckoutEVoucher.List]?
  public static func == (a: WalletCoreKit.CheckoutEVoucher, b: WalletCoreKit.CheckoutEVoucher) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.CheckoutEVoucher {
  public struct List : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let number: Swift.String?
    public let expiredAt: Swift.String?
    public static func == (a: WalletCoreKit.CheckoutEVoucher.List, b: WalletCoreKit.CheckoutEVoucher.List) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct CheckShopVoucherResponse : Swift.Codable, Swift.Equatable {
  public let isAvailable: Swift.Bool?
  public let visibility: Swift.String?
  public let highestVoucher: WalletCoreKit.HighestVoucher?
  public static func == (a: WalletCoreKit.CheckShopVoucherResponse, b: WalletCoreKit.CheckShopVoucherResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HighestVoucher : Swift.Codable, Swift.Equatable {
  public let voucherId: Swift.String?
  public let type: Swift.String?
  public let voucherName: Swift.String?
  public var voucherCode: Swift.String?
  public let voucherAmount: Swift.Double?
  public let voucherType: Swift.String?
  public let voucherImage: Swift.String?
  public let voucherVisibility: Swift.String?
  public let merchantName: Swift.String?
  public let minTransaction: Swift.Double?
  public let minQuantity: Swift.Int?
  public let maxDiscount: Swift.Double?
  public let expiryAt: Swift.String?
  public let quantity: Swift.Int?
  public let termCondition: Swift.String?
  public var discountType: WalletCoreKit.DiscountType? {
    get
  }
  public static func == (a: WalletCoreKit.HighestVoucher, b: WalletCoreKit.HighestVoucher) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CityResponse : Swift.Codable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let provinceID: WalletCoreKit.WalletCoreKitAnyCodable?
  public let name: Swift.String?
  public let active: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public let province: WalletCoreKit.CityResponse.Province?
  public let country: WalletCoreKit.CityResponse.Province.Country?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.CityResponse {
  public struct Province : Swift.Codable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let countryId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let name: Swift.String?
    public let active: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public let country: WalletCoreKit.CityResponse.Province.Country?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.CityResponse.Province {
  public struct Country : Swift.Codable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let code: Swift.String?
    public let name: Swift.String?
    public let active: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public class ClaimRewardRequest : WalletCoreKit.WalletCoreKitPayload {
  final public let cardId: Swift.String
  final public let subscriptionId: Swift.String
  final public let subscriptionDirectRewardId: Swift.String
  public init(cardId: Swift.String, subscriptionId: Swift.String, subscriptionDirectRewardId: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
public struct ClaimRewardResponse : Swift.Codable {
  public let number: Swift.String?
  public let mId: Swift.String?
  public let expiredAt: Swift.String?
  public let code: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ClaimRewardsLocationResponse : Swift.Codable, Swift.Equatable {
  public let id: Swift.Int?
  public let label: Swift.String?
  public let location: Swift.String?
  public static func == (a: WalletCoreKit.ClaimRewardsLocationResponse, b: WalletCoreKit.ClaimRewardsLocationResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ClaimRewardsTransactionResponse : Swift.Codable, Swift.Equatable {
  public let trxAmount: Swift.Double?
  public let trxAmountType: Swift.String?
  public let point: Swift.Double?
  public let name: Swift.String?
  public static func == (a: WalletCoreKit.ClaimRewardsTransactionResponse, b: WalletCoreKit.ClaimRewardsTransactionResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ClaimRewardTransactionRequest : WalletCoreKit.WalletCoreKitPayload {
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class ClaimRewardUseCase {
  public func getClaimRewardLocations(cardId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.ClaimRewardsLocationResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func claimReward(cardId: Swift.String, location: Swift.String, transactionNo: Swift.String, code: Swift.String? = nil, amount: Swift.Double? = nil, completion: @escaping (Swift.Result<WalletCoreKit.ClaimRewardsTransactionResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public protocol Collectionable {
  var cellViewModels: [any WalletCoreKit.CellViewModelType] { get }
  var numberOfSections: Swift.Int { get }
  func numberOfItems(in section: Swift.Int) -> Swift.Int
  func cellModel(for indexPath: Foundation.IndexPath) -> any WalletCoreKit.CellViewModelType
}
extension WalletCoreKit.Collectionable {
  public var numberOfSections: Swift.Int {
    get
  }
  public func numberOfItems(in section: Swift.Int) -> Swift.Int
  public func cellModel(for indexPath: Foundation.IndexPath) -> any WalletCoreKit.CellViewModelType
  public func sectionCellModel(for section: Swift.Int) -> (any WalletCoreKit.CellViewModelType)?
}
public enum PhoneNumberError : Swift.Error {
  case generalError
  case invalidCountryCode
  case notANumber
  case unknownType
  case tooLong
  case tooShort
  case deprecated
  case metadataNotFound
  public static func == (a: WalletCoreKit.PhoneNumberError, b: WalletCoreKit.PhoneNumberError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCoreKit.PhoneNumberError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PhoneNumberFormat {
  case e164
  case international
  case national
  public static func == (a: WalletCoreKit.PhoneNumberFormat, b: WalletCoreKit.PhoneNumberFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PhoneNumberType : Swift.String, Swift.Codable {
  case fixedLine
  case mobile
  case fixedOrMobile
  case pager
  case personalNumber
  case premiumRate
  case sharedCost
  case tollFree
  case voicemail
  case voip
  case uan
  case unknown
  case notParsed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PossibleLengthType : Swift.String, Swift.Codable {
  case national
  case localOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 11.0, *)
public protocol CountryCodePickerDelegate : AnyObject {
  func countryCodePickerViewControllerDidPickCountry(_ country: WalletCoreKit.CountryCodePickerViewController.Country)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) public class CountryCodePickerViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) final public let phoneNumberKit: WalletCoreKit.PhoneNumberKit
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any WalletCoreKit.CountryCodePickerDelegate)?
  @_Concurrency.MainActor(unsafe) public init(phoneNumberKit: WalletCoreKit.PhoneNumberKit, commonCountryCodes: [Swift.String] = PhoneNumberKit.CountryCodePicker.commonCountryCodes)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@available(iOS 11.0, *)
extension WalletCoreKit.CountryCodePickerViewController : UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
@available(iOS 11.0, *)
extension WalletCoreKit.CountryCodePickerViewController {
  public struct Country {
    public var code: Swift.String
    public var flag: Swift.String
    public var name: Swift.String
    public var prefix: Swift.String
    public init?(for countryCode: Swift.String, with phoneNumberKit: WalletCoreKit.PhoneNumberKit)
  }
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Cell : UIKit.UITableViewCell {
    @objc deinit
  }
}
public struct CountryResponse : Swift.Codable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let code: Swift.String?
  public let name: Swift.String?
  public let active: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateBuybackRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(phone: Swift.String, bankName: Swift.String, email: Swift.String, accountNumber: Swift.String, cardNumber: Swift.String, imageUrl: Swift.String, accountName: Swift.String, amount: Swift.Double, pin: Swift.String, selectedWalletID: Swift.String?)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct CreateBuybackResponse : Swift.Decodable {
  public let id: Swift.String?
  public let maskedId: Swift.String?
  public let trxNo: Swift.String?
  public let trxDate: Swift.String?
  public let cardNo: Swift.String?
  public let trxType: Swift.String?
  public let trxAmount: Swift.Double?
  public let balance: Swift.Double?
  public let trxStatus: Swift.String?
  public let description: Swift.String?
  public let merchant: Swift.String?
  public let programId: Swift.String?
  public let programName: Swift.String?
  public let order: WalletCoreKit.CreateBuybackResponse.Order?
  public let buyback: WalletCoreKit.CreateBuybackResponse.Buyback?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.CreateBuybackResponse {
  public struct Buyback : Swift.Decodable {
    public let id: Swift.String?
    public let cardNumber: Swift.String?
    public let bankName: Swift.String?
    public let accountNumber: Swift.String?
    public let accountName: Swift.String?
    public let buybackFeePct: Swift.Double?
    public let buybackChargeRate: Swift.Double?
    public let buybackAbsorbBy: Swift.String?
    public let amount: Swift.Double?
    public let phone: Swift.String?
    public let email: Swift.String?
    public let imageUrl: Swift.String?
    public let updatedAt: Swift.String?
    public let createdAt: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Order : Swift.Decodable {
    public let id: Swift.String?
    public let orderId: Swift.String?
    public let orderType: Swift.String?
    public let invoiceNumber: Swift.String?
    public let total: Swift.Double?
    public let shipping_fee: Swift.Double?
    public let total_with_shipping: Swift.Double?
    public let cardNo: Swift.String?
    public let description: Swift.String?
    public let status: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct CreateOrderRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(payment: WalletCoreKit.CreateOrderRequest.Payment, items: [WalletCoreKit.CreateOrderRequest.Item], fee: WalletCoreKit.CreateOrderRequest.Fee? = nil, recipient: WalletCoreKit.CreateOrderRequest.Recipient?, storeId: Swift.String? = nil, shipping: WalletCoreKit.CreateOrderRequest.Shipping?, voucher: WalletCoreKit.CreateOrderRequest.Voucher?, additionalMetaData: WalletCoreKit.CreateOrderRequest.AdditionalMetadata? = nil, customField: [Swift.String : Swift.String]?, pin: Swift.String?)
  public mutating func setPin(pin: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
extension WalletCoreKit.CreateOrderRequest {
  public struct Voucher : WalletCoreKit.WalletCoreKitPayload {
    public init(type: Swift.String, code: Swift.String)
    public var parameters: [Swift.String : Any]? {
      get
    }
  }
  public struct Shipping : WalletCoreKit.WalletCoreKitPayload {
    public init(vendor: Swift.String?, method: Swift.String, originCoord: Swift.String, destinationCoord: Swift.String, destinationAreaId: Swift.String?, storeId: Swift.String, rateId: Swift.String?)
    public var parameters: [Swift.String : Any]? {
      get
    }
  }
  public struct Fee : WalletCoreKit.WalletCoreKitPayload {
    public init(shipping: Swift.Double?)
    public var parameters: [Swift.String : Any]? {
      get
    }
  }
  public struct Item : WalletCoreKit.WalletCoreKitPayload {
    public init(id: Swift.String, variantId: Swift.String, quantity: Swift.Int, phone: Swift.String?, countryCode: Swift.String?, customPrice: Swift.Double?, customPriceConverted: Swift.Bool? = nil, itemExecNumber: Swift.String?, exchangeAmount: Swift.Int?, catalogId: Swift.String?, categoryId: Swift.String?, notes: Swift.String?)
    public var parameters: [Swift.String : Any]? {
      get
    }
  }
  public struct Payment : WalletCoreKit.WalletCoreKitPayload {
    public init(amount: Swift.Double? = nil, otherPayments: [WalletCoreKit.CreateOrderRequest.Payment.OtherPayments]? = nil, type: Swift.String, walletType: Swift.String?, walletName: Swift.String?, cardNumber: Swift.String, cardPin: Swift.String, channel: Swift.String? = nil, channelCode: Swift.String? = nil, currency: Swift.String? = nil, deviceInfo: Swift.String? = nil)
    public var parameters: [Swift.String : Any]? {
      get
    }
    public struct OtherPayments : WalletCoreKit.WalletCoreKitPayload {
      public init(type: Swift.String, channel: Swift.String)
      public var parameters: [Swift.String : Any]? {
        get
      }
    }
  }
  public struct Recipient : WalletCoreKit.WalletCoreKitPayload {
    public init(firstName: Swift.String, lastName: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String?, cityId: Swift.String?, areaId: Swift.String?, address: Swift.String?, postalCode: Swift.String?)
    public var parameters: [Swift.String : Any]? {
      get
    }
  }
  public struct AdditionalMetadata : WalletCoreKit.WalletCoreKitPayload {
    public var parameters: [Swift.String : Any]? {
      get
    }
  }
}
public struct Currency : Swift.Codable {
  public let symbol: Swift.String?
  public let code: Swift.String?
  public let decimalDigits: Swift.Int?
  public let rounding: Swift.String?
  public let thousandSeparator: Swift.String?
  public let decimalSeparator: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Customer : Swift.Codable {
  public let additionalData: [WalletCoreKit.AdditionalData]?
  public let address: Swift.String?
  public let birthday: Swift.String?
  public let city: Swift.String?
  public let confirmedAt: Swift.String?
  public let email: Swift.String?
  public let id: Swift.String?
  public let name: Swift.String?
  public let occupation: Swift.String?
  public let phone: Swift.String?
  public let sex: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerDataRules : Swift.Codable {
  public let key: Swift.String?
  public let value: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CustomerUseCase {
  public func getCustomer(completion: @escaping (Swift.Result<[WalletCoreKit.WalletCoreKitUserCustomerResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func updateCustomer(data: [Swift.String : Swift.String], completion: @escaping (Swift.Result<[WalletCoreKit.WalletCoreKitUserCustomerResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public let defaultThresholdInDays: Swift.Int
extension Foundation.Decimal {
  public var doubleValue: Swift.Double {
    get
  }
}
extension Swift.Double {
  public func convertNonDecimal(multiplier: Swift.Double) -> (Swift.Double, Swift.Double)
  public func priceFormatNoRounding() -> Swift.String
  public func priceFormat(with suffix: Swift.String? = nil) -> Swift.String
  public func priceFormat(suffix: Swift.String?) -> Swift.String
  public func priceFormat(prefix: Swift.String?) -> Swift.String
  public func priceFormat(prefix: Swift.String?, suffix: Swift.String?) -> Swift.String
  public func priceFormat(currencyPrefix: Swift.String, decimalDigit: Swift.Int = 0, roundingRule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero) -> Swift.String
  public static func formatted(distance: Swift.Double?) -> Swift.String?
  public func formattedWeight(for quantity: Swift.Int = 1) -> Swift.String
  public var stringWithoutZeroFraction: Swift.String {
    get
  }
  public func rounded(toPlaces places: Swift.Int, rule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero) -> Swift.Double
  public func rounded(digits: Swift.Int, rule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero) -> Swift.Double
  public var clean: Swift.String {
    get
  }
}
public struct Egift : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let mId: Swift.String?
  public let walletId: Swift.String?
  public let merchantName: Swift.String?
  public let programIsActive: Swift.Bool?
  public let merchantIsActive: Swift.Bool?
  public let imageUrl: Swift.String?
  public let number: Swift.String?
  public let status: Swift.String?
  public let globalStatus: Swift.String?
  public let egiftMasterId: Swift.String?
  public let egiftMasterIsActive: Swift.Bool?
  public let name: Swift.String?
  public let usedAt: Swift.String?
  public let expiredAt: Swift.String?
  public let minTransaction: Swift.Double?
  public let totalEgift: Swift.Int?
  public let isReachLimitDailyUsage: Swift.Bool?
  public let isStack: Swift.Bool?
  public static func == (a: WalletCoreKit.Egift, b: WalletCoreKit.Egift) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EGiftCountResponse : Swift.Decodable {
  public let activated: Swift.Int?
  public let used: Swift.Int?
  public let suspended: Swift.Int?
  public let expired: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct EgiftDetail : Swift.Decodable {
  public let externalNumbers: [Swift.String]?
  public let isReachLimitDailyUsage: Swift.Bool?
  public let deliveryUrl: Swift.String?
  public let id: Swift.String?
  public let egiftNumber: Swift.String?
  public let status: Swift.String?
  public let globalStatus: Swift.String?
  public let usedDate: Swift.String?
  public let expiredAt: Swift.String?
  public let egiftMasterType: Swift.String?
  public let sourceType: Swift.String?
  public let egiftMasterIsActive: Swift.Bool?
  public let minTransaction: Swift.Double?
  public let termCondition: Swift.String?
  public let egiftName: Swift.String?
  public let imageUrl: Swift.String?
  public let hasExtraSales: Swift.Bool?
  public let availableInStore: Swift.Bool?
  public let availableDelivery: Swift.Bool?
  public let merchantBrand: Swift.String?
  public let merchantId: Swift.String?
  public let merchantIsActive: Swift.Bool?
  public let merchantCurrency: Swift.String?
  public let merchantDecimalDigit: Swift.Double?
  public let programIsActive: Swift.Bool?
  public let programOverview: Swift.String?
  public let programName: Swift.String?
  public let programId: Swift.String?
  public let usedAt: Swift.String?
  public let usedApprovalCode: Swift.String?
  public let voucherExternalCode: Swift.String?
  public let voucherExternalCodeType: Swift.String?
  public let voucherExpiredAt: Swift.String?
  public let cardInventory: WalletCoreKit.EgiftDetail.CardInventory?
  public let maxDiscount: Swift.Double?
  public let egiftAmount: Swift.Double?
  public struct CardInventory : Swift.Decodable {
    public let id: Swift.String?
    public let programId: Swift.String?
    public let distributionId: Swift.String?
    public let no: Swift.String?
    public let status: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Currency : Swift.Decodable {
    public let code: Swift.String?
    public let decimalDigits: Swift.Int?
    public let decimalSeparator: Swift.String?
    public let name: Swift.String?
    public let namePlural: Swift.String?
    public let rounding: Swift.Int?
    public let symbol: Swift.String?
    public let symbolNative: Swift.String?
    public let thousandSeparator: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func testModel(type: Swift.Int) -> WalletCoreKit.EgiftDetail
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.EgiftDetail {
  public struct EgiftIntegrationVendor : Swift.Codable {
    public let id: Swift.Int?
    public let vendorMessage: Swift.String?
    public let externalCode: Swift.String?
    public let externalCodeType: Swift.String?
    public let expiredAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct Distributor : Swift.Decodable {
    public let brand: Swift.String?
    public let buttonColor: Swift.String?
    public let company: Swift.String?
    public let countryName: Swift.String?
    public let currency: WalletCoreKit.EgiftDetail.Currency?
    public let dId: Swift.String?
    public let distributorType: Swift.String?
    public let email: Swift.String?
    public let headerColor: Swift.String?
    public let iconUrl: Swift.String?
    public let id: Swift.Int?
    public let smsSender: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct EgiftExternal : Swift.Decodable {
    public let amount: Swift.Double?
    public let createdAt: Swift.String?
    public let egiftId: Swift.Int?
    public let egiftMasterId: Swift.Int?
    public let expiredAt: Swift.String?
    public let id: Swift.Int?
    public let merchantId: Swift.Int?
    public let number: Swift.String
    public let purchaseOrderNumber: Swift.String?
    public let updatedAt: Swift.String?
    public let usedAt: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct EgiftMaster : Swift.Codable {
    public let active: Swift.Bool?
    public let allowMultiVoucher: Swift.Bool?
    public let amount: Swift.Double?
    public let createdAt: Swift.String?
    public let egiftName: Swift.String?
    public let egiftSourceType: Swift.String?
    public let egiftType: Swift.String?
    public let id: Swift.Int?
    public let imageUrl: Swift.String?
    public let itemName: Swift.String?
    public let merchantId: Swift.Int?
    public let extraSales: Swift.Bool?
    public let termCondition: Swift.String?
    public let updatedAt: Swift.String?
    public let allowAttribute: WalletCoreKit.EgiftDetail.EgiftMaster.AllowAttribute?
    public let minTransaction: Swift.Double?
    public let maxDiscount: Swift.Double?
    public let egiftAmount: Swift.Double?
    public struct AllowAttribute : Swift.Codable {
      public let availableInstore: Swift.Bool?
      public let availableDelivery: Swift.Bool?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct Issuer : Swift.Decodable {
    public let brand: Swift.String?
    public let buttonColor: Swift.String?
    public let company: Swift.String?
    public let countryName: Swift.String?
    public let currency: WalletCoreKit.EgiftDetail.Currency?
    public let email: Swift.String?
    public let headerColor: Swift.String?
    public let iconUrl: Swift.String?
    public let id: Swift.Int?
    public let mId: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct Merchant : Swift.Decodable {
    public let acctHolder: Swift.String?
    public let acctName: Swift.String?
    public let acctNumber: Swift.String?
    public let active: Swift.Bool?
    public let address: Swift.String?
    public let agencyFeePct: WalletCoreKit.ValueWrapper?
    public let brand: Swift.String?
    public let buttonColor: Swift.String?
    public let company: Swift.String?
    public let config: WalletCoreKit.EgiftDetail.Merchant.Config?
    public let contact: Swift.String?
    public let contactEmail: Swift.String?
    public let contactPosition: Swift.String?
    public let countryCode: Swift.String?
    public let countryName: Swift.String?
    public let createdAt: Swift.String?
    public let currency: WalletCoreKit.EgiftDetail.Currency?
    public let egiftAgencyFeePct: WalletCoreKit.ValueWrapper?
    public let email: Swift.String?
    public let financeAddress: Swift.String?
    public let financeEmail: Swift.String?
    public let financeName: Swift.String?
    public let gCFSClientId: Swift.Int?
    public let gCFSClientName: Swift.String?
    public let headerColor: Swift.String?
    public let iconUrl: Swift.String?
    public let id: Swift.Int?
    public let inactivity: WalletCoreKit.EgiftDetail.Merchant.InActive?
    public let industry: Swift.String?
    public let isBulkTopup: Swift.Bool?
    public let isSendEmail: Swift.Bool?
    public let isSendSms: Swift.Bool?
    public let isTadaDigital: Swift.Bool?
    public let loyalty: Swift.Bool?
    public let mId: Swift.String?
    public let merchantType: Swift.String?
    public let orderEmail: Swift.String?
    public let phone: Swift.String?
    public let processingFeePct: WalletCoreKit.ValueWrapper?
    public let processorName: Swift.String?
    public let processorType: Swift.String?
    public let processorUrl: Swift.String?
    public let timezone: Swift.String?
    public let updatedAt: Swift.String?
    public let welcomePicture: Swift.String?
    public let zendeskAgentId: Swift.String?
    public struct Config : Swift.Decodable {
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct InActive : Swift.Decodable {
      public let programId: [Swift.String]?
      public let inactiveAt: Swift.String?
      public let reason: Swift.String?
      public let user: Swift.String?
      public init(from decoder: any Swift.Decoder) throws
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct Program : Swift.Decodable {
    public let active: Swift.Bool?
    public let id: Swift.Int?
    public let isPointProgram: Swift.Bool?
    public let merchantId: Swift.Int?
    public let overview: Swift.String?
    public let pointProgramRate: Swift.Int?
    public let productType: Swift.String?
    public let programId: Swift.String?
    public let programName: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct Transaction : Swift.Decodable {
    public let amount: Swift.Double?
    public let apiUserId: Swift.Int?
    public let batchNum: Swift.String?
    public let blockedAt: Swift.String?
    public let cardNo: Swift.String?
    public let cardProgramId: Swift.String?
    public let clientId: Swift.Int?
    public let clientType: Swift.String?
    public let code: Swift.String?
    public let createdAt: Swift.String?
    public let description: Swift.String?
    public let digest: Swift.String?
    public let distributionId: Swift.String?
    public let distributorId: Swift.Int?
    public let distributorProfile: WalletCoreKit.EgiftDetail.DistributorProfile?
    public let emailTemplateId: Swift.String?
    public let expiredAt: Swift.String?
    public let externalTransactionId: Swift.String?
    public let fileNumber: Swift.String?
    public let id: Swift.Int?
    public let initLoadValCode: Swift.String?
    public let invoiceNo: Swift.String?
    public let merchantId: Swift.Int?
    public let metaData: WalletCoreKit.EgiftDetail.MetaData?
    public let no: Swift.String?
    public let num: Swift.Int?
    public let programId: Swift.String?
    public let programProfileId: Swift.Int?
    public let referralCode: Swift.String?
    public let replyApprovalCode: Swift.String?
    public let replyCardBalance: Swift.Double?
    public let replyCardExpiredDate: Swift.String?
    public let replyCardNo: Swift.String?
    public let replyCardStatus: Swift.String?
    public let replyCardSuspended: Swift.Bool?
    public let replyDateTime: Swift.String?
    public let replyTrxCode: Swift.String?
    public let replyTrxReceipt: Swift.String?
    public let replyTrxStatus: Swift.String?
    public let rewards: Swift.String?
    public let status: Swift.String?
    public let storeId: Swift.Int?
    public let storeProfile: WalletCoreKit.EgiftDetail.StoreProfile?
    public let type: Swift.String?
    public let updatedAt: Swift.String?
    public let voidByTransactionId: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.EgiftDetail {
  public struct DistributorProfile : Swift.Decodable {
    public let active: Swift.Bool?
    public let address: Swift.String?
    public let billingAddress: Swift.String?
    public let brand: Swift.String?
    public let buttonColor: Swift.String?
    public let company: Swift.String?
    public let config: WalletCoreKit.EgiftDetail.DistributorProfile.Config?
    public let contact: Swift.String?
    public let contactPosition: Swift.String?
    public let countryCode: Swift.String?
    public let countryName: Swift.String?
    public let createdAt: Swift.String?
    public let currency: WalletCoreKit.EgiftDetail.Currency?
    public let dId: Swift.String?
    public let distributionFeePct: Swift.Double?
    public let distributorType: Swift.String?
    public let egiftSharingFeePct: Swift.Double?
    public let email: Swift.String?
    public let enablePaymentReward: Swift.Bool?
    public let enableStoreRating: Swift.Bool?
    public let headerColor: Swift.String?
    public let iconUrl: Swift.String?
    public let id: Swift.Int?
    public let isTada360: Swift.Bool?
    public let merchantId: Swift.Int?
    public let name: Swift.String?
    public let npwp: Swift.String?
    public let phone: Swift.String?
    public let redemptionFee360Pct: Swift.Double?
    public let smsSender: Swift.String?
    public let timezone: Swift.String?
    public let updatedAt: Swift.String?
    public struct Config : Swift.Decodable {
      public let useCashierPin: Swift.Bool?
      public let requireBillNumber: Swift.Bool?
      public init(from decoder: any Swift.Decoder) throws
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct MetaData : Swift.Decodable {
    public let xVndAppName: Swift.String?
    public let xVndAppPlatform: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct StoreProfile : Swift.Decodable {
    public let active: Swift.Bool?
    public let address: Swift.String?
    public let bankAccountHolder: Swift.String?
    public let bankAccountNumber: Swift.String?
    public let bankName: Swift.String?
    public let contact: Swift.String?
    public let contactPosition: Swift.String?
    public let coordinate: Swift.String?
    public let createdAt: Swift.String?
    public let distributorId: Swift.Int?
    public let email: Swift.String?
    public let id: Swift.Int?
    public let latitude: Swift.String?
    public let location: Swift.String?
    public let longitude: Swift.String?
    public let npwp: Swift.String?
    public let phone: Swift.String?
    public let sId: Swift.String?
    public let storeCode: Swift.String?
    public let storeType: Swift.String?
    public let updatedAt: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct EgiftExternalPairRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(number: Swift.String, mId: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct EGiftTransactionHistory : Swift.Codable {
  public let id: Swift.String?
  public let trxNo: Swift.String?
  public let trxDate: Swift.String?
  public let location: Swift.String?
  public let name: Swift.String?
  public let type: Swift.String?
  public let imageUrl: Swift.String?
  public let quantity: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TadaWalletKitError : Swift.Error, Swift.Equatable {
  case invalidParameter(Swift.String)
  case unauthorized
  case networkError(WalletCoreKit.NetworkError)
  case dataProcessingError(Swift.String)
  case userLocked
  public var localizedDescription: Swift.String {
    get
  }
  public static func == (lhs: WalletCoreKit.TadaWalletKitError, rhs: WalletCoreKit.TadaWalletKitError) -> Swift.Bool
}
public enum NetworkError : Swift.Error, Swift.Equatable {
  case offline
  case timeout
  case requestError(Swift.String)
  case serverError
  case unknown(Swift.String?)
  public var localizedDescription: Swift.String {
    get
  }
  public static func == (lhs: WalletCoreKit.NetworkError, rhs: WalletCoreKit.NetworkError) -> Swift.Bool
}
public struct ErrorResponse : Swift.Decodable {
  public let error: Swift.String?
  public let errorDescription: Swift.String?
  public let message: Swift.String?
  public let title: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorResponseV2 : Swift.Decodable {
  public let error: WalletCoreKit.ErrorResponseV2.CustomError?
  public let message: Swift.String?
  public let title: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.ErrorResponseV2 {
  public struct CustomError : Swift.Decodable {
    public let name: Swift.String?
    public let status: Swift.Int?
    public let messageUser: Swift.String?
    public let system: WalletCoreKit.ErrorResponseV2.CustomError.System?
    public let user: WalletCoreKit.ErrorResponseV2.CustomError.User?
    public let data: WalletCoreKit.WalletCoreKitAnyCodable?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.ErrorResponseV2.CustomError {
  public struct System : Swift.Decodable {
    public let message: Swift.String?
    public let code: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct User : Swift.Decodable {
    public let message: Swift.String?
    public let code: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class EVoucherUseCase {
  public func getCardVouchers(cardId: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<[WalletCoreKit.Egift], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardVouchersCount(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.EGiftCountResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVouchers(keyword: Swift.String? = nil, archived: Swift.Bool = false, page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<[WalletCoreKit.Egift], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVoucherCount(archived: Swift.Bool = false, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.EGiftCountResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCardVoucherStack(cardId: Swift.String, egiftMasterId: Swift.String, status: WalletCoreKit.VoucherStatus, group: WalletCoreKit.VoucherGroup = VoucherGroup.default, page: Swift.Int? = nil, perPage: Swift.Int? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.Egift], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVoucherStack(egiftMasterId: Swift.String, status: WalletCoreKit.VoucherStatus, group: WalletCoreKit.VoucherGroup = VoucherGroup.default, page: Swift.Int? = nil, perPage: Swift.Int? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.Egift], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVoucherDetail(mId: Swift.String, number: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.EgiftDetail, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVoucherExternalCodes(mId: Swift.String, number: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func deleteVoucher(id: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func useVoucher(amount: Swift.String? = nil, billNumber: Swift.String? = nil, cashierCode: Swift.String, egiftNumber: Swift.String, merchantmId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct EWalletCheckVendorResponse : Swift.Codable {
  public let eWalletProduct: Swift.String?
  public let canTopup: Swift.Bool?
  public let status: Swift.String?
  public let customerName: Swift.String?
  public let maxAmount: WalletCoreKit.EWalletCheckVendorResponse.AmountValue?
  public let minAmount: WalletCoreKit.EWalletCheckVendorResponse.AmountValue?
  public struct AmountValue : Swift.Codable {
    public let currency: Swift.String?
    public let value: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExternalPaymentResponse : Swift.Decodable {
  public let name: Swift.String?
  public let publicKey: Swift.String?
  public let programId: Swift.String?
  public let active: Swift.Bool?
  public let isSubaccount: Swift.Bool?
  public let listPayment: [WalletCoreKit.ExternalPaymentResponse.Payment]?
  public struct Payment : Swift.Decodable {
    public let isLiveMode: Swift.Bool?
    public let channelCode: Swift.String?
    public let name: Swift.String?
    public let currency: Swift.String?
    public let channelCategory: Swift.String?
    public let isEnabled: Swift.Bool?
    public let paymentType: WalletCoreKit.PaymentType?
    public let channel: Swift.String?
    public enum GroupType : Swift.String {
      case creditCard
      case eWallet
      case bankTransfer
      case virtualAccount
      case retailOutlet
      case unknown
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var groupType: WalletCoreKit.ExternalPaymentResponse.Payment.GroupType {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func testModel(type: Swift.Int) -> WalletCoreKit.ExternalPaymentResponse
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExternalRewardResponse : Swift.Decodable {
  public let success: Swift.Bool?
  public let transaction: WalletCoreKit.ExternalRewardResponse.Transaction?
  public struct Transaction : Swift.Decodable {
    public let id: Swift.Int?
    public let trxNo: Swift.String?
    public let trxType: Swift.String?
    public let trxStatus: Swift.String?
    public let trxAmount: Swift.Double?
    public let trxAmountType: Swift.String?
    public let trxTime: Swift.String?
    public let approvalCode: Swift.Int?
    public let cardNo: Swift.String?
    public let balance: Swift.Double?
    public let balanceType: Swift.String?
    public let amount: Swift.Double?
    public let point: Swift.Double?
    public let name: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func testModel(type: Swift.Int) -> WalletCoreKit.ExternalRewardResponse
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeatureEligibilitiesResponse : Swift.Codable {
  public let feature: Swift.String?
  public let isLocked: Swift.Bool?
  public let lockedUntil: Swift.String?
  public let currentTime: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Features : Swift.Codable {
  public let loyalty: Swift.Bool?
  public let privilege: Swift.Bool?
  public let item: Swift.Bool?
  public let banner: Swift.Bool?
  public let ambassador: Swift.Bool?
  public let subscription: Swift.Bool?
  public let dynamicReward: Swift.Bool?
  public let leadGeneration: Swift.Bool?
  public let channelIncentive: Swift.Bool?
  public let qrisPayment: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class FeeUseCase {
  public func getFeesV1(programId: Swift.String, subscriptionProgramId: Swift.String, paymentMethod: WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.PaymentType, completion: @escaping (Swift.Result<[WalletCoreKit.OrderFeeResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
extension Swift.Float {
  public var cleanValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public struct Form {
}
extension WalletCoreKit.PhoneNumber {
  public func adjustedNationalNumber() -> Swift.String
}
@_hasMissingDesignatedInitializers public class FormUseCase {
  public func ocrIdentityCard(imageUrl: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitOCRKTPResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getQuestionOptions(questionId: Swift.String, language: Swift.String = "id", searchText: Swift.String?, page: Swift.Int, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.OptionListResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func searchRegionId(countries: [Swift.String], provinces: [Swift.String], cities: [Swift.String], suburbs: [Swift.String], areas: [Swift.String], completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.RegionDataResponse>, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public func validateFieldLength(_ text: Swift.String?) -> Swift.Bool
public func validateEmailField(_ email: Swift.String?) -> Swift.Bool
public struct GetStoresRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(distributorId: Swift.String?, brand: Swift.String?, programId: Swift.String?, searchAddress: Swift.String?, page: Swift.Int?, perPage: Swift.Int?)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct GiftCardRuleV1 : Swift.Codable, Swift.Equatable {
  public let activate: [Swift.Int]?
  public let topup: [Swift.Int]?
  public let redeem: [Swift.Int]?
  public let checkBalance: [Swift.Int]?
  public let walletTopup: [Swift.Int]?
  public let pointRedemption: [Swift.Int]?
  public let walletRedemption: [Swift.Int]?
  public static func == (a: WalletCoreKit.GiftCardRuleV1, b: WalletCoreKit.GiftCardRuleV1) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Image : Swift.Codable, Swift.Comparable {
  public static func < (lhs: WalletCoreKit.Image, rhs: WalletCoreKit.Image) -> Swift.Bool
  public let id: Swift.Int?
  public let relationId: Swift.Int?
  public let relationType: Swift.String?
  public let position: Swift.Int?
  public let url: Swift.String?
  public let isPrimary: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public static func == (a: WalletCoreKit.Image, b: WalletCoreKit.Image) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(InAppNotificationCoreData) public class InAppNotificationCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.InAppNotificationCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.InAppNotificationCoreData>
  @objc @NSManaged dynamic public var notificationID: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cardID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cardNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redirect: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redirectData: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayUnit: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayTime: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var count: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var firstShownDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionID: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(InAppNotificationRecordCoreData) public class InAppNotificationRecordCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.InAppNotificationRecordCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.InAppNotificationRecordCoreData>
  @objc @NSManaged dynamic public var notificationID: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cardID: Swift.String? {
    @objc get
    @objc set
  }
}
public struct InAppNotificationRecordRequest : WalletCoreKit.WalletCoreKitPayload, Swift.Equatable {
  public init(event: Swift.String, inAppId: Swift.String, cardId: Swift.String?)
  public var parameters: [Swift.String : Any]? {
    get
  }
  public static func == (lhs: WalletCoreKit.InAppNotificationRecordRequest, rhs: WalletCoreKit.InAppNotificationRecordRequest) -> Swift.Bool
}
public struct InAppNotificationRecordResponse : Swift.Codable {
  public let event: Swift.String?
  public let inAppId: Swift.String?
  public let cardId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InAppNotificationResponse : Swift.Codable {
  public let id: Swift.String?
  public let merchantId: Swift.String?
  public let imageUrl: Swift.String?
  public let redirect: Swift.String?
  public let displayType: Swift.String?
  public let displayUnit: Swift.String?
  public let displayTime: Swift.Int?
  public let metadata: WalletCoreKit.InAppNotificationResponse.Metadata?
  public struct Metadata : Swift.Codable {
    public let externalLink: Swift.String?
    public let itemId: Swift.String?
    public let privilegeId: Swift.String?
    public let userFileUrl: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InAppNotificationUseCase {
  public func getInAppNotification(cardId: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<[WalletCoreKit.InAppNotificationResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func trackInAppNotification(request: [WalletCoreKit.InAppNotificationRecordRequest], completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct InfoResponse : Swift.Codable {
  public let mId: Swift.String?
  public let countryCode: Swift.String?
  public let config: WalletCoreKit.MerchantConfig?
  public let allowedPhonePrefix: [WalletCoreKit.WalletCoreKitCountryCode]?
  public let isAllowedAllPhonePrefix: Swift.Bool?
  public let isPreRegistration: Swift.Bool?
  public let preRegistrationTemplateForm: WalletCoreKit.InfoResponse.PreRegistrationTemplateForm?
  public func save()
  public static func load() -> WalletCoreKit.InfoResponse?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MerchantConfig : Swift.Codable {
  public let defaultLogin: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.InfoResponse {
  public struct PreRegistrationTemplateForm : Swift.Codable {
    public let id: Swift.String?
    public let type: Swift.String?
    public let name: Swift.String?
    public let questions: [WalletCoreKit.WalletCoreKitCardDetailResponse.Program.RegistrationForm]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class InfoUseCase {
  public func getCountryCodes(completion: @escaping (Swift.Result<[WalletCoreKit.WalletCoreKitCountryCode], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPolicyLink(programId: Swift.String, cardNumber: Swift.String? = nil, completion: @escaping (Swift.Result<WalletCoreKit.PolicyLinkResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getFeatureEligibilityList(completion: @escaping (Swift.Result<[WalletCoreKit.FeatureEligibilitiesResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
extension Swift.Int {
  public func priceFormat(with suffix: Swift.String? = nil) -> Swift.String
  public func priceFormat(suffix: Swift.String) -> Swift.String
  public func priceFormat(prefix: Swift.String) -> Swift.String
  public func priceFormat(currencyPrefix: Swift.String, decimalDigit: Swift.Int = 0) -> Swift.String
}
extension Swift.Optional where Wrapped == Swift.Int {
  public var getStringOrNil: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ItemCoreData) public class ItemCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.ItemCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.ItemCoreData>
  @objc @NSManaged dynamic public var catalogId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogCategoryId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryShippingMethod: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateAdded: Foundation.NSDate? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isDigital: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isBuyNow: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isMultipleVariant: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var maximumQuantityToBuy: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shoppingCart: WalletCoreKit.ShoppingCartCoreData? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var variant: WalletCoreKit.VariantCoreData? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var redeemInfos: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shippingAttributes: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isBuyingLimit: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sicepatVendor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gosendVendor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brand: Swift.String? {
    @objc get
    @objc set
  }
}
extension WalletCoreKit.ItemCoreData {
  @objc(addRedeemInfosObject:) @NSManaged dynamic public func addToRedeemInfos(_ value: WalletCoreKit.RedeemInfoCoreData)
  @objc(removeRedeemInfosObject:) @NSManaged dynamic public func removeFromRedeemInfos(_ value: WalletCoreKit.RedeemInfoCoreData)
  @objc(addRedeemInfos:) @NSManaged dynamic public func addToRedeemInfos(_ values: Foundation.NSSet)
  @objc(removeRedeemInfos:) @NSManaged dynamic public func removeFromRedeemInfos(_ values: Foundation.NSSet)
  @objc(addShippingAttributesObject:) @NSManaged dynamic public func addToShippingAttributes(_ value: WalletCoreKit.ShippingAttributeCoreData)
  @objc(removeShippingAttributesObject:) @NSManaged dynamic public func removeFromShippingAttributes(_ value: WalletCoreKit.ShippingAttributeCoreData)
  @objc(addShippingAttributes:) @NSManaged dynamic public func addToShippingAttributes(_ values: Foundation.NSSet)
  @objc(removeShippingAttributes:) @NSManaged dynamic public func removeFromShippingAttributes(_ values: Foundation.NSSet)
}
public struct ItemDetail : Swift.Decodable {
  public let id: Swift.String?
  public let item: WalletCoreKit.ItemDetail.Item?
  public let variants: [WalletCoreKit.Variant]?
  public let category: WalletCoreKit.ItemDetail.Category?
  public let catalogCategory: WalletCoreKit.ItemDetail.CatalogCategory?
  public let merchant: WalletCoreKit.ItemDetail.Merchant?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.ItemDetail {
  public struct Item : Swift.Decodable {
    public let id: Swift.String?
    public let isDigital: Swift.Bool?
    public let itemType: WalletCoreKit.ItemType?
    public let name: Swift.String?
    public let description: Swift.String?
    public let imageUrl: Swift.String?
    public let prefix: Swift.String?
    public let isLimited: Swift.Bool?
    public let limitQty: Swift.Int?
    public let active: Swift.Bool?
    public let shippingFeeRule: WalletCoreKit.ItemDetail.Item.ShippingFeeRule?
    public let eWalletType: Swift.String?
    public let eWalletInfo: WalletCoreKit.ItemDetail.Item.EWalletInfo?
    public let images: [WalletCoreKit.Image]?
    public let itemStoreAvailability: WalletCoreKit.ItemDetail.Item.ItemStoreAvailability?
    public let vendor: WalletCoreKit.ItemDetail.Item.Vendor?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Merchant : Swift.Codable {
    public let id: Swift.String?
    public let mId: Swift.String?
    public let brand: Swift.String?
    public let countryName: Swift.String?
    public let countryCode: Swift.String?
    public let currency: WalletCoreKit.ItemDetail.Merchant.Currency?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Category : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let label: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CatalogCategory : Swift.Codable {
    public let id: Swift.String?
    public let catalogId: Swift.String?
    public let shippingMethods: [Swift.String]?
    public let shippingAttributes: [WalletCoreKit.ItemDetail.CatalogCategory.ShippingAttribute]?
    public let sicepatVendor: Swift.String?
    public let gosendVendor: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.ItemDetail.Item {
  public struct ShippingFeeRule : Swift.Codable {
    public let absorber: Swift.String?
    public let unit: Swift.String?
    public let value: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ItemStoreAvailability : Swift.Codable {
    public let assignedStoreIds: [WalletCoreKit.ValueWrapper]?
    public let enabledStoreIds: [WalletCoreKit.ValueWrapper]?
    public let disabledStoreIds: [WalletCoreKit.ValueWrapper]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct EWalletInfo : Swift.Codable {
    public let product: Swift.String?
    public let needCheckAccount: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Vendor : Swift.Codable {
    public let integrationProcess: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.ItemDetail.Merchant {
  public struct Currency : Swift.Codable {
    public let symbol: Swift.String?
    public let name: Swift.String?
    public let symbolNative: Swift.String?
    public let decimalDigits: Swift.Double?
    public let rounding: Swift.Double?
    public let code: Swift.String?
    public let namePlural: Swift.String?
    public let thousandSeparator: Swift.String?
    public let decimalSeparator: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.ItemDetail.CatalogCategory {
  public struct ShippingAttribute : Swift.Codable {
    public let name: Swift.String?
    public let attributes: WalletCoreKit.ItemDetail.CatalogCategory.ShippingAttribute.Attribute?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.ItemDetail.CatalogCategory.ShippingAttribute {
  public struct Attribute : Swift.Codable {
    public let pricePerKM: Swift.Double?
    public let minimumPrice: Swift.Double?
    public let maximumDistance: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum ItemType : Swift.String, Swift.Decodable {
  case item
  case eVoucher
  case electric
  case phoneCredit
  case eWallet
  case subscription
  case pointExchange
  case pulsaPostpaid
  case plnPostpaid
  case pdamPostpaid
  case bpjsPostpaid
  case buyback
  case voucher
  case physicalVoucher
  case donation
  case gold
  case dataPackage
  case cryptoExchange
  case other
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct JSONDecode_CardScan : Swift.Decodable {
  public let ok: Swift.Bool?
  public let isNewMember: Swift.Bool?
  public let merchantLink: Swift.String?
  public let redirectUrl: Swift.String?
  public let phone: Swift.String?
  public let email: Swift.String?
  public let birthday: Swift.String?
  public let sex: Swift.String?
  public let no: Swift.String?
  public let createdAt: Swift.String?
  public let hasExpiry: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
}
public protocol KeyValueStoreType : AnyObject {
  func encode<T>(for type: T, using key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
  func set(_ value: Swift.Bool, forKey defaultName: Swift.String)
  func set(_ value: Swift.Int, forKey defaultName: Swift.String)
  func set(_ value: Any?, forKey defaultName: Swift.String)
  func decode<T>(for type: T.Type, using key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  func bool(forKey defaultName: Swift.String) -> Swift.Bool
  func dictionary(forKey defaultName: Swift.String) -> [Swift.String : Any]?
  func integer(forKey defaultName: Swift.String) -> Swift.Int
  func double(forKey defaultName: Swift.String) -> Swift.Double
  func object(forKey defaultName: Swift.String) -> Any?
  func string(forKey defaultName: Swift.String) -> Swift.String?
  func synchronize() -> Swift.Bool
  func removeObject(forKey defaultName: Swift.String)
}
extension Foundation.UserDefaults : WalletCoreKit.KeyValueStoreType {
  public func decode<T>(for type: T.Type, using key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func encode<T>(for type: T, using key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
}
public struct Labels : Swift.Codable {
  public var id: WalletCoreKit.LabelsInfo?
  public var en: WalletCoreKit.LabelsInfo?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LabelsInfo : Swift.Codable {
  public var language: Swift.String?
  public var label: Swift.String?
  public var placeholder: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LeadGeneration : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let imageUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LeadGenerationUseCase {
  public func getLeadGeneration(cardId: Swift.String, programId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MemberGetLeadProgram, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getLeadGenerationItems(cardId: Swift.String, programId: Swift.String, categoryId: Swift.String?, keyword: Swift.String?, page: Swift.Int, perPage: Swift.Int, completion: @escaping (Swift.Result<[WalletCoreKit.MemberGetLeadOfferResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getLeadGenerationItemDetail(cardId: Swift.String, programId: Swift.String, itemId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MemberGetLeadOfferDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getLeadGenerationSummary(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MemberGetLeadHistorySummaryResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getLeadGenerationHistories(cardId: Swift.String, status: Swift.String, page: Swift.Int, perPage: Swift.Int, completion: @escaping (Swift.Result<[WalletCoreKit.MemberGetLeadHistoryResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func shareLeadGeneration(cardId: Swift.String, programId: Swift.String, itemId: Swift.String?, completion: @escaping (Swift.Result<WalletCoreKit.MemberGetLeadShareResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public enum LoginState {
  case lockUser
  case tooManyRequest
  case loading
  case error(error: WalletCoreKit.TadaWalletKitError)
  case success(info: WalletCoreKit.OtpVerification)
  case redirect
  case requestPending
}
public struct LoginWalletResponse : Swift.Decodable {
  public let accessToken: Swift.String?
  public let expiredAt: Swift.String?
  public let expiresIn: Swift.Int?
  public let tokenType: Swift.String?
  public let user: WalletCoreKit.User?
  public let isAlreadyHasCards: Swift.Bool?
  public let cardNumber: Swift.String?
  public static var testModel: WalletCoreKit.LoginWalletResponse {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LoyaltyResponse : Swift.Codable {
  public let experience: Swift.Double?
  public let waitUntil: Swift.String?
  public let level: Swift.String?
  public let isUpgradedBeforeCycle: Swift.Bool?
  public let levels: [WalletCoreKit.LoyaltyResponse.LevelResponse]?
  public let wallets: [WalletCoreKit.LoyaltyResponse.WalletList]?
  public struct LevelResponse : Swift.Codable {
    public let name: Swift.String?
    public let id: Swift.String?
    public let experience: Swift.Double?
    public let waitUntil: Swift.String?
    public let color: Swift.String?
    public let icon: Swift.String?
    public let description: Swift.String?
    public let retentionExperience: Swift.Double?
    public let cardImageUrl: Swift.String?
    public let orderType: Swift.String?
    public let orderPosition: Swift.Int?
    public let type: Swift.String?
    public let ignoreCycle: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct WalletList : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let balance: Swift.Double?
    public let originalAmount: Swift.Double?
    public let expiredAt: Swift.String?
    public let isValidateMinimumPointToRedeem: Swift.Bool?
    public let minimumPointToRedeem: Swift.Double?
    public let isMinimumPointToRedeemMet: Swift.Bool?
    public let conversion: WalletCoreKit.LoyaltyResponse.WalletListConversion?
    public let unitType: Swift.String?
    public let walletType: Swift.String?
    public let listBalances: [WalletCoreKit.LoyaltyResponse.BalanceList]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct WalletListConversion : Swift.Codable {
    public let type: Swift.String?
    public let divider: Swift.Double?
    public let multiplier: Swift.Double?
    public let redeem: Swift.Double?
    public let redeemType: Swift.String?
    public let redeemDivider: Swift.Double?
    public let redeemMultiplier: Swift.Double?
    public let maxRedeem: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BalanceList : Swift.Codable {
    public let balance: Swift.Double?
    public let collectedAt: Swift.String?
    public let expiredAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MemberGetLeadHistoryResponse : Swift.Decodable {
  public let name: Swift.String?
  public let date: Swift.String?
  public let referralName: Swift.String?
  public let iconUrl: Swift.String?
  public let rewards: [WalletCoreKit.MemberGetLeadOfferResponse.Reward]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MemberGetLeadHistorySummaryResponse : Swift.Decodable {
  public let pending: Swift.Double?
  public let approved: Swift.Double?
  public let rejected: Swift.Double?
  public let rewards: [WalletCoreKit.MemberGetLeadHistorySummaryResponse.Reward]?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.MemberGetLeadHistorySummaryResponse {
  public struct Reward : Swift.Decodable {
    public let type: Swift.String?
    public let name: Swift.String?
    public let total: Swift.Double?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct MemberGetLeadItemShareResponse : Swift.Decodable {
  public let itemId: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MemberGetLeadOfferDetailResponse : Swift.Decodable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let imageUrl: Swift.String?
  public let description: Swift.String?
  public let rewards: [WalletCoreKit.MemberGetLeadOfferResponse.Reward]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MemberGetLeadOfferResponse : Swift.Decodable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let imageUrl: Swift.String?
  public let rewards: [WalletCoreKit.MemberGetLeadOfferResponse.Reward]?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.MemberGetLeadOfferResponse {
  public struct Reward : Swift.Codable, Swift.Equatable, Swift.Hashable {
    public let type: Swift.String?
    public let typeValue: Swift.String?
    public let value: WalletCoreKit.ValueWrapper?
    public static func == (a: WalletCoreKit.MemberGetLeadOfferResponse.Reward, b: WalletCoreKit.MemberGetLeadOfferResponse.Reward) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct MemberGetLeadProgram : Swift.Decodable {
  public let id: Swift.String?
  public let merchantName: Swift.String?
  public let referrerName: Swift.String?
  public let iconUrl: Swift.String?
  public let categories: [WalletCoreKit.StoreCategory]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MemberGetLeadShareResponse : Swift.Decodable {
  public let message: Swift.String?
  public let code: Swift.String?
  public let link: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Menu {
  final public let position: Swift.Int
  final public let name: Swift.String
  final public let icon: Swift.String
  final public let type: Swift.String
  final public let key: Swift.String
  final public let show: Swift.Bool
  @objc deinit
}
public struct Merchant : Swift.Codable {
  public let id: Swift.String?
  public let mId: Swift.String?
  public let brand: Swift.String?
  public let active: Swift.Bool?
  public let merchantType: Swift.String?
  public let countryCode: Swift.String?
  public let countryName: Swift.String?
  public let zendeskAgentId: Swift.String?
  public let decimalDigits: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MessageResponse : Swift.Decodable {
  public let success: Swift.Bool?
  public let isValid: Swift.Bool?
  public let message: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.MetadataTerritory {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case codeID
    case countryCode
    case internationalPrefix
    case mainCountryForCode
    case nationalPrefix
    case nationalPrefixFormattingRule
    case nationalPrefixForParsing
    case nationalPrefixTransformRule
    case preferredExtnPrefix
    case emergency
    case fixedLine
    case generalDesc
    case mobile
    case pager
    case personalNumber
    case premiumRate
    case sharedCost
    case tollFree
    case voicemail
    case voip
    case uan
    case numberFormats
    case leadingDigits
    case availableFormats
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.MetadataPhoneNumberFormat {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case pattern
    case format
    case intlFormat
    case leadingDigitsPatterns
    case nationalPrefixFormattingRule
    case nationalPrefixOptionalWhenFormatting
    case domesticCarrierCodeFormattingRule
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataTerritory : Swift.Decodable {
  public let codeID: Swift.String
  public let countryCode: Swift.UInt64
  public let internationalPrefix: Swift.String?
  public let mainCountryForCode: Swift.Bool
  public let nationalPrefix: Swift.String?
  public let nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixForParsing: Swift.String?
  public let nationalPrefixTransformRule: Swift.String?
  public let preferredExtnPrefix: Swift.String?
  public let emergency: WalletCoreKit.MetadataPhoneNumberDesc?
  public let fixedLine: WalletCoreKit.MetadataPhoneNumberDesc?
  public let generalDesc: WalletCoreKit.MetadataPhoneNumberDesc?
  public let mobile: WalletCoreKit.MetadataPhoneNumberDesc?
  public let pager: WalletCoreKit.MetadataPhoneNumberDesc?
  public let personalNumber: WalletCoreKit.MetadataPhoneNumberDesc?
  public let premiumRate: WalletCoreKit.MetadataPhoneNumberDesc?
  public let sharedCost: WalletCoreKit.MetadataPhoneNumberDesc?
  public let tollFree: WalletCoreKit.MetadataPhoneNumberDesc?
  public let voicemail: WalletCoreKit.MetadataPhoneNumberDesc?
  public let voip: WalletCoreKit.MetadataPhoneNumberDesc?
  public let uan: WalletCoreKit.MetadataPhoneNumberDesc?
  public let numberFormats: [WalletCoreKit.MetadataPhoneNumberFormat]
  public let leadingDigits: Swift.String?
}
public struct MetadataPhoneNumberDesc : Swift.Decodable {
  public let exampleNumber: Swift.String?
  public let nationalNumberPattern: Swift.String?
  public let possibleNumberPattern: Swift.String?
  public let possibleLengths: WalletCoreKit.MetadataPossibleLengths?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataPossibleLengths : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataPhoneNumberFormat : Swift.Decodable {
  public let pattern: Swift.String?
  public let format: Swift.String?
  public let intlFormat: Swift.String?
  public let leadingDigitsPatterns: [Swift.String]?
  public var nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixOptionalWhenFormatting: Swift.Bool?
  public let domesticCarrierCodeFormattingRule: Swift.String?
}
public struct MissionActivityListRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int, isExpired: Swift.Bool?, startDate: Swift.String?, endDate: Swift.String?, keyword: Swift.String?, orderBy: Swift.String?, orderMode: Swift.String?)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct MissionTaskSubmission {
  public init(questionId: Swift.String?, questionText: Swift.String?, questionType: Swift.String?, answer: Swift.String?)
}
public struct MissionActivitySubmitRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(cardId: Swift.String, missionId: Swift.String, taskId: Swift.String, submissions: [WalletCoreKit.MissionTaskSubmission])
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct MissionListResponseV1 : Swift.Codable {
  public let id: Swift.Int?
  public let status: Swift.String?
  public let activityMission: WalletCoreKit.MissionListResponseV1.ActivityMission?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.MissionListResponseV1 {
  public struct ActivityMission : Swift.Codable {
    public let id: Swift.Int?
    public let name: Swift.String?
    public let description: Swift.String?
    public let startAt: Swift.String?
    public let endAt: Swift.String?
    public let imageUrl: Swift.String?
    public let rewards: [WalletCoreKit.MissionsListResponse.Reward]?
    public let taskRewards: [WalletCoreKit.MissionListResponseV1.TaskReward]?
    public let isRewardable: Swift.Bool?
    public let totalChallenge: Swift.Int?
    public let totalChallengeDone: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct TaskReward : Swift.Codable {
    public let id: Swift.Int?
    public let name: Swift.String?
    public let rwd: [WalletCoreKit.MissionListResponseV1.RWD]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RWD : Swift.Codable {
    public let amount: Swift.Double?
    public let cardProgramId: Swift.Int?
    public let createdAt: Swift.String?
    public let deletedAt: Swift.String?
    public let id: Swift.Int?
    public let relationId: Swift.Int?
    public let relationType: Swift.String?
    public let rewardName: Swift.String?
    public let rewardType: Swift.String?
    public let rewardValue: Swift.String?
    public let updatedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct MissionsDetailResponseV1 : Swift.Codable {
  public let maskedId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MissionsDetailResponse : Swift.Codable {
  public let id: Swift.String?
  public let activityMissionId: Swift.String?
  public let startAt: Swift.String?
  public let endAt: Swift.String?
  public let name: Swift.String?
  public let description: Swift.String?
  public let imageUrl: Swift.String?
  public let status: Swift.String?
  public let active: Swift.Bool?
  public let totalChallenge: Swift.Int?
  public let totalChallengeDone: Swift.Int?
  public let rewards: [WalletCoreKit.MissionsListResponse.Reward]?
  public let challenges: [WalletCoreKit.MissionsDetailResponse.Challenge]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.MissionsDetailResponse {
  public struct Challenge : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let imageUrl: Swift.String?
    public let TaskRewards: [WalletCoreKit.MissionsListResponse.Reward]?
    public let rewards: [WalletCoreKit.MissionsListResponse.Reward]?
    public let status: Swift.String?
    public let startAt: Swift.String?
    public let endAt: Swift.String?
    public let description: Swift.String?
    public let challengeType: Swift.String?
    public let templateID: Swift.String?
    public let needApproval: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct MissionsListResponse : Swift.Codable {
  public let id: Swift.String?
  public let status: Swift.String?
  public let activityMission: WalletCoreKit.MissionsListResponse.ActivityMission?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.MissionsListResponse {
  public struct ActivityMission : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let description: Swift.String?
    public let startAt: Swift.String?
    public let endAt: Swift.String?
    public let imageUrl: Swift.String?
    public let rewards: [WalletCoreKit.MissionsListResponse.Reward]?
    public let taskRewards: [WalletCoreKit.MissionsListResponse.TaskReward]?
    public let isRewardable: Swift.Bool?
    public let totalChallenge: Swift.Int?
    public let totalChallengeDone: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.MissionsListResponse {
  public struct Reward : Swift.Codable {
    public let id: Swift.String?
    public let relationType: Swift.String?
    public let rewardType: Swift.String?
    public let CardProgramId: Swift.Int?
    public let rewardValue: Swift.String?
    public let rewardName: Swift.String?
    public let amount: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct TaskReward : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let reward: [WalletCoreKit.MissionsListResponse.Reward]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class MissionUseCase {
  public func initMission(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getMissionListV1(cardNumber: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<[WalletCoreKit.MissionListResponseV1], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getMissionList(cardId: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 25, isExpired: Swift.Bool? = nil, startDate: Swift.String? = nil, endDate: Swift.String? = nil, keyword: Swift.String? = nil, orderBy: Swift.String? = nil, orderMode: Swift.String? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.MissionsListResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getMissionDetailV1(cardNumber: Swift.String, missionId: Swift.Int, completion: @escaping (Swift.Result<WalletCoreKit.MissionsDetailResponseV1, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getMissionDetail(cardId: Swift.String, missionId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MissionsDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getMissionTask(cardId: Swift.String, missionId: Swift.String, taskId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitMissionTaskDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getMissionTaskV1(cardNumber: Swift.String, missionId: Swift.Int, taskId: Swift.Int, completion: @escaping (Swift.Result<WalletCoreKit.MissionTaskDetailV1Response, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func submitMissionTask(cardId: Swift.String, missionId: Swift.String, taskId: Swift.String, submissionList: [WalletCoreKit.MissionTaskSubmission], completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct NotificationReadAllResponse : Swift.Decodable {
  public let status: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct NotificationReadResponse : Swift.Decodable {
  public let type: Swift.String?
  public let updatedAt: Swift.String?
  public let createdAt: Swift.String?
  public let iconUrl: Swift.String?
  public let brand: Swift.String?
  public let fallbackUrl: Swift.String?
  public let contentUrl: Swift.String?
  public let webNotificationUrl: Swift.String?
  public let body: Swift.String?
  public let title: Swift.String?
  public let userId: Swift.Int?
  public let id: Swift.String?
  public let mId: Swift.String?
  public var isRead: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
}
public struct NotificationsResponse : Swift.Decodable {
  public let data: [WalletCoreKit.NotificationsResponse.Data]?
  public let success: Swift.Bool?
  public let message: Swift.String?
  public let page: Swift.Int?
  public let perPage: Swift.Int?
  public let count: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.NotificationsResponse {
  public struct Data : Swift.Decodable {
    public init(notificationTitle: Swift.String?, notificationBody: Swift.String?, notificationURL: Swift.String?)
    public let id: Swift.String?
    public let type: Swift.String?
    public var isRead: Swift.Bool?
    public let title: Swift.String?
    public let body: Swift.String?
    public let contentUrl: Swift.String?
    public let fallbackUrl: Swift.String?
    public let webNotificationUrl: Swift.String?
    public let mId: Swift.String?
    public let brand: Swift.String?
    public let iconUrl: Swift.String?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class NotificationUseCase {
  public func getUnreadCount(completion: @escaping (Swift.Result<WalletCoreKit.UnreadNotificationResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getNotificationList(page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<WalletCoreKit.NotificationsResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func updateNotificationStatus(id: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.UnreadNotificationResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func updateAllNotificationStatus(completion: @escaping (Swift.Result<WalletCoreKit.UnreadNotificationResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public enum NumberFormat {
  public static func wholeNumber(_ x: Swift.Int, locale: Foundation.Locale = Locale.current) -> Swift.String
  public static func decimalNumber(_ x: Swift.Double, locale: Foundation.Locale = Locale.current) -> Swift.String
  public static func decimalLongNumber(_ x: Swift.Double, locale: Foundation.Locale = Locale.current) -> Swift.String
  public static func percentage(_ percentage: Swift.Int, locale: Foundation.Locale = Locale.current) -> Swift.String
  public static func percentage(_ percentage: Swift.Double, locale: Foundation.Locale = Locale.current) -> Swift.String
  public static func currency(_ amount: Swift.Int, omitCurrencyCode: Swift.Bool = true, locale: Foundation.Locale = Locale.current, currencySymbol: Swift.String = "Rp") -> Swift.String
  public static func currency(_ amount: Swift.Double, omitCurrencyCode: Swift.Bool = true, locale: Foundation.Locale = Locale.current, currencySymbol: Swift.String = "Rp") -> Swift.String
  public static func formattedCurrency(_ amount: Any, omitCurrencyCode: Swift.Bool = true, locale: Foundation.Locale = Locale.current, currencySymbol: Swift.String = "Rp") -> Swift.String
  public static func unFormatCurrency(_ amount: Swift.String, omitCurrencyCode: Swift.Bool = true, locale: Foundation.Locale = Locale.current, currencySymbol: Swift.String = "Rp") -> Swift.String
  public static func selfFormatttedCurrency(_ amount: Swift.Int, omitCurrencyCode: Swift.Bool = true, locale: Foundation.Locale = Locale.current, decimalRounding: Swift.Int, currencySymbol: Swift.String) -> Swift.String
  public static func selfFormatttedCurrency(_ amount: Swift.Double, omitCurrencyCode: Swift.Bool = true, locale: Foundation.Locale = Locale.current, decimalRounding: Swift.Int, currencySymbol: Swift.String, roundingRule: Swift.FloatingPointRoundingRule = .toNearestOrAwayFromZero) -> Swift.String
}
public struct OpenMembership : Swift.Codable, Swift.Hashable {
  public let id: Swift.String?
  public let isLocked: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let merchantName: Swift.String?
  public let programId: Swift.String?
  public let programName: Swift.String?
  public let programType: Swift.String?
  public let program_name: Swift.String?
  public let brand: Swift.String?
  public let categoryId: Swift.String?
  public let categoryName: Swift.String?
  public let customerBenefit: Swift.String?
  public let iconUrl: Swift.String?
  public let isSubscription: Swift.Bool?
  public let subscriptionPriceTag: Swift.String?
  public let isRegistered: Swift.Bool?
  public let distance: Swift.Double?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WalletCoreKit.OpenMembership, b: WalletCoreKit.OpenMembership) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OpenMembershipCategory : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let position: Swift.Int?
  public var categoryName: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OpenMembershipNearbyRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(latitude: Swift.Double, longitude: Swift.Double, countryCode: Swift.String?, page: Swift.Int?, perPage: Swift.Int?)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct OpenMembershipProgramResponse : Swift.Decodable {
  public let id: Swift.String?
  public let status: Swift.String?
  public let merchantName: Swift.String?
  public let programId: Swift.String?
  public let programName: Swift.String?
  public let programType: Swift.String?
  public let countryCode: Swift.String?
  public let customerBenefit: Swift.String?
  public let categoryId: Swift.String?
  public let categoryName: Swift.String?
  public let imageUrl: Swift.String?
  public let landingPage: WalletCoreKit.OpenMembershipProgramResponse.LandingPage?
  public let subscription: WalletCoreKit.OpenMembershipProgramResponse.CardProgramSubscription?
  public let cardInfo: WalletCoreKit.OpenMembershipProgramResponse.CardInfo?
  public struct CardProgramSubscription : Swift.Codable {
    public init(id: Swift.String?, cardProgramId: Swift.Int?, periodType: Swift.String?, periodValue: Swift.Int?, price: Swift.Double?, priceTag1: Swift.String?, priceTag2: Swift.String?, savedPrice: Swift.String?, color: Swift.String?, description: Swift.String?, imageUrl: Swift.String?, isActive: Swift.Bool?, createdAt: Swift.String?, updatedAt: Swift.String?, deletedAt: Swift.String?)
    public let id: Swift.String?
    public let cardProgramId: Swift.Int?
    public let periodType: Swift.String?
    public let periodValue: Swift.Int?
    public let price: Swift.Double?
    public let priceTag1: Swift.String?
    public let priceTag2: Swift.String?
    public let savedPrice: Swift.String?
    public let color: Swift.String?
    public let description: Swift.String?
    public let imageUrl: Swift.String?
    public let isActive: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.OpenMembershipProgramResponse {
  public struct LandingPage : Swift.Decodable {
    public let title: Swift.String?
    public let description: Swift.String?
    public let imageUrl: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OpenMembershipProgramResponse {
  public struct CardInfo : Swift.Decodable {
    public let cardId: Swift.String?
    public let walletId: Swift.String?
    public let cardNo: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct OpenMembershipRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(countryCode: Swift.String?, keyword: Swift.String? = nil, categoryId: Swift.String? = nil, page: Swift.Int?, perPage: Swift.Int?)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class OpenMembershipUseCase {
  public func getOpenMembershipCategories(completion: @escaping (Swift.Result<[WalletCoreKit.OpenMembershipCategory], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOpenMembershipList(countryCode: Swift.String? = "ID", keyword: Swift.String? = nil, categoryId: Swift.String? = nil, page: Swift.Int? = nil, perPage: Swift.Int? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.OpenMembership], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOpenMembershipNearby(latitude: Swift.Double, longitude: Swift.Double, countryCode: Swift.String? = "ID", page: Swift.Int? = nil, perPage: Swift.Int? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.OpenMembership], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOpenMembershipDetail(merchantId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.OpenMembershipProgramResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOpenMembershipForm(openMembershipId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitRegisterOpenMemberRules, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func submitOpenMembership(payload: WalletCoreKit.RegisterOpenMembershipRequest, completion: @escaping (Swift.Result<WalletCoreKit.RegisterOpenMemberResponse.Params, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct OptionListResponse : Swift.Codable {
  public let id: Swift.String?
  public let questionId: Swift.String?
  public let value: Swift.String?
  public let optionLabels: [WalletCoreKit.OptionListResponse.OptionLabel]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.OptionListResponse {
  public struct OptionLabel : Swift.Codable {
    public init(id: Swift.String?, OptionId: Swift.String?, language: Swift.String?, label: Swift.String?)
    public let id: Swift.String?
    public let OptionId: Swift.String?
    public let language: Swift.String?
    public let label: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct OptionQuestion : Swift.Codable {
  public let value: Swift.String?
  public let isDefault: Swift.Bool?
  public let label: Swift.String?
  public let optionId: Swift.String?
  public let optionText: Swift.String?
  public let optionSequence: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RegistrationOption : Swift.Codable {
  final public let id: Swift.String?
  final public let value: Swift.String?
  final public let isDefault: Swift.Bool?
  final public let position: Swift.Int?
  final public let labels: WalletCoreKit.Labels?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct OrderDetailResponse : Swift.Decodable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let orderNumber: Swift.String?
  public let orderType: Swift.String?
  public let storeId: Swift.String?
  public let createdAt: Swift.String?
  public let paymentInvoiceUrl: Swift.String?
  public let orderReference: Swift.String?
  public let discountAmount: Swift.Double?
  public let total: Swift.Double?
  public let totalAll: Swift.Double?
  public let notes: Swift.String?
  public let status: Swift.String?
  public let recipient: WalletCoreKit.OrderDetailResponse.Recipient?
  public let orderItems: [WalletCoreKit.OrderDetailResponse.OrderItem]?
  public let fees: [WalletCoreKit.OrderResponse.Fee]?
  public let discountType: Swift.String?
  public let orderPayments: [WalletCoreKit.OrderDetailResponse.OrderPayment]?
  public let orderVendors: [WalletCoreKit.OrderDetailResponse.OrderVendor]?
  public let tokenPayment: WalletCoreKit.OrderDetailResponse.TokenPayment?
  public let paymentResponse: WalletCoreKit.OrderDetailResponse.PaymentResponse?
  public let transferInstruction: Swift.String?
  public let shipping: WalletCoreKit.OrderDetailResponse.Shipping?
  public let merchant: WalletCoreKit.OrderDetailResponse.Merchant?
  public let store: WalletCoreKit.OrderDetailResponse.Store?
  public let customField: [Swift.String : Swift.String]?
  public let voucherType: Swift.String?
  public let voucherCode: Swift.String?
  public let voucherName: Swift.String?
  public static func testModel(type: Swift.Int) -> WalletCoreKit.OrderResponse
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.OrderDetailResponse {
  public struct Store : Swift.Decodable {
    public let location: Swift.String?
    public let phone: Swift.String?
    public let address: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Merchant : Swift.Decodable {
    public let currency: WalletCoreKit.OrderDetailResponse.Currency?
    public let countryCode: Swift.String?
    public let iconUrl: Swift.String?
    public let brand: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Currency : Swift.Decodable {
    public let code: Swift.String?
    public let decimalDigits: Swift.Int?
    public let decimalSeparator: Swift.String?
    public let name: Swift.String?
    public let namePlural: Swift.String?
    public let rounding: Swift.Int?
    public let symbol: Swift.String?
    public let symbolNative: Swift.String?
    public let thousandSeparator: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct TokenPayment : Swift.Decodable {
    public let response: Swift.String?
    public let trxId: Swift.String?
    public let merchantId: Swift.String?
    public let merchant: Swift.String?
    public let billNo: Swift.String?
    public let billItems: [WalletCoreKit.OrderDetailResponse.BillItem]?
    public let responseCode: Swift.String?
    public let responseDesc: Swift.String?
    public let webURL: Swift.String?
    public let redirectURL: Swift.String?
    public let billExpired: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public let token: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BillItem : Swift.Codable {
    public let product: Swift.String?
    public let qty: Swift.String?
    public let amount: Swift.String?
    public let paymentPlan: Swift.String?
    public let tenor: Swift.String?
    public let merchantId: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public let token: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentResponse : Swift.Codable {
    public let response: Swift.String?
    public let trxId: Swift.String?
    public let merchantId: Swift.String?
    public let merchant: Swift.String?
    public let billNo: Swift.String?
    public let billItems: [WalletCoreKit.OrderDetailResponse.BillItem]?
    public let responseCode: Swift.String?
    public let responseDesc: Swift.String?
    public let webURL: Swift.String?
    public let redirectURL: Swift.String?
    public let billExpired: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public let token: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Recipient : Swift.Decodable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let firstName: Swift.String?
    public let lastName: Swift.String?
    public let email: Swift.String?
    public let phone: Swift.String?
    public let address: Swift.String?
    public let postalCode: Swift.String?
    public let city: WalletCoreKit.OrderDetailResponse.Recipient.City?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Fee : Swift.Codable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let value: Swift.Double?
    public let name: Swift.String?
    public let absorber: Swift.String?
    public let OrderId: WalletCoreKit.WalletCoreKitAnyCodable?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct OrderVendor : Swift.Decodable {
    public let transaction: WalletCoreKit.OrderDetailResponse.OrderVendor.Transaction?
    public let integrationResponses: [WalletCoreKit.OrderDetailResponse.OrderVendor.IntegrationResponse]?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Shipping : Swift.Codable {
    public let id: Swift.Int?
    public let method: Swift.String?
    public let storeId: Swift.String?
    public let rateId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let consigneeName: Swift.String?
    public let consigneePhoneNumber: Swift.String?
    public let consignerName: Swift.String?
    public let consignerPhoneNumber: Swift.String?
    public let originAddress: Swift.String?
    public let destinationAddress: Swift.String?
    public let originCoord: Swift.String?
    public let destinationCoord: Swift.String?
    public let driver: WalletCoreKit.OrderDetailResponse.Shipping.Driver?
    public let vendor: Swift.String?
    public let trackUrl: Swift.String?
    public let externalId: Swift.String?
    public let originAreaId: Swift.Int?
    public let destinationAreaId: Swift.Int?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.Shipping {
  public struct Driver : Swift.Codable {
    public let name: Swift.String?
    public let phoneNumber: Swift.String?
    public let vehicleType: Swift.String?
    public let vehicleNumber: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.Recipient {
  public struct City : Swift.Decodable {
    public let id: Swift.Int?
    public let name: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.OrderVendor {
  public struct Transaction : Swift.Codable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let referenceId: Swift.String?
    public let integrationName: Swift.String?
    public let itemType: Swift.String?
    public let integrationType: Swift.String?
    public let sourceId: Swift.String?
    public let itemExecNumber: Swift.String?
    public let price: Swift.Double
    public let quantity: Swift.Int?
    public let isDigital: Swift.Bool?
    public let background: Swift.Bool?
    public let ItemId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let message: Swift.String?
    public let createdAt: Swift.String?
    public let integrationId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.OrderVendor {
  public struct IntegrationResponse : Swift.Decodable {
    public let itemId: Swift.Int?
    public let brand: Swift.String?
    public let mid: Swift.String?
    public let eGiftCode: Swift.String?
    public let programName: Swift.String?
    public let itemName: Swift.String?
    public let eGiftType: Swift.String?
    public let value: Swift.Double?
    public let useRedeemPin: Swift.Bool?
    public let pin: Swift.String?
    public let expiredDate: Swift.String?
    public let url: Swift.String?
    public let message: Swift.String?
    public let referenceNo: Swift.String?
    public let garudaMiles: Swift.Int?
    public let price: WalletCoreKit.ValueWrapper?
    public let exchangeAmount: Swift.Double?
    public let manualExchange: Swift.Bool?
    public let attributes: WalletCoreKit.OrderDetailResponse.OrderVendor.IntegrationResponse.Attributes?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.OrderVendor.IntegrationResponse {
  public struct Attributes : Swift.Decodable {
    public let fulfillmentResult: [WalletCoreKit.OrderDetailResponse.OrderVendor.IntegrationResponse.Attributes.FulfillmentResult]?
    public struct FulfillmentResult : Swift.Decodable {
      public let name: Swift.String?
      public let value: Swift.String?
      public init(from decoder: any Swift.Decoder) throws
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse {
  public struct OrderPayment : Swift.Decodable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let orderId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let paymentType: Swift.String?
    public let isExternalPayment: Swift.Bool?
    public let channel: Swift.String?
    public let cardNumber: Swift.String?
    public let amount: Swift.Double?
    public let transactionId: Swift.String?
    public let rewardType: Swift.String?
    public let unitType: Swift.String?
    public let conversionRate: Swift.Double?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let conversionType: Swift.String?
    public let value: Swift.Double?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse {
  public struct OrderItem : Swift.Decodable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let variantId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let sku: Swift.String?
    public let itemName: Swift.String?
    public let variantName: Swift.String?
    public let category: Swift.String?
    public let itemType: Swift.String?
    public let isDigital: Swift.Bool?
    public let image: Swift.String?
    public let quantity: Swift.Int?
    public let weight: Swift.Double?
    public let price: Swift.Double?
    public let subtotal: Swift.Double?
    public let status: Swift.String?
    public let mId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let mBrand: Swift.String?
    public let eGiftDetail: WalletCoreKit.OrderDetailResponse.OrderItem.EGiftDetail?
    public let itemExecNumber: Swift.String?
    public let vendorResponse: WalletCoreKit.OrderDetailResponse.OrderItem.VendorResponse?
    public let vendorMessage: Swift.String?
    public let notes: Swift.String?
    public let awbOrder: WalletCoreKit.OrderDetailResponse.OrderItem.AwbOrder?
    public var isTrackable: Swift.Bool {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.OrderItem {
  public struct VendorResponse : Swift.Decodable {
    public let transaction: WalletCoreKit.OrderResponse.OrderVendor.Transaction?
    public let integrationResponse: [WalletCoreKit.OrderResponse.OrderVendor.IntegrationResponse]?
    public let referenceNo: WalletCoreKit.ValueWrapper?
    public let orderID: WalletCoreKit.ValueWrapper?
    public let message: Swift.String?
    public let signature: Swift.String?
    public let number: Swift.String?
    public let sn: Swift.String?
    public let saldo: Swift.Double?
    public let status: WalletCoreKit.ValueWrapper?
    public let serialNumber: Swift.String?
    public let attributes: [WalletCoreKit.OrderDetailResponse.OrderItem.VendorResponse.Attribute]?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AwbOrder : Swift.Decodable {
    public let awbNumber: Swift.String?
    public let trackingNumber: Swift.String?
    public let otherCourierName: Swift.String?
    public let shippingBrand: Swift.String?
    public let shippingCompanyName: Swift.String?
    public let integrationLink: Swift.String?
    public let integrationName: Swift.String?
    public let status: Swift.String?
    public let receivedBy: Swift.String?
    public let completedAt: Swift.String?
    public let isTrackable: Swift.Bool?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct EGiftDetail : Swift.Decodable {
    public let generatedEGifts: [WalletCoreKit.OrderDetailResponse.OrderItem.EGiftDetail.GeneratedEGift]?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.OrderItem.VendorResponse {
  public struct Attribute : Swift.Decodable {
    public let key: Swift.String?
    public let label: Swift.String?
    public let value: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderDetailResponse.OrderItem.EGiftDetail {
  public struct GeneratedEGift : Swift.Decodable {
    public let itemId: Swift.Int?
    public let brand: Swift.String?
    public let mid: Swift.String?
    public let egiftCode: Swift.String?
    public let programName: Swift.String?
    public let itemName: Swift.String?
    public let egiftType: Swift.String?
    public let value: Swift.Double?
    public let useRedeemPin: Swift.Bool?
    public let pin: Swift.String?
    public let expiredDate: Swift.String?
    public let url: Swift.String?
    public let message: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct OrderFeeResponse : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public let itemId: Swift.String?
  public let itemVariantId: Swift.String?
  public let name: Swift.String?
  public let label: Swift.String?
  public let amount: Swift.Double?
  public let convertedAmount: Swift.Double?
  public static func == (a: WalletCoreKit.OrderFeeResponse, b: WalletCoreKit.OrderFeeResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OrderResponse : Swift.Decodable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let orderNumber: Swift.String?
  public let orderType: Swift.String?
  public let updatedAt: Swift.String?
  public let storeId: Swift.String?
  public let createdAt: Swift.String?
  public let paymentInvoiceUrl: Swift.String?
  public let totalBeforeDiscount: Swift.Double?
  public let discountAmount: Swift.Double?
  public let total: Swift.Double?
  public let totalAll: Swift.Double?
  public let notes: Swift.String?
  public let status: Swift.String?
  public let recipient: WalletCoreKit.OrderResponse.Recipient?
  public let orderItems: [WalletCoreKit.OrderResponse.OrderItem]?
  public let _OrderItems: [WalletCoreKit.OrderResponse.OrderItem]?
  public let fees: [WalletCoreKit.OrderResponse.Fee]?
  public let discountType: Swift.String?
  public let orderPayments: [WalletCoreKit.OrderResponse.OrderPayment]?
  public let _orderPayments: [WalletCoreKit.OrderResponse.OrderPayment]?
  public let orderVendors: [WalletCoreKit.OrderResponse.OrderVendor]?
  public let trxDate: Swift.String?
  public let cardNo: Swift.String?
  public let programId: Swift.String?
  public let programName: Swift.String?
  public let tokenPayment: WalletCoreKit.OrderResponse.TokenPayment?
  public let paymentResponse: WalletCoreKit.OrderResponse.PaymentResponse?
  public let transferInstruction: Swift.String?
  public let shipping: WalletCoreKit.OrderResponse.Shipping?
  public let merchant: Swift.String?
  public let store: WalletCoreKit.OrderResponse.Store?
  public let customField: [Swift.String : Swift.String]?
  public let voucherType: Swift.String?
  public let voucherCode: Swift.String?
  public let voucherName: Swift.String?
  public static func testModel(type: Swift.Int) -> WalletCoreKit.OrderResponse
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.OrderResponse {
  public struct Store : Swift.Decodable {
    public let id: Swift.String?
    public let location: Swift.String?
    public let phone: Swift.String?
    public let address: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Merchant : Swift.Decodable {
    public let currency: WalletCoreKit.OrderResponse.Currency?
    public let countryCode: Swift.String?
    public let iconUrl: Swift.String?
    public let brand: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Currency : Swift.Decodable {
    public let code: Swift.String?
    public let decimalDigits: Swift.Int?
    public let decimalSeparator: Swift.String?
    public let name: Swift.String?
    public let namePlural: Swift.String?
    public let rounding: Swift.Int?
    public let symbol: Swift.String?
    public let symbolNative: Swift.String?
    public let thousandSeparator: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct TokenPayment : Swift.Decodable {
    public let response: Swift.String?
    public let trxId: Swift.String?
    public let merchantId: Swift.String?
    public let merchant: Swift.String?
    public let billNo: Swift.String?
    public let billItems: [WalletCoreKit.OrderResponse.BillItem]?
    public let responseCode: Swift.String?
    public let responseDesc: Swift.String?
    public let webURL: Swift.String?
    public let redirectURL: Swift.String?
    public let billExpired: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public let token: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BillItem : Swift.Codable {
    public let product: Swift.String?
    public let qty: Swift.String?
    public let amount: Swift.String?
    public let paymentPlan: Swift.String?
    public let tenor: Swift.String?
    public let merchantId: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public let token: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentResponse : Swift.Codable {
    public let response: Swift.String?
    public let trxId: Swift.String?
    public let merchantId: Swift.String?
    public let merchant: Swift.String?
    public let billNo: Swift.String?
    public let billItems: [WalletCoreKit.OrderResponse.BillItem]?
    public let responseCode: Swift.String?
    public let responseDesc: Swift.String?
    public let webURL: Swift.String?
    public let redirectURL: Swift.String?
    public let billExpired: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public let token: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Recipient : Swift.Decodable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let firstName: Swift.String?
    public let lastName: Swift.String?
    public let email: Swift.String?
    public let phone: Swift.String?
    public let address: Swift.String?
    public let postalCode: Swift.String?
    public let city: WalletCoreKit.OrderResponse.Recipient.City?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Fee : Swift.Codable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let value: Swift.Double?
    public let name: Swift.String?
    public let absorber: Swift.String?
    public let OrderId: WalletCoreKit.WalletCoreKitAnyCodable?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct OrderVendor : Swift.Decodable {
    public let transaction: WalletCoreKit.OrderResponse.OrderVendor.Transaction?
    public let integrationResponses: [WalletCoreKit.OrderResponse.OrderVendor.IntegrationResponse]?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Shipping : Swift.Codable {
    public let id: Swift.Int?
    public let method: Swift.String?
    public let storeId: Swift.String?
    public let rateId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let consigneeName: Swift.String?
    public let consigneePhoneNumber: Swift.String?
    public let consignerName: Swift.String?
    public let consignerPhoneNumber: Swift.String?
    public let originAddress: Swift.String?
    public let destinationAddress: Swift.String?
    public let originCoord: Swift.String?
    public let destinationCoord: Swift.String?
    public let driver: WalletCoreKit.OrderResponse.Shipping.Driver?
    public let vendor: Swift.String?
    public let trackUrl: Swift.String?
    public let externalId: Swift.String?
    public let originAreaId: Swift.Int?
    public let destinationAreaId: Swift.Int?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.Shipping {
  public struct Driver : Swift.Codable {
    public let name: Swift.String?
    public let phoneNumber: Swift.String?
    public let vehicleType: Swift.String?
    public let vehicleNumber: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.Recipient {
  public struct City : Swift.Decodable {
    public let id: Swift.Int?
    public let name: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.OrderVendor {
  public struct Transaction : Swift.Codable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let referenceId: Swift.String?
    public let integrationName: Swift.String?
    public let itemType: Swift.String?
    public let integrationType: Swift.String?
    public let sourceId: Swift.String?
    public let itemExecNumber: Swift.String?
    public let price: Swift.Double
    public let quantity: Swift.Int?
    public let isDigital: Swift.Bool?
    public let background: Swift.Bool?
    public let ItemId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let message: Swift.String?
    public let createdAt: Swift.String?
    public let integrationId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.OrderVendor {
  public struct IntegrationResponse : Swift.Decodable {
    public let itemId: Swift.Int?
    public let brand: Swift.String?
    public let mid: Swift.String?
    public let eGiftCode: Swift.String?
    public let programName: Swift.String?
    public let itemName: Swift.String?
    public let eGiftType: Swift.String?
    public let value: Swift.Double?
    public let useRedeemPin: Swift.Bool?
    public let pin: Swift.String?
    public let expiredDate: Swift.String?
    public let url: Swift.String?
    public let message: Swift.String?
    public let referenceNo: Swift.String?
    public let garudaMiles: Swift.Int?
    public let price: WalletCoreKit.ValueWrapper?
    public let exchangeAmount: Swift.Double?
    public let manualExchange: Swift.Bool?
    public let isManualExchange: Swift.Bool?
    public let attributes: WalletCoreKit.OrderResponse.OrderVendor.IntegrationResponse.Attributes?
    public let egift: WalletCoreKit.OrderResponse.OrderVendor.IntegrationResponse.EGift?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.OrderVendor.IntegrationResponse {
  public struct EGift : Swift.Decodable {
    public let merchantMid: Swift.String?
    public let number: Swift.String?
    public let name: Swift.String?
    public let expiredAt: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Attributes : Swift.Decodable {
    public let fulfillmentResult: [WalletCoreKit.OrderResponse.OrderVendor.IntegrationResponse.Attributes.FulfillmentResult]?
    public struct FulfillmentResult : Swift.Decodable {
      public let name: Swift.String?
      public let value: Swift.String?
      public init(from decoder: any Swift.Decoder) throws
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse {
  public struct OrderPayment : Swift.Decodable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let orderId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let paymentType: Swift.String?
    public let isExternalPayment: Swift.Bool?
    public let channel: Swift.String?
    public let cardNumber: Swift.String?
    public let amount: Swift.Double?
    public let transactionId: Swift.String?
    public let rewardType: Swift.String?
    public let unitType: Swift.String?
    public let conversionRate: Swift.Double?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let conversionType: Swift.String?
    public let value: Swift.Double?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse {
  public struct OrderItem : Swift.Decodable {
    public let id: WalletCoreKit.WalletCoreKitAnyCodable?
    public let variantId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let sku: Swift.String?
    public let itemName: Swift.String?
    public let variantName: Swift.String?
    public let category: Swift.String?
    public let itemType: Swift.String?
    public let isDigital: Swift.Bool?
    public let image: Swift.String?
    public let quantity: Swift.Int?
    public let weight: Swift.Double?
    public let price: Swift.Double?
    public let subtotal: Swift.Double?
    public let status: Swift.String?
    public let mId: WalletCoreKit.WalletCoreKitAnyCodable?
    public let mBrand: Swift.String?
    public let eGiftDetail: WalletCoreKit.OrderResponse.OrderItem.EGiftDetail?
    public let itemExecNumber: Swift.String?
    public let vendorResponse: WalletCoreKit.OrderResponse.OrderItem.VendorResponse?
    public let vendorMessage: Swift.String?
    public let notes: Swift.String?
    public let awbOrder: WalletCoreKit.OrderResponse.OrderItem.AwbOrder?
    public var isTrackable: Swift.Bool {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.OrderItem {
  public struct VendorResponse : Swift.Decodable {
    public let transaction: WalletCoreKit.OrderResponse.OrderVendor.Transaction?
    public let integrationResponse: [WalletCoreKit.OrderResponse.OrderVendor.IntegrationResponse]?
    public let referenceNo: WalletCoreKit.ValueWrapper?
    public let orderID: WalletCoreKit.ValueWrapper?
    public let message: Swift.String?
    public let signature: Swift.String?
    public let number: Swift.String?
    public let sn: Swift.String?
    public let saldo: Swift.Double?
    public let status: WalletCoreKit.ValueWrapper?
    public let serialNumber: Swift.String?
    public let attributes: [WalletCoreKit.OrderResponse.OrderItem.VendorResponse.Attribute]?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AwbOrder : Swift.Decodable {
    public let awbNumber: Swift.String?
    public let trackingNumber: Swift.String?
    public let otherCourierName: Swift.String?
    public let shippingBrand: Swift.String?
    public let shippingCompanyName: Swift.String?
    public let integrationLink: Swift.String?
    public let integrationName: Swift.String?
    public let status: Swift.String?
    public let receivedBy: Swift.String?
    public let completedAt: Swift.String?
    public let isTrackable: Swift.Bool?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct EGiftDetail : Swift.Decodable {
    public let generatedEGifts: [WalletCoreKit.OrderResponse.OrderItem.EGiftDetail.GeneratedEGift]?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.OrderItem.VendorResponse {
  public struct Attribute : Swift.Decodable {
    public let key: Swift.String?
    public let label: Swift.String?
    public let value: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.OrderResponse.OrderItem.EGiftDetail {
  public struct GeneratedEGift : Swift.Decodable {
    public let itemId: Swift.Int?
    public let brand: Swift.String?
    public let mid: Swift.String?
    public let egiftCode: Swift.String?
    public let programName: Swift.String?
    public let itemName: Swift.String?
    public let egiftType: Swift.String?
    public let value: Swift.Double?
    public let useRedeemPin: Swift.Bool?
    public let pin: Swift.String?
    public let expiredDate: Swift.String?
    public let url: Swift.String?
    public let message: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class OrderUseCase {
  public func getCardFixedAddress(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.FixedShippingAddressResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @available(*, deprecated, message: "This function is no longer supported, use getOrderFee instead")
  public func getShippingFeeByCity(cityId: Swift.String, areaId: Swift.String?, storeId: Swift.String?, programId: Swift.String, totalPrice: Swift.Double, items: [WalletCoreKit.ShippingInfoItem], completion: @escaping (Swift.Result<WalletCoreKit.ShippingInfoResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getShippingOptions(payload: WalletCoreKit.ShippingOptionRequest, completion: @escaping (Swift.Result<[WalletCoreKit.ShippingPriceResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func checkShopVoucher(cardId: Swift.String, storeId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.CheckVoucher?, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func searchPromoCode(cardId: Swift.String, storeId: Swift.String, code: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.VoucherPromo], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func searchVoucherPromo(cardId: Swift.String, storeId: Swift.String, name: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.VoucherPromo], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getShopVouchers(cardId: Swift.String, storeId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.VoucherPromo], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOrderFee(programId: Swift.String, shippingFee: Swift.Double? = nil, items: [WalletCoreKit.CartItem], paymentMethod: WalletCoreKit.PaymentType?, completion: @escaping (Swift.Result<[WalletCoreKit.OrderFeeResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOrderFee(catalogType: WalletCoreKit.CatalogType, cardDetail: WalletCoreKit.CardDetail, shippingFee: Swift.Double? = nil, paymentType: WalletCoreKit.PaymentType?, items: [WalletCoreKit.CartItem], completion: @escaping (Swift.Result<[WalletCoreKit.OrderFeeResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOrderFee(catalogType: WalletCoreKit.CatalogType, programId: Swift.String, shippingFee: Swift.Double? = nil, paymentType: WalletCoreKit.PaymentType?, items: [WalletCoreKit.CartItem], completion: @escaping (Swift.Result<[WalletCoreKit.OrderFeeResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func createOrder(order: WalletCoreKit.CreateOrderRequest, completion: @escaping (Swift.Result<WalletCoreKit.OrderResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOrderDetail(orderId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.OrderDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getOrderDetail(orderNumber: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.OrderDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getExternalPayment(programId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.ExternalPaymentResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getExternalPayment(mId: Swift.String, sId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.ExternalPaymentResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getDiscountInfo(cardDetail: WalletCoreKit.CardDetail, voucher: WalletCoreKit.VoucherPromo, sumTotalItemPrice: Swift.Double, shippingFee: Swift.Double?) -> WalletCoreKit.DiscountInfo
  public func getShippingMethod(cardDetail: WalletCoreKit.CardDetail, items: [WalletCoreKit.CartItem], cityId: Swift.String?, areaId: Swift.String?, latitude: Swift.Double?, longitude: Swift.Double?, catalogType: WalletCoreKit.CatalogType, selectedStore: WalletCoreKit.CatalogStore? = nil, completion: @escaping (WalletCoreKit.ShippingListInfo) -> Swift.Void)
  public func getAllowedShippingMethod(items: [WalletCoreKit.CartItem]) -> [Swift.String]
  public func checkoutSummary(cardDetail: WalletCoreKit.CardDetail, catalogType: WalletCoreKit.CatalogType, itemDetail: WalletCoreKit.ItemDetail, variant: WalletCoreKit.Variant, quantity: Swift.Int, customPrice: Swift.Double? = nil, targetValue: WalletCoreKit.TargetValue? = nil, email: Swift.String? = nil, store: WalletCoreKit.CatalogStore? = nil, selectedAddress: WalletCoreKit.ShippingAddress? = nil, selectedShippingMethod: WalletCoreKit.ShippingMethod? = nil, selectedPayment: WalletCoreKit.Payment? = nil, secondaryPayment: WalletCoreKit.Payment.External? = nil, voucher: WalletCoreKit.VoucherPromo? = nil, pin: Swift.String? = nil, completion: @escaping (WalletCoreKit.CheckoutState) -> Swift.Void)
  public func checkoutSummary(cardDetail: WalletCoreKit.CardDetail, catalogType: WalletCoreKit.CatalogType, items: [WalletCoreKit.CartItem], email: Swift.String? = nil, store: WalletCoreKit.CatalogStore? = nil, selectedAddress: WalletCoreKit.ShippingAddress? = nil, selectedShippingMethod: WalletCoreKit.ShippingMethod? = nil, selectedPayment: WalletCoreKit.Payment? = nil, secondaryPayment: WalletCoreKit.Payment.External? = nil, voucher: WalletCoreKit.VoucherPromo? = nil, pin: Swift.String? = nil, completion: @escaping (WalletCoreKit.CheckoutState) -> Swift.Void)
  public func cartCheckoutSummary(cardDetail: WalletCoreKit.CardDetail, catalogType: WalletCoreKit.CatalogType, email: Swift.String? = nil, selectedStore: WalletCoreKit.CatalogStore? = nil, selectedAddress: WalletCoreKit.ShippingAddress? = nil, selectedShippingMethod: WalletCoreKit.ShippingMethod? = nil, selectedPayment: WalletCoreKit.Payment? = nil, secondaryPayment: WalletCoreKit.Payment.External? = nil, voucher: WalletCoreKit.VoucherPromo? = nil, pin: Swift.String? = nil, completion: @escaping (WalletCoreKit.CheckoutState) -> Swift.Void)
  @objc deinit
}
extension WalletCoreKit.OrderUseCase {
  public func addressInfoForOrder(cardDetail: WalletCoreKit.CardDetail, items: [WalletCoreKit.CartItem], selectedAddress: WalletCoreKit.ShippingAddress? = nil, completion: @escaping (WalletCoreKit.ShippingAddressInfo) -> Swift.Void)
  public func calculateDiscount(value: Swift.Double, transaction: Swift.Double, maxDiscount: Swift.Double?, isPercent: Swift.Bool) -> Swift.Double
}
public enum ShippingListInfo {
  case requiredStore([WalletCoreKit.CatalogStore])
  case required([WalletCoreKit.ShippingMethod])
  case empty
  case notRequired
  case error(message: Swift.String)
}
public enum CheckoutState {
  case errorInvalidArgument(_: Swift.String)
  case errorAddressNotAvailableForShipping(WalletCoreKit.ShippingAddress?)
  case errorPaymentNotAvailable
  case promptSelectStore([WalletCoreKit.CatalogStore])
  case promptSelectAddress([WalletCoreKit.ShippingAddress])
  case promptSelectPayment([WalletCoreKit.Payment], [WalletCoreKit.OrderFeeResponse]?)
  case promptSelectSecondaryPayment([WalletCoreKit.Payment.External])
  case promptAddressRequireUpdate(WalletCoreKit.ShippingAddress, [WalletCoreKit.ShippingAddress])
  case promptSelectShippingMethod([WalletCoreKit.ShippingMethod])
  case promptVoucherMinimumRequired(WalletCoreKit.VoucherPromo, Swift.Double)
  case errorByException(message: Swift.String)
  case result([WalletCoreKit.OrderFeeResponse]?, WalletCoreKit.CreateOrderRequest)
}
public enum ShippingAddressInfo : Swift.Equatable {
  public static func == (lhs: WalletCoreKit.ShippingAddressInfo, rhs: WalletCoreKit.ShippingAddressInfo) -> Swift.Bool
  case requiredValidFixed(address: WalletCoreKit.FixedShippingAddressResponse, customerName: Swift.String?, customerPhone: Swift.String?)
  case requiredValidUser(WalletCoreKit.ShippingAddress)
  case requiredNeedUpdate(WalletCoreKit.ShippingAddress, [WalletCoreKit.ShippingAddress])
  case requiredEmpty([WalletCoreKit.ShippingAddress])
  case notRequired
  case notAvailable
  case error(any Swift.Error)
}
public enum DiscountInfo {
  case notAvailable
  case availableItemPrice(amount: Swift.Double, voucher: WalletCoreKit.VoucherPromo)
  case availableShipping(amount: Swift.Double, voucher: WalletCoreKit.VoucherPromo)
  case error(any Swift.Error)
  case minimumRequired(minimumRequired: Swift.Double)
}
public enum CheckVoucher {
  case available(voucher: WalletCoreKit.VoucherPromo)
  case byPromoCode
  case notAvailable
}
public enum OtpMethod {
  case sms
  case whatsApp
  public static func == (a: WalletCoreKit.OtpMethod, b: WalletCoreKit.OtpMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class OtpVerification : Swift.Codable {
  public init(phoneNumber: Swift.String? = nil, email: Swift.String? = nil, secret: Swift.String, isNewUser: Swift.Bool, requestAttempt: Swift.Int, requestRemaining: Swift.Int, requestLimit: Swift.Int)
  final public let phoneNumber: Swift.String?
  final public let email: Swift.String?
  final public let secret: Swift.String
  final public let isNewUser: Swift.Bool
  final public let requestAttempt: Swift.Int
  final public let requestRemaining: Swift.Int
  final public let requestLimit: Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(OtpVerificationCoreData) public class OtpVerificationCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.OtpVerificationCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.OtpVerificationCoreData>
  @nonobjc public class func fetchRequest(key: Swift.String) -> CoreData.NSFetchRequest<WalletCoreKit.OtpVerificationCoreData>
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var secret: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isNewUser: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requestAttempt: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requestRemaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requestLimit: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Foundation.Date? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class PaginatedResult<T> {
  final public let currentPage: Swift.Int
  final public let perPage: Swift.Int
  final public let count: Swift.Int
  final public let data: [T]
  public var totalPages: Swift.Int {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PartialFormatter {
  convenience public init(phoneNumberKit: WalletCoreKit.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true, maxDigits: Swift.Int? = nil)
  final public var defaultRegion: Swift.String {
    get
    set
  }
  final public var maxDigits: Swift.Int?
  final public var currentRegion: Swift.String {
    get
  }
  final public func nationalNumber(from rawNumber: Swift.String) -> Swift.String
  final public func formatPartial(_ rawNumber: Swift.String) -> Swift.String
  @objc deinit
}
public struct PayAtCashierRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(qrString: Swift.String?, distributionId: Swift.String, pin: Swift.String, amount: Swift.String, terminalId: Swift.String, paymentType: Swift.String, walletName: Swift.String, additionalMetadata: WalletCoreKit.AdditionalMetadata? = nil)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class Payment {
  final public let name: Swift.String
  final public let type: WalletCoreKit.PaymentType
  final public let position: Swift.Int
  final public let isAvailable: Swift.Bool
  final public let allowMixPayment: Swift.Bool
  public func getBalanceAmount() -> Swift.Double?
  @_hasMissingDesignatedInitializers public class External : WalletCoreKit.Payment {
    public struct Channel {
    }
    @objc deinit
  }
  @objc deinit
}
final public class PaymentMethodItem {
  public enum PaymentCategory : Swift.String {
    case balance
    case wallet
    case creditCard
    case bankTransfer
    case eWallet
    case retailOutlet
    case others
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Channel : Swift.String {
    case midtrans
    case xendit
    case stripe
    case billplz
    case faspay
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let name: Swift.String
  final public let balance: Swift.String?
  final public let balanceRaw: Swift.Double?
  final public let balanceValueRaw: Swift.Double?
  final public let balanceAllowRedemption: Swift.Bool?
  final public let balanceMinimumRedemptionAmount: Swift.String?
  final public let balanceMinimumRedemptionAmountRaw: Swift.Double?
  final public let image: UIKit.UIImage?
  final public let imageURLString: Swift.String?
  final public let cost: Swift.String?
  final public let costRaw: Swift.Double?
  final public let conversionRate: Swift.Double?
  final public let remainingAmount: Swift.String?
  final public let remainingAmountRaw: Swift.Double?
  final public let data: Any?
  final public let index: Swift.Int
  final public let isSelectable: Swift.Bool
  final public let type: WalletCoreKit.PaymentMethodItem.PaymentCategory
  final public let paymentType: WalletCoreKit.PaymentType
  final public let channel: WalletCoreKit.PaymentMethodItem.Channel?
  final public let channelCode: Swift.String?
  final public let walletName: Swift.String?
  final public let walletID: Swift.String?
  final public var errorText: Swift.String?
  final public let hideCost: Swift.Bool?
  final public var isMixedPaymentAvailable: Swift.Bool
  final public var isMixedPaymentEnable: Swift.Bool
  final public var isMixedPaymentSelected: Swift.Bool
  final public var isDisableWhenNotMixedPayment: Swift.Bool
  public init(name: Swift.String, balance: Swift.String?, balanceRaw: Swift.Double? = nil, balanceValueRaw: Swift.Double? = nil, balanceAllowRedemption: Swift.Bool = true, balanceMinimumRedemptionAmount: Swift.String? = nil, balanceMinimumRedemptionAmountRaw: Swift.Double? = nil, image: UIKit.UIImage?, imageURLString: Swift.String?, cost: Swift.String?, costRaw: Swift.Double?, conversionRate: Swift.Double? = 1, remainingAmount: Swift.String? = nil, remainingAmountRaw: Swift.Double? = nil, data: Any?, index: Swift.Int, isSelectable: Swift.Bool, type: WalletCoreKit.PaymentMethodItem.PaymentCategory, paymentType: WalletCoreKit.PaymentType, channel: WalletCoreKit.PaymentMethodItem.Channel?, channelCode: Swift.String? = nil, walletName: Swift.String?, walletID: Swift.String? = nil, errorText: Swift.String?, hideCost: Swift.Bool?)
  public init(isVoucher: Swift.Bool)
  final public var hashTag: Swift.String {
    get
  }
  final public var isPaymentEnough: Swift.Bool {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PaymentMethodUtil : ObjectiveC.NSObject {
  public static func generateLimitedAvailablePaymentMethods(redeemInfo: WalletCoreKit.RedeemInfoResponse, cardDetail: WalletCoreKit.CardDetail, forceIndonesia: Swift.Bool = false, totalCost: Swift.Double) -> [WalletCoreKit.PaymentMethodItem]
  @objc deinit
}
public enum PaymentType : Swift.String, Swift.Decodable {
  case tada
  case bankTransfer
  case creditCard
  case goPay
  case ovo
  case dana
  case alfamart
  case manualBankTransfer
  case cashOnDelivery
  case qris
  case tng
  case boost
  case grabpay
  case linkaja
  case shopeepay
  case voucher
  case other
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class PaymentUseCase {
  public func getPayments(cardDetail: WalletCoreKit.CardDetail, items: [WalletCoreKit.CartItem], catalogType: WalletCoreKit.CatalogType, bill: Swift.Double, storeSId: Swift.String? = nil, completion: @escaping ([WalletCoreKit.Payment]?) -> Swift.Void)
  public func getRedeemInfo(cardId: Swift.String, terminalId: Swift.String, categoryId: Swift.String? = nil, catalogType: WalletCoreKit.CatalogType = .rewardCatalog, completion: @escaping (Swift.Result<WalletCoreKit.RedeemInfoResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct PDAMVendorOperatorListResponse : Swift.Decodable {
  public let operatorLists: [WalletCoreKit.PDAMVendorOperatorListResponse.PDAMOperator]?
  public struct PDAMOperator : Swift.Decodable {
    public let code: Swift.String?
    public let description: Swift.String?
    public let enabled: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PendingOrderNumberResponse : Swift.Decodable {
  public let id: Swift.Int?
  public let transactionId: Swift.Int?
  public let clientId: Swift.Int?
  public let orderType: Swift.String?
  public let orderNumber: Swift.String?
  public let cardNo: Swift.String?
  public let requesterType: Swift.String?
  public let requesterId: Swift.Int?
  public let total: Swift.Double?
  public let shippingFee: Swift.Double?
  public let totalWithShipping: Swift.Double?
  public let description: Swift.String?
  public let status: Swift.String?
  public let updatedAt: Swift.String?
  public let createdAt: Swift.String?
  public let isPointProgram: Swift.Bool?
  public let pointProgramRate: Swift.Double?
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentGatewayToken {
}
public class PendingSubscriptionRequest : WalletCoreKit.WalletCoreKitPayload {
  final public let phone: Swift.String
  final public let name: Swift.String
  final public let email: Swift.String
  final public let countryCode: Swift.String
  final public let pgToken: WalletCoreKit.PaymentGatewayToken?
  final public let channel: Swift.String
  final public let channelCode: Swift.String?
  final public let programId: Swift.String
  final public let paymentType: Swift.String
  final public let transactionType: Swift.String
  final public let source: Swift.String
  final public let cardNumber: Swift.String?
  final public let subscriptionNo: Swift.String?
  final public let oneTimeOnly: Swift.Bool?
  public init(phone: Swift.String, name: Swift.String, email: Swift.String, countryCode: Swift.String, pgToken: WalletCoreKit.PaymentGatewayToken?, channel: Swift.String, channelCode: Swift.String? = nil, programId: Swift.String, paymentType: Swift.String, transactionType: Swift.String, source: Swift.String, cardNumber: Swift.String?, subscriptionNo: Swift.String?, oneTimeOnly: Swift.Bool?)
  public var parameters: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
public struct PendingSubscriptionResponse : Swift.Codable {
  public let subscription: WalletCoreKit.PendingSubscriptionResponse.Subscription?
  public let payment: WalletCoreKit.PendingSubscriptionResponse.Payment?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.PendingSubscriptionResponse {
  public struct Subscription : Swift.Codable {
    public let subscriptionNo: Swift.String?
    public let paymentResponse: WalletCoreKit.PendingSubscriptionResponse.Subscription.PaymentResponse?
    public let createdAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.PendingSubscriptionResponse {
  public struct Payment : Swift.Codable {
    public let status: Swift.String?
    public let amount: Swift.Double?
    public let updated: Swift.String?
    public let id: Swift.String?
    public let token: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.PendingSubscriptionResponse.Subscription {
  public struct PaymentResponse : Swift.Codable {
    public let id: Swift.String?
    public let amount: Swift.Double?
    public let maskedCardNumber: Swift.String?
    public let status: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct SubmittedPrivilege : Swift.Codable {
  public init(hasReward: Swift.Bool?, rewardType: Swift.String?, cardProgramName: Swift.String?, egiftName: Swift.String?, walletName: Swift.String?, walletUnitType: Swift.String?, rewardAmount: Swift.Double?)
  public let hasReward: Swift.Bool?
  public let rewardType: Swift.String?
  public let cardProgramName: Swift.String?
  public let egiftName: Swift.String?
  public let walletName: Swift.String?
  public let walletUnitType: Swift.String?
  public let rewardAmount: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SurveyHistory : Swift.Codable {
  public init(id: WalletCoreKit.WalletCoreKitAnyCodable?, answers: [Swift.String]?, question: WalletCoreKit.SurveyAnswerQuestion?)
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let answers: [Swift.String]?
  public let question: WalletCoreKit.SurveyAnswerQuestion?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SurveyAnswerQuestion : Swift.Codable {
  public init(id: WalletCoreKit.WalletCoreKitAnyCodable?, surveyId: WalletCoreKit.WalletCoreKitAnyCodable?, type: Swift.String?, question: Swift.String?, questionValue: Swift.String?)
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let surveyId: WalletCoreKit.WalletCoreKitAnyCodable?
  public let type: Swift.String?
  public let question: Swift.String?
  public let questionValue: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PhoneNumber : Swift.Codable {
  public let numberString: Swift.String
  public let countryCode: Swift.UInt64
  public let leadingZero: Swift.Bool
  public let nationalNumber: Swift.UInt64
  public let numberExtension: Swift.String?
  public let type: WalletCoreKit.PhoneNumberType
  public let regionID: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.PhoneNumber : Swift.Equatable {
  public static func == (lhs: WalletCoreKit.PhoneNumber, rhs: WalletCoreKit.PhoneNumber) -> Swift.Bool
}
extension WalletCoreKit.PhoneNumber : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension WalletCoreKit.PhoneNumber {
  public static func notPhoneNumber() -> WalletCoreKit.PhoneNumber
  public func notParsed() -> Swift.Bool
  public var url: Foundation.URL? {
    get
  }
}
extension WalletCoreKit.PhoneNumber {
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String) throws
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String, region: Swift.String) throws
}
@objc open class PhoneNumberFormatter : Foundation.Formatter {
  final public let phoneNumberKit: WalletCoreKit.PhoneNumberKit
  @objc dynamic public var generatesPhoneNumber: Swift.Bool
  @objc dynamic public var defaultRegion: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic public var withPrefix: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var currentRegion: Swift.String {
    @objc get
  }
  public init(phoneNumberKit pnk: WalletCoreKit.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension WalletCoreKit.PhoneNumberFormatter {
  @objc override dynamic open func string(for obj: Any?) -> Swift.String?
  @objc override dynamic open func getObjectValue(_ obj: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>?, for string: Swift.String, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc override dynamic open func isPartialStringValid(_ partialStringPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString>, proposedSelectedRange proposedSelRangePtr: Foundation.NSRangePointer?, originalString origString: Swift.String, originalSelectedRange origSelRange: Foundation.NSRange, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
}
public typealias MetadataCallback = (() throws -> Foundation.Data?)
@objc final public class PhoneNumberKit : ObjectiveC.NSObject {
  public init(metadataCallback: @escaping WalletCoreKit.MetadataCallback = PhoneNumberKit.defaultMetadataCallback)
  final public func parse(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) throws -> WalletCoreKit.PhoneNumber
  final public func parse(_ numberStrings: [Swift.String], withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false, shouldReturnFailedEmptyNumbers: Swift.Bool = false) -> [WalletCoreKit.PhoneNumber]
  final public func isValidPhoneNumber(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) -> Swift.Bool
  final public func format(_ phoneNumber: WalletCoreKit.PhoneNumber, toType formatType: WalletCoreKit.PhoneNumberFormat, withPrefix prefix: Swift.Bool = true) -> Swift.String
  final public func allCountries() -> [Swift.String]
  final public func countries(withCode countryCode: Swift.UInt64) -> [Swift.String]?
  final public func mainCountry(forCode countryCode: Swift.UInt64) -> Swift.String?
  final public func countryCode(for country: Swift.String) -> Swift.UInt64?
  final public func leadingDigits(for country: Swift.String) -> Swift.String?
  final public func getRegionCode(of phoneNumber: WalletCoreKit.PhoneNumber) -> Swift.String?
  final public func getExampleNumber(forCountry countryCode: Swift.String, ofType type: WalletCoreKit.PhoneNumberType = .mobile) -> WalletCoreKit.PhoneNumber?
  final public func getFormattedExampleNumber(forCountry countryCode: Swift.String, ofType type: WalletCoreKit.PhoneNumberType = .mobile, withFormat format: WalletCoreKit.PhoneNumberFormat = .international, withPrefix prefix: Swift.Bool = true) -> Swift.String?
  final public func metadata(for country: Swift.String) -> WalletCoreKit.MetadataTerritory?
  final public func metadata(forCode countryCode: Swift.UInt64) -> [WalletCoreKit.MetadataTerritory]?
  final public func possiblePhoneNumberLengths(forCountry country: Swift.String, phoneNumberType: WalletCoreKit.PhoneNumberType, lengthType: WalletCoreKit.PossibleLengthType) -> [Swift.Int]
  final public class func defaultRegionCode() -> Swift.String
  public static func defaultMetadataCallback() throws -> Foundation.Data?
  @objc deinit
}
extension WalletCoreKit.PhoneNumberKit {
  public enum CountryCodePicker {
    public static var commonCountryCodes: [Swift.String]
    public static var forceModalPresentation: Swift.Bool
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PhoneNumberTextField : UIKit.UITextField, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) final public let phoneNumberKit: WalletCoreKit.PhoneNumberKit
  @_Concurrency.MainActor(unsafe) public var flagButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open func setTextUnformatted(newValue: Swift.String?)
  @_Concurrency.MainActor(unsafe) open var defaultRegion: Swift.String {
    get
    @available(*, deprecated, message: "    The setter of defaultRegion is deprecated,\n    please override defaultRegion in a subclass instead.")
    set
  }
  @_Concurrency.MainActor(unsafe) public var withPrefix: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var withFlag: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var withExamplePlaceholder: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var countryCodePlaceholderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberPlaceholderColor: UIKit.UIColor {
    get
    set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) public var withDefaultPickerUI: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isPartialFormatterEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var maxDigits: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var partialFormatter: WalletCoreKit.PartialFormatter {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var delegate: (any UIKit.UITextFieldDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var currentRegion: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var nationalNumber: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isValidNumber: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var phoneNumber: WalletCoreKit.PhoneNumber? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) convenience public init(withPhoneNumberKit phoneNumberKit: WalletCoreKit.PhoneNumberKit)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, phoneNumberKit: WalletCoreKit.PhoneNumberKit)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func updateFlag()
  @_Concurrency.MainActor(unsafe) open func updatePlaceholder()
  @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, tvOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
}
@available(iOS 11.0, *)
extension WalletCoreKit.PhoneNumberTextField : WalletCoreKit.CountryCodePickerDelegate {
  @_Concurrency.MainActor(unsafe) public func countryCodePickerViewControllerDidPickCountry(_ country: WalletCoreKit.CountryCodePickerViewController.Country)
}
@_hasMissingDesignatedInitializers public class PinInfo {
  final public let isHavePin: Swift.Bool
  final public let isNewDevice: Swift.Bool
  final public let isNewUser: Swift.Bool
  @objc deinit
}
public struct PINInfoResponse : Swift.Decodable {
  public init(isHavePin: Swift.Bool?, isNewDevice: Swift.Bool?, isNewUser: Swift.Bool?)
  public let isHavePin: Swift.Bool?
  public let isNewDevice: Swift.Bool?
  public let isNewUser: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
}
public struct PINUseCase {
  public func getPinInfoByEmail(email: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.PinInfo, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPinInfoByPhone(phoneNumber: Swift.String, countryCode: WalletCoreKit.WalletCoreKitCountryCode, completion: @escaping (Swift.Result<WalletCoreKit.PinInfo, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @available(*, deprecated, message: "This function is no longer supported, use loginPinByPhone -> VerificationState instead")
  public func loginPinByPhone(phoneNumber: Swift.String, countryCode: WalletCoreKit.WalletCoreKitCountryCode, pin: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.LoginWalletResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func loginPinByPhone(phoneNumber: Swift.String, countryCode: WalletCoreKit.WalletCoreKitCountryCode, pin: Swift.String, completion: @escaping (WalletCoreKit.VerificationState) -> Swift.Void)
  @available(*, deprecated, message: "This function is no longer supported, use loginPinByEmail -> VerificationState instead")
  public func loginPinByEmail(email: Swift.String, pin: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.LoginWalletResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func loginPinByEmail(email: Swift.String, pin: Swift.String, completion: @escaping (WalletCoreKit.VerificationState) -> Swift.Void)
  public func createPIN(pin: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func changePIN(oldPin: Swift.String, newPin: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func deletePIN(completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
}
public struct PointTransferConversionAmount : WalletCoreKit.WalletCoreKitPayload {
  public init(senderSettingId: Swift.String, senderCardNumber: Swift.String, recipientSettingId: Swift.String, recipientCardNumber: Swift.String, amount: Swift.Double)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct PointTransferConversionResponse : Swift.Codable, Swift.Equatable {
  public let convertedAmount: Swift.Double?
  public let unitType: Swift.String?
  public let isStamp: Swift.Bool?
  public static func == (a: WalletCoreKit.PointTransferConversionResponse, b: WalletCoreKit.PointTransferConversionResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PointTransferProcessRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(senderCardNumber: Swift.String, senderWalletID: Swift.String, receiverCardNumber: Swift.String, receiverWalletID: Swift.String, amount: Swift.Double, note: Swift.String?, pin: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct PointTransferProcessResponse : Swift.Codable, Swift.Equatable {
  public let transactionId: Swift.String?
  public let transactionNumber: Swift.String?
  public let transactionDate: Swift.String?
  public let sender: WalletCoreKit.PointTransferProcessResponse.PointTransferProcessSender?
  public let recipient: WalletCoreKit.PointTransferProcessResponse.PointTransferProcessRecipient?
  public struct PointTransferProcessSender : Swift.Codable, Swift.Equatable {
    public let amount: Swift.Double?
    public let isStamp: Swift.Bool?
    public let unitType: Swift.String?
    public static func == (a: WalletCoreKit.PointTransferProcessResponse.PointTransferProcessSender, b: WalletCoreKit.PointTransferProcessResponse.PointTransferProcessSender) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PointTransferProcessRecipient : Swift.Codable, Swift.Equatable {
    public let iconUrl: Swift.String?
    public let customerName: Swift.String?
    public let phoneNumber: Swift.String?
    public let cardNumber: Swift.String?
    public let convertedAmount: Swift.Double?
    public let isStamp: Swift.Bool?
    public let unitType: Swift.String?
    public static func == (a: WalletCoreKit.PointTransferProcessResponse.PointTransferProcessRecipient, b: WalletCoreKit.PointTransferProcessResponse.PointTransferProcessRecipient) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func == (a: WalletCoreKit.PointTransferProcessResponse, b: WalletCoreKit.PointTransferProcessResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PointTransferReceiverResponse : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let programId: Swift.String?
  public let programName: Swift.String?
  public let cardNumber: Swift.String?
  public let balanceType: Swift.String?
  public let walletId: Swift.String?
  public let iconUrl: Swift.String?
  public let unitType: Swift.String?
  public let isStamp: Swift.Bool?
  public let customerName: Swift.String?
  public let customerPhoneNumber: Swift.String?
  public let phoneNumber: Swift.String?
  public static func == (a: WalletCoreKit.PointTransferReceiverResponse, b: WalletCoreKit.PointTransferReceiverResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PointTransferSenderResponse : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let balanceType: Swift.String?
  public let walletId: Swift.String?
  public let walletName: Swift.String?
  public let balance: Swift.Double?
  public let unitType: Swift.String?
  public let isStamp: Swift.Bool?
  public static func == (a: WalletCoreKit.PointTransferSenderResponse, b: WalletCoreKit.PointTransferSenderResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PolicyLinkResponse : Swift.Codable {
  public let termsCondition: Swift.String?
  public let privacyPolicy: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PreRegistrationHistoryResponse : Swift.Codable {
  public let id: Swift.String?
  public let no: Swift.String?
  public let distributionId: Swift.String?
  public let status: Swift.String?
  public let hasExpiry: Swift.Bool?
  public let ownerType: Swift.String?
  public let ownerId: Swift.String?
  public let cardProgram: WalletCoreKit.PreRegistrationHistoryResponse.CardProgram?
  public let customer: WalletCoreKit.PreRegistrationHistoryResponse.Customer?
  public let balance: WalletCoreKit.PreRegistrationHistoryResponse.Balance?
  public let wallets: [WalletCoreKit.PreRegistrationHistoryResponse.Wallet]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.PreRegistrationHistoryResponse {
  public struct Customer : Swift.Codable {
    public let id: Swift.String?
    public let phone: Swift.String?
    public let email: Swift.String?
    public let name: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardProgram : Swift.Codable {
    public let id: Swift.String?
    public let programName: Swift.String?
    public let isPointProgram: Swift.Bool?
    public let pointProgramRate: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Balance : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let amountType: Swift.String?
    public let pointProgramRate: Swift.String?
    public let convertedAmount: Swift.Double?
    public let convertionRate: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Wallet : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let amount: Swift.Double?
    public let balance: Swift.Double?
    public let unitType: Swift.String?
    public let isStamp: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct PreRegistrationResponse : Swift.Codable {
  public let customer: WalletCoreKit.PreRegistrationResponse.Customer?
  public let card: [WalletCoreKit.PreRegistrationResponse.Card]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.PreRegistrationResponse {
  public struct Customer : Swift.Codable {
    public let id: Swift.String?
    public let MerchantId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.PreRegistrationResponse {
  public struct Card : Swift.Codable {
    public let id: Swift.String?
    public let no: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class PreRegistrationUseCase {
  public func submitPreRegistration(payload: WalletCoreKit.SubmitPreRegistrationRequest, completion: @escaping (Swift.Result<WalletCoreKit.PreRegistrationResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func merchantCheckMember(merchantId: Swift.String, phoneNumber: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.PreRegistrationResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct PrivilegeCategoryResponse : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let position: Swift.Int?
  public static func == (a: WalletCoreKit.PrivilegeCategoryResponse, b: WalletCoreKit.PrivilegeCategoryResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PrivilegeDetailResponse : Swift.Codable {
  public enum PrivilegeType {
    case NoRewards
    case RewardWallet
    case EGiftReward
    case PointRewardTadaPointAndBalance
    case CardWithReferral
    case CardWithoutReferral
    case EmptyPrivilegeType
    public static func == (a: WalletCoreKit.PrivilegeDetailResponse.PrivilegeType, b: WalletCoreKit.PrivilegeDetailResponse.PrivilegeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let userPrivilegeId: Swift.String?
  public let privilegeId: Swift.String?
  public let verification: Swift.Bool?
  public let programName: Swift.String?
  public let expiredDate: Swift.String?
  public let image: Swift.String?
  public let description: Swift.String?
  public let surveyQuestions: [WalletCoreKit.SurveyQuestion]?
  public let privilegeType: Swift.String?
  public let rewardType: Swift.String?
  public let displayType: Swift.String?
  public let displayLimitType: Swift.String?
  public let displayLimit: Swift.Int?
  public let rewardCounter: Swift.Int?
  public let status: Swift.String?
  public let reason: Swift.String?
  public let surveyAnswers: [WalletCoreKit.SurveyAnswer]?
  public let surveySubject: Swift.String?
  public let cardId: Swift.String?
  public let cardNo: Swift.String?
  public let referralRewardedCardProgramId: Swift.Int?
  public let surveyType: Swift.String?
  public let merchantName: Swift.String?
  public let isUserEligible: Swift.Bool?
  public let isUserReachSubmissionLimit: Swift.Bool?
  public let hasSurvey: Swift.Bool?
  public let hasSurveyTemplate: Swift.Bool?
  public let hasUserAnsweredSurvey: Swift.Bool?
  public let levels: [WalletCoreKit.PrivilegeDetailResponse.Levels]?
  public let referral: WalletCoreKit.PrivilegeDetailResponse.Referral?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.PrivilegeDetailResponse {
  public struct Levels : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Referral : Swift.Codable {
    public let code: Swift.String?
    public let link: Swift.String?
    public let caption: Swift.String?
    public let rewardedCardProgramId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var isOneTime: Swift.Bool {
    get
  }
  public var isRecurringUnlimitedPrivilege: Swift.Bool {
    get
  }
  public var isRecurringLimited: Swift.Bool {
    get
  }
  public var isHasReferralQuestion: Swift.Bool {
    get
  }
  public var shouldShowRecurringHistory: Swift.Bool {
    get
  }
  public var isPrivilegeSurvey: Swift.Bool {
    get
  }
  public func checkSharePrivilege() -> Swift.Bool
  public func checkShareType() -> Swift.String
}
public struct PrivilegeItem : Swift.Codable, Swift.Equatable {
  public init(priorityNo: Swift.Int?, userPrivilegeId: Swift.Int?, privilegeId: Swift.String?, brand: Swift.String?, programId: Swift.String?, programName: Swift.String?, expiredDate: Swift.String?, image: Swift.String?, privilegeType: Swift.String?, rewardType: Swift.String?, surveyId: Swift.Int?, cardId: Swift.String?, cardNo: Swift.String?, GCIUserPrivilegeCreatedAt: Swift.String?, privilegeCreatedAt: Swift.String?, surveyType: Swift.String?, privilegeCategoryId: Swift.Int?, privilegeLevel: [WalletCoreKit.PrivilegeItem.PrivilegeItemLevel]?, isUserEligible: Swift.Bool?)
  public init(privilegeId: Swift.String?)
  public let priorityNo: Swift.Int?
  public let userPrivilegeId: Swift.Int?
  public let privilegeId: Swift.String?
  public let brand: Swift.String?
  public let programId: Swift.String?
  public let programName: Swift.String?
  public let expiredDate: Swift.String?
  public let image: Swift.String?
  public let privilegeType: Swift.String?
  public let rewardType: Swift.String?
  public let surveyId: Swift.Int?
  public let cardId: Swift.String?
  public let cardNo: Swift.String?
  public let GCIUserPrivilegeCreatedAt: Swift.String?
  public let privilegeCreatedAt: Swift.String?
  public let surveyType: Swift.String?
  public let privilegeCategoryId: Swift.Int?
  public let privilegeLevel: [WalletCoreKit.PrivilegeItem.PrivilegeItemLevel]?
  public let isUserEligible: Swift.Bool?
  public struct PrivilegeItemLevel : Swift.Codable, Swift.Equatable {
    public let id: Swift.String?
    public let name: Swift.String?
    public static func == (a: WalletCoreKit.PrivilegeItem.PrivilegeItemLevel, b: WalletCoreKit.PrivilegeItem.PrivilegeItemLevel) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func == (a: WalletCoreKit.PrivilegeItem, b: WalletCoreKit.PrivilegeItem) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.PrivilegeItem {
  public var isReward: Swift.Bool {
    get
  }
  public var isReferralLink: Swift.Bool {
    get
  }
  public var isReferralSMS: Swift.Bool {
    get
  }
  public var isReferralPrivilege: Swift.Bool {
    get
  }
}
@_hasMissingDesignatedInitializers public class PrivilegeUseCase {
  public func getPrivilegeCategories(cardId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.PrivilegeCategoryResponse], WalletCoreKit.TadaWalletKitError>?) -> Swift.Void)
  public func getPrivilegeDetailByCard(cardId: Swift.String, privilegeId: Swift.String, language: Swift.String? = nil, completion: @escaping (Swift.Result<WalletCoreKit.PrivilegeDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func submitPrivilegeByCard(cardId: Swift.String, privilegeId: Swift.String, body: WalletCoreKit.SubmitPrivilegeRequest, completion: @escaping (Swift.Result<WalletCoreKit.SubmittedPrivilege, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPrivilegeAnswersByCard(cardId: Swift.String, privilegeId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.SurveyAnswerListResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPrivilegeAnswerDetailByCard(cardId: Swift.String, privilegeId: Swift.String, answerId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.SurveyAnswerDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPrivilegeV1(completion: @escaping (Swift.Result<[WalletCoreKit.PrivilegeItem], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPrivilegeDetail(privilegeId: Swift.String, language: Swift.String? = nil, completion: @escaping (Swift.Result<WalletCoreKit.PrivilegeDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func submitPrivilege(privilegeId: Swift.String, body: WalletCoreKit.SubmitPrivilegeRequest, completion: @escaping (Swift.Result<WalletCoreKit.SubmittedPrivilege, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPrivilegeAnswers(privilegeId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.SurveyAnswerListResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getPrivilegeAnswerDetail(privilegeId: Swift.String, answerId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.SurveyAnswerDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct ProfileResponse : Swift.Codable {
  public let address: Swift.String?
  public let birthday: Swift.String?
  public let city: Swift.String?
  public let confirmedAt: Swift.String?
  public let countryCode: Swift.String?
  public let createdAt: Swift.String?
  public let email: Swift.String?
  public let id: Swift.String?
  public let imageUrl: Swift.String?
  public let language: Swift.String?
  public let name: Swift.String?
  public let occupation: Swift.String?
  public let phone: Swift.String?
  public let sex: Swift.String?
  public let updatedAt: Swift.String?
  public func save(keyValueStore: any WalletCoreKit.KeyValueStoreType)
  public static func load() -> WalletCoreKit.ProfileResponse?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ProfileUseCase {
  public func getProfile(completion: @escaping (Swift.Result<WalletCoreKit.ProfileResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func updateProfile(userProfile: WalletCoreKit.UpdateProfileRequest, completion: @escaping (Swift.Result<WalletCoreKit.ProfileResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Program {
  final public let id: Swift.String
  final public let productType: Swift.String
  final public let programType: Swift.String
  final public let programId: Swift.String
  final public let programName: Swift.String
  final public let active: Swift.Bool
  final public let imageUrl: Swift.String?
  final public let iconUrl: Swift.String?
  final public let enablePin: Swift.Bool
  final public let isPointProgram: Swift.Bool
  final public let pointProgramRate: Swift.Double
  final public let pointTopupRate: Swift.Double
  final public let isBalanceHide: Swift.Bool
  final public let isLevelHide: Swift.Bool
  final public let buyCatalogId: Swift.String
  final public let isConvertReward: Swift.Bool
  final public let isPromoted: Swift.Bool
  final public let promotedProgram: [Swift.String]?
  final public let isRequiredCustomerData: Swift.Bool
  final public let isCustomerDataTemplate: Swift.Bool
  final public let customerDataRules: [WalletCoreKit.CustomerDataRules]?
  final public let registrationForm: [WalletCoreKit.RegistrationForm]?
  final public let balanceExpiryType: Swift.String
  final public let allowMixPayment: Swift.Bool
  final public let enableChannelIncentive: Swift.Bool
  final public let menus: [WalletCoreKit.Menu]?
  final public let shippingFeeRule: WalletCoreKit.ShippingFeeRule?
  final public let landingPageImage: Swift.String?
  @objc deinit
}
public struct ProvinceResponse : Swift.Codable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let countryId: WalletCoreKit.WalletCoreKitAnyCodable?
  public let name: Swift.String?
  public let active: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QRISFeeResponse : Swift.Decodable {
  public let name: Swift.String?
  public let type: Swift.String?
  public let amount: Swift.Double?
  public let absorber: Swift.String?
  public static func testModel(type: Swift.Int) -> [WalletCoreKit.QRISFeeResponse]
  public init(from decoder: any Swift.Decoder) throws
}
public struct QRISInquiryResponse : Swift.Decodable {
  public let maskedCardId: Swift.String?
  public let qrCodeType: Swift.String?
  public let qrCodeValue: Swift.String?
  public let qrTransactionId: Swift.String?
  public let amount: Swift.Double?
  public let conveniencesFee: Swift.Double?
  public let adminFee: Swift.Double?
  public let merchant: WalletCoreKit.QRISInquiryResponse.Merchant?
  public let dokuData: WalletCoreKit.QRISInquiryResponse.DokuData?
  public static func testModel(type: Swift.Int) -> WalletCoreKit.QRISInquiryResponse
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.QRISInquiryResponse {
  public struct Merchant : Swift.Decodable {
    public let merchantName: Swift.String?
    public let merchantCountryCode: Swift.String?
    public let merchantCity: Swift.String?
    public let terminalId: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DokuData : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct QRISPaymentResponse : Swift.Decodable {
  public let maskedCardId: Swift.String?
  public let maskedTransactionId: Swift.String?
  public let transactionId: Swift.Int?
  public let amount: Swift.Double?
  public let conveniencesFee: Swift.Double?
  public let fee: Swift.Double?
  public let billNumber: Swift.String?
  public let referenceNumber: Swift.String?
  public let qrisApprovalCode: Swift.String?
  public let qrCodeValue: Swift.String?
  public let createdAt: Swift.String?
  public static func testModel(type: Swift.Int) -> WalletCoreKit.QRISPaymentResponse
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class QrisUseCase {
  public func qrisLinkAccount(cardId: Swift.String, completion: @escaping (Swift.Result<Swift.String, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func qrisInquiry(cardId: Swift.String, qrCodeValue: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.QRISInquiryResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func qrisGetFees(cardId: Swift.String, qrCodeValue: Swift.String, amount: Swift.Double, completion: @escaping (Swift.Result<[WalletCoreKit.QRISFeeResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func qrisPayment(cardId: Swift.String, qrCodeValue: Swift.String, amount: Swift.Double, walletId: Swift.String?, pin: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.QRISPaymentResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct RateAppRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(stars: Swift.Int, feedbacks: [Swift.String], note: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class ReceiptUseCase {
  public func scanReceipt(qrPointScan: WalletCoreKit.ScanReceiptRequest, completion: @escaping (Swift.Result<WalletCoreKit.ScanReceiptResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct RedeemAtCashierResponse : Swift.Decodable {
  public let cardNo: Swift.String?
  public let balance: Swift.Double?
  public let balanceType: Swift.String?
  public let expired: Swift.String?
  public let status: Swift.String?
  public let suspended: Swift.Bool?
  public let approvalCode: Swift.Int?
  public let merchant: Swift.String?
  public let trxNo: Swift.String?
  public let trxType: Swift.String?
  public let trxCode: Swift.String?
  public let trxStatus: Swift.String?
  public let trxAmount: Swift.Double?
  public let trxAmountType: Swift.String?
  public let trxTime: Swift.String?
  public let terminalId: Swift.Int?
  public let referralCode: Swift.String?
  public let createdAt: Swift.String?
  public let id: Swift.String?
  public let customer: WalletCoreKit.RedeemAtCashierResponse.Customer?
  public let store: WalletCoreKit.RedeemAtCashierResponse.Store?
  public let distributor: WalletCoreKit.RedeemAtCashierResponse.Distributor?
  public let paymentDetails: [WalletCoreKit.RedeemAtCashierResponse.PaymentDetails]?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.RedeemAtCashierResponse {
  public struct Customer : Swift.Decodable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let email: Swift.String?
    public let phone: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Store : Swift.Decodable {
    public let id: Swift.String?
    public let location: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Distributor : Swift.Decodable {
    public let id: Swift.String?
    public let brand: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentDetails : Swift.Decodable {
    public let id: Swift.Int
    public let transactionId: Swift.String?
    public let transactionCode: Swift.String?
    public let cardInventoryId: Swift.String?
    public let type: Swift.String?
    public let amount: Swift.Double?
    public let unitType: Swift.String?
    public let conversionRate: Swift.Double
    public let updatedAt: Swift.String?
    public let createdAt: Swift.String?
    public let rewardType: Swift.String?
    public let paymentCode: Swift.String?
    public let conversionType: Swift.String?
    public let value: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class RedeemInfo {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AllowedPayment {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RedeemInfoCoreData) public class RedeemInfoCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.RedeemInfoCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.RedeemInfoCoreData>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var item: WalletCoreKit.ItemCoreData? {
    @objc get
    @objc set
  }
}
public struct RedeemInfoRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(cardId: Swift.String, categoryVersion: Swift.String, terminalId: Swift.String, categoryId: Swift.String?, catalogType: WalletCoreKit.CatalogType = .rewardCatalog)
  public init(cardId: Swift.String, categoryVersion: Swift.String, terminalId: Swift.String, categoryIds: [Swift.String], catalogType: WalletCoreKit.CatalogType = .rewardCatalog)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct RedeemInfoResponse : Swift.Codable {
  public let allowedBalances: [WalletCoreKit.RedeemInfoResponse.AllowedBalance]?
  public let allowedWallets: [WalletCoreKit.RedeemInfoResponse.AllowedWallet]?
  public let allowedExternalPayments: [WalletCoreKit.RedeemInfoResponse.AllowedExternalPayment]?
  public let allowedMixPayment: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
  public static func testModel(type: Swift.Int) -> WalletCoreKit.RedeemInfoResponse
  public func toDomainModel() -> WalletCoreKit.RedeemInfo
  public func encode(to encoder: any Swift.Encoder) throws
}
extension WalletCoreKit.RedeemInfoResponse {
  public struct AllowedBalance : Swift.Codable, Swift.Hashable {
    public let cardNo: Swift.String?
    public let balanceName: Swift.String?
    public let balance: Swift.Double?
    public let balanceExpiryType: Swift.String?
    public let isConvertReward: Swift.Bool?
    public let suspended: Swift.Bool?
    public let expired: Swift.String?
    public let hasExpiry: Swift.Bool?
    public let isPointProgram: Swift.Bool?
    public let pointProgramRate: Swift.Double?
    public let pointTopupRate: Swift.Double?
    public let pointTopupRateType: Swift.String?
    public let balanceList: [WalletCoreKit.RedeemInfoResponse.AllowedBalance.Balance]?
    public let isValidateMinimumPointToRedeem: Swift.Bool?
    public let minimumPointToRedeem: Swift.Double?
    public let isMinimumPointToRedeemMet: Swift.Bool?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: WalletCoreKit.RedeemInfoResponse.AllowedBalance, b: WalletCoreKit.RedeemInfoResponse.AllowedBalance) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.RedeemInfoResponse {
  public struct AllowedWallet : Swift.Codable, Swift.Hashable {
    public let id: Swift.Int?
    public let CardInventoryId: Swift.Int?
    public let MerchantId: Swift.Int?
    public let distributionId: Swift.String?
    public let wallet: Swift.String?
    public let walletType: Swift.String?
    public let walletExpiryDays: Swift.Int?
    public let walletId: Swift.String?
    public let unitType: Swift.String?
    public let balance: Swift.Double?
    public let expiredAt: Swift.String?
    public let conversion: Swift.Double?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let isValidateMinimumPointToRedeem: Swift.Bool?
    public let minimumPointToRedeem: Swift.Double?
    public let isMinimumPointToRedeemMet: Swift.Bool?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: WalletCoreKit.RedeemInfoResponse.AllowedWallet, b: WalletCoreKit.RedeemInfoResponse.AllowedWallet) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.RedeemInfoResponse {
  public struct AllowedExternalPayment : Swift.Codable, Swift.Hashable {
    public let name: Swift.String?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: WalletCoreKit.RedeemInfoResponse.AllowedExternalPayment, b: WalletCoreKit.RedeemInfoResponse.AllowedExternalPayment) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.RedeemInfoResponse.AllowedBalance {
  public struct Balance : Swift.Codable, Swift.Hashable {
    public let id: Swift.Int?
    public let collectedAt: Swift.String?
    public let expiredAt: Swift.String?
    public let balance: Swift.Double?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: WalletCoreKit.RedeemInfoResponse.AllowedBalance.Balance, b: WalletCoreKit.RedeemInfoResponse.AllowedBalance.Balance) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct ReferralItem : Swift.Codable, Swift.Equatable {
  public enum ReferralStatus : Swift.String {
    case pending
    case registered
    case madeAPurchase
    case failed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let referrerId: Swift.String?
  public let phone: Swift.String?
  public let email: Swift.String?
  public let cardProgramId: Swift.Int?
  public let status: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let referralId: Swift.String?
  public let referralName: Swift.String?
  public let registeredAt: Swift.String?
  public let transactionAt: Swift.String?
  public static func == (a: WalletCoreKit.ReferralItem, b: WalletCoreKit.ReferralItem) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RegionDataResponse : Swift.Codable {
  public let countries: [WalletCoreKit.RegionDataResponse.AreaRegionDataResponse]?
  public let provinces: [WalletCoreKit.RegionDataResponse.AreaRegionDataResponse]?
  public let cities: [WalletCoreKit.RegionDataResponse.AreaRegionDataResponse]?
  public let suburbs: [WalletCoreKit.RegionDataResponse.AreaRegionDataResponse]?
  public let areas: [WalletCoreKit.RegionDataResponse.AreaRegionDataResponse]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.RegionDataResponse {
  public struct AreaRegionDataResponse : Swift.Codable {
    public let key: Swift.String?
    public let id: Swift.String?
    public let countryId: Swift.String?
    public let provinceId: Swift.String?
    public let cityId: Swift.String?
    public let suburbId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class RegionUseCase {
  public func getCountryList(completion: @escaping (Swift.Result<[WalletCoreKit.CountryResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getProvinceList(countryId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.ProvinceResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCityList(countryId: Swift.String, provinceId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.CityResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getSuburbsList(countryId: Swift.String, provinceId: Swift.String, cityId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.SuburbsResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getAreaList(countryId: Swift.String, provinceId: Swift.String, cityId: Swift.String, suburbId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.AreaResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getCitiesByCountry(countryId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.CityResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct RegisterCardDetail : WalletCoreKit.WalletCoreKitPayload {
  public init(cardNumber: Swift.String, country: Swift.String?, data: [Swift.String : Swift.String], additionalData: [Swift.String : Swift.String] = [:], additionalCheckboxData: [Swift.String : [Swift.String]], globalID: Swift.String?)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct RegisterOpenMemberResponse : Swift.Decodable {
  public let success: Swift.Bool?
  public let message: Swift.String?
  public let params: WalletCoreKit.RegisterOpenMemberResponse.Params?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.RegisterOpenMemberResponse {
  public struct Params : Swift.Decodable {
    public let cardID: Swift.String?
    public let walletID: Swift.String?
    public let cardNo: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct RegisterOpenMembershipRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(id: Swift.String, data: [Swift.String : Swift.String], additionalData: [Swift.String : Swift.String] = [:])
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class RegistrationForm : Swift.Decodable {
  final public let id: Swift.String?
  public var name: Swift.String?
  public var type: Swift.String?
  final public let additional: WalletCoreKit.Additional?
  final public let position: Swift.Int?
  public var isRequired: Swift.Bool?
  public var isReadonly: Swift.Bool?
  public var isDisabled: Swift.Bool?
  public var labels: WalletCoreKit.Labels?
  public var options: [WalletCoreKit.RegistrationOption]?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public struct RemoteConfigModels {
  public struct AppVersion : Swift.Codable {
    public let native: WalletCoreKit.RemoteConfigModels.AppVersion.AppVersionData?
    public let whitelabel: [WalletCoreKit.RemoteConfigModels.AppVersion.AppVersionData]?
    public struct AppVersionData : Swift.Codable {
      public let appVersion: Swift.Int?
      public let appLink: Swift.String?
      public let bundleId: Swift.String?
      public var shouldForceUpdate: Swift.Bool {
        get
      }
      public var minimumVersion: Swift.Int {
        get
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct SettingHere : Swift.Codable {
    public let hereId: Swift.String?
    public let hereToken: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Badge : Swift.Codable {
    public let new: [Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Config : Swift.Codable {
    public let hereWebURL: Swift.String?
    public let hereBaseURL: Swift.String?
    public let canPayWithGoPay: Swift.Bool?
    public let callCenterPhoneNumber: Swift.String?
    public let whatsappCenterPhoneNumber: Swift.String?
    public let shouldShowNotificationSettings: Swift.Bool?
    public init(hereWebURL: Swift.String?, hereBaseURL: Swift.String?, canPayWithGoPay: Swift.Bool?, callCenterPhoneNumber: Swift.String?, whatsappCenterPhoneNumber: Swift.String?, shouldShowNotificationSettings: Swift.Bool?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ExternalLink : Swift.Codable {
    public let registerMerchant: Swift.String?
    public init(registerMerchant: Swift.String?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ExternalPayment : Swift.Codable {
    public static var creditCardStripe: WalletCoreKit.RemoteConfigModels.ExternalPayment.Item {
      get
    }
    public static var creditCard: WalletCoreKit.RemoteConfigModels.ExternalPayment.Item {
      get
    }
    public static var defaultItems: [WalletCoreKit.RemoteConfigModels.ExternalPayment.Item] {
      get
    }
    public let midtrans: [WalletCoreKit.RemoteConfigModels.ExternalPayment.Item]?
    public let xendit: [WalletCoreKit.RemoteConfigModels.ExternalPayment.Item]?
    public let stripe: [WalletCoreKit.RemoteConfigModels.ExternalPayment.Item]?
    public struct Item : Swift.Codable {
      public let type: Swift.String?
      public let name: Swift.String?
      public let active: Swift.Bool
      public let channel: Swift.String?
      public let group: Swift.String?
      public let position: Swift.Int?
      public enum PaymentType {
        case bankTransfer
        case creditCard
        case gopay
        case ovo
        case dana
        case alfamart
        case unknown
        public static func == (a: WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.PaymentType, b: WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.PaymentType) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var paymentType: WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.PaymentType {
        get
      }
      public enum GroupType : Swift.String {
        case creditCard
        case eWallet
        case bankTransfer
        case retailOutlet
        case unknown
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public var groupType: WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.GroupType {
        get
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentSubscription : Swift.Codable {
    public let payment: [WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment]?
    public struct Payment : Swift.Codable {
      public let type: Swift.String?
      public let name: Swift.String?
      public let isActive: Swift.Bool?
      public let vendor: Swift.String?
      public let group: Swift.String?
      public let position: Swift.Int?
      public enum PaymentType {
        case bankTransfer
        case creditCard
        case gopay
        case ovo
        case dana
        case alfamart
        case tng
        case grabpay
        case boost
        case unknown
        public static func == (a: WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.PaymentType, b: WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.PaymentType) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var paymentType: WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.PaymentType {
        get
      }
      public enum GroupType : Swift.String {
        case creditCard
        case eWallet
        case bankTransfer
        case virtualAccount
        case ewallet
        case retailOutlet
        case unknown
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public var groupType: WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.GroupType {
        get
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct RemoveShippingAddressResponse : Swift.Codable {
  public let success: Swift.Bool?
  public let message: Swift.String?
  public let error: Swift.String?
  public let title: Swift.String?
  public let data: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScanQrUseAtCashierRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(qrCode: Swift.String, distributionId: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct ScanQrUseAtCashierResponse : Swift.Decodable {
  public let payloadFormat: Swift.String?
  public let distributorId: Swift.String?
  public let currency: Swift.String?
  public let terminalId: Swift.String?
  public let store: WalletCoreKit.ScanQrUseAtCashierResponse.Store?
  public func getTerminalDetail() -> WalletCoreKit.TerminalDetail
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.ScanQrUseAtCashierResponse {
  public struct Store : Swift.Decodable {
    public let id: Swift.Int?
    public let sId: Swift.String?
    public let location: Swift.String?
    public let coordinate: Swift.String?
    public let address: Swift.String?
    public let latitude: Swift.String?
    public let longitude: Swift.String?
    public let active: Swift.Bool?
    public let distributor: WalletCoreKit.ScanQrUseAtCashierResponse.Store.Distributor?
    public let distance: Swift.Double?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.ScanQrUseAtCashierResponse.Store {
  public struct Distributor : Swift.Decodable {
    public let id: Swift.Int?
    public let dId: Swift.String?
    public let distributorType: Swift.String?
    public let brand: Swift.String?
    public let company: Swift.String?
    public let email: Swift.String?
    public let headerColor: Swift.String?
    public let buttonColor: Swift.String?
    public let smsSender: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct ScanReceiptRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(QRCode: Swift.String, cardNumber: Swift.String?)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct ScanReceiptResponse : Swift.Decodable {
  public let qrData: WalletCoreKit.ScanReceiptResponse.QrData?
  public let program: WalletCoreKit.ScanReceiptResponse.Program?
  public let card: WalletCoreKit.ScanReceiptResponse.Card?
  public let transaction: WalletCoreKit.ScanReceiptResponse.Transaction?
  public let transactions: [WalletCoreKit.ScanReceiptResponse.Transaction]?
  public let reward: WalletCoreKit.ScanReceiptResponse.Reward?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.ScanReceiptResponse {
  public struct QrData : Swift.Decodable {
    public let id: Swift.String?
    public let ApiUserId: Swift.Int?
    public let type: Swift.String?
    public let status: Swift.String?
    public let qrCode: Swift.String?
    public let expiredAt: Swift.String?
    public let billNumber: Swift.String?
    public let amount: Swift.Double?
    public let programId: Swift.String?
    public let paymentMethod: Swift.String?
    public let cardNumber: Swift.String?
    public let items: [WalletCoreKit.ScanReceiptResponse.Item]?
    public let GCIUserId: Swift.Int?
    public let usedAt: Swift.String?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Item : Swift.Decodable {
    public let sku: Swift.String?
    public let itemName: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Program : Swift.Decodable {
    public let id: Swift.String?
    public let programId: Swift.String?
    public let programName: Swift.String?
    public let balanceName: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Card : Swift.Decodable {
    public let id: Swift.String?
    public let cardNumber: Swift.String?
    public let programName: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Transaction : Swift.Decodable {
    public let id: Swift.String?
    public let trxNo: Swift.String?
    public let trxStatus: Swift.String?
    public let trxType: Swift.String?
    public let amount: Swift.Double?
    public let point: Swift.Double?
    public let walletName: Swift.String?
    public let name: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Reward : Swift.Decodable {
    public let mId: Swift.String?
    public let merchantName: Swift.String?
    public let egiftName: Swift.String?
    public let egiftNumber: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class ScanUseCase {
  public func scanReferral(qrPointScan: WalletCoreKit.ScanReceiptRequest, completion: @escaping (Swift.Result<WalletCoreKit.ScanReceiptResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct SearchCardsResponse : Swift.Decodable {
  public let openMemberships: [WalletCoreKit.OpenMembership]?
  public let cards: [WalletCoreKit.SearchCardsEGift]?
  public let egifts: [WalletCoreKit.SearchCardsEGift]?
  public var combinedData: [WalletCoreKit.SearchCardsEGift]? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SearchCardsEGift : Swift.Decodable {
  public let id: Swift.String?
  public let walletId: Swift.String?
  public let merchantBrand: Swift.String?
  public let merchantmId: Swift.String?
  public let isMerchantActive: Swift.Bool?
  public let programName: Swift.String?
  public let programId: Swift.String?
  public let isProgramActive: Swift.Bool?
  public let productType: Swift.String?
  public let number: Swift.String?
  public let status: Swift.String?
  public let expiredAt: Swift.String?
  public let walletGroupName: Swift.String?
  public let balance: Swift.Double?
  public let balanceName: Swift.String?
  public let balanceType: Swift.String?
  public let isBalanceHide: Swift.Bool?
  public let isBalance: Swift.Bool?
  public let programIconUrl: Swift.String?
  public let programImageUrl: Swift.String?
  public let imageUrl: Swift.String?
  public let hasExpiry: Swift.Bool?
  public let programVisualAttributes: WalletCoreKit.SearchCardsEGift.ProgramVisualAttributes?
  public struct ProgramVisualAttributes : Swift.Decodable {
    public let primaryColor: Swift.String?
    public let secondaryColor: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol SectionCellViewModelType : WalletCoreKit.CellViewModelType {
  var cellViewModels: [any WalletCoreKit.CellViewModelType] { get }
}
extension WalletCoreKit.SectionCellViewModelType {
  public var rowCount: Swift.Int {
    get
  }
}
public protocol PointTransferServiceType {
  func getPointTransferSenderList(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.PointTransferSenderResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postPointTransferReceiverList(identifier: Swift.String, maskedSenderId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.PointTransferReceiverResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postPointTransferConversionAmount(senderWalletId: Swift.String, senderCardNumber: Swift.String, receiverWalletId: Swift.String, receiverCardNumber: Swift.String, amount: Swift.Double, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.PointTransferConversionResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postPointTransferOrder(payload: WalletCoreKit.PointTransferProcessRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.PointTransferProcessResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
}
public protocol MissionsActivityType {
  func postMissionActivityInitialize(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getMissionActivityList(payload: WalletCoreKit.MissionActivityListRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.MissionsListResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getMissionActivityListV1(cardNumber: Swift.String, page: Swift.Int, perPage: Swift.Int, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.MissionListResponseV1>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getMissionActivityDetail(cardId: Swift.String, missionId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.MissionsDetailResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getMissionActivityDetailV1(cardNumber: Swift.String, missionId: Swift.Int, completion: @escaping (Swift.Result<WalletCoreKit.MissionsDetailResponseV1, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getMissionActivityTaskDetail(cardId: Swift.String, missionId: Swift.String, taskId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.WalletCoreKitMissionTaskDetailResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getMissionActivityTaskDetailV1(cardNumber: Swift.String, missionId: Swift.Int, taskId: Swift.Int, completion: @escaping (Swift.Result<WalletCoreKit.MissionTaskDetailV1Response, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postMissionActivityTaskSubmission(taskSubmission: WalletCoreKit.MissionActivitySubmitRequest, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
}
public protocol OpenMembershipServiceType {
  func getOpenMembershipCategories(completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.OpenMembershipCategory>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getOpenMembershipList(payload: WalletCoreKit.OpenMembershipRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.OpenMembership>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getOpenMembershipNearMe(payload: WalletCoreKit.OpenMembershipNearbyRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.OpenMembership>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getOpenMembershipMerchantPage(merchantId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.OpenMembershipProgramResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
}
public protocol RegistrationServiceType {
  func getRegisterOpenMembershipRule(openMembershipId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.WalletCoreKitRegisterOpenMemberRules>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postRegisterOpenMembership(payload: WalletCoreKit.RegisterOpenMembershipRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.RegisterOpenMemberResponse.Params>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postAddCardDetail(request: WalletCoreKit.AddCardDetailRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitCardDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postRegisterCardDetail(request: WalletCoreKit.RegisterCardDetail, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postUpdateCardDetail(request: WalletCoreKit.RegisterCardDetail, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postCardActivation(request: WalletCoreKit.ActivationRequest, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postPreRegistration(request: WalletCoreKit.SubmitPreRegistrationRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.PreRegistrationResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getPreRegisterHistory(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int, searchQuery: Swift.String?, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.PreRegistrationHistoryResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postCheckMembership(merchantId: Swift.String, phoneNumber: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.PreRegistrationResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func postOCRKTP(imageURL: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.WalletCoreKitOCRKTPResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
}
public protocol TargetAchievementType {
  func getTargetAchievementYears(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<Swift.String>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getTargetAchievementCycles(cardId: Swift.String, year: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<Swift.String>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getTargetAchievementPeriods(cardId: Swift.String, year: Swift.String, cycle: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<Swift.String>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getTargetAchievementActivePeriod(cardId: Swift.String, cycle: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<Swift.String>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getTargetAchievementList(payload: WalletCoreKit.TargetAchievementListRequest, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseArrayResponse<WalletCoreKit.TargetAchievementListResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  func getTargetAchievementDetail(cardId: Swift.String, missionId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.WalletCoreKitBaseResponse<WalletCoreKit.TargetAchievementResponse>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
}
public struct ShippingAddress : Swift.Codable {
  public func convertToManageAddress(isDefault: Swift.Bool) -> WalletCoreKit.WalletCoreKitManageAddressRequest
  public var id: Swift.String?
  public let userId: Swift.Int?
  public let userType: Swift.String?
  public let addressType: Swift.String?
  public var recipientName: Swift.String?
  public var phone: Swift.String?
  public let address: Swift.String?
  public let zipcode: Swift.String?
  public let city: Swift.String?
  public let countryId: Swift.Int?
  public let provinceId: Swift.Int?
  public let cityId: Swift.Int?
  public let suburbId: Swift.Int?
  public let areaId: Swift.Int?
  public let isDefault: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public let latitude: Swift.String?
  public let longitude: Swift.String?
  public let country: WalletCoreKit.ShippingAddress.Country?
  public let province: WalletCoreKit.ShippingAddress.Province?
  public let cityAddress: WalletCoreKit.ShippingAddress.City?
  public let suburb: WalletCoreKit.ShippingAddress.Suburb?
  public let area: WalletCoreKit.ShippingAddress.Area?
  public static func getDefaultShippingAddress(shippingAddresses: [WalletCoreKit.ShippingAddress]) -> WalletCoreKit.ShippingAddress?
  public static func save(data: WalletCoreKit.ShippingAddress)
  public static func load() -> WalletCoreKit.ShippingAddress?
  public func requireUpdate() -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FixedShippingAddressResponse : Swift.Codable {
  public init(id: Swift.Int?, userId: Swift.Int?, userType: Swift.String?, addressType: Swift.String?, recipientName: Swift.String?, phone: Swift.String?, address: Swift.String?, zipcode: Swift.String?, city: Swift.String?, countryId: Swift.Int?, provinceId: Swift.Int?, cityId: Swift.Int?, suburbId: Swift.Int?, areaId: Swift.Int?, maskedCountryId: Swift.String?, maskedProvinceId: Swift.String?, maskedCityId: Swift.String?, maskedSuburbId: Swift.String?, maskedAreaId: Swift.String?, isDefault: Swift.Bool?, createdAt: Swift.String?, updatedAt: Swift.String?, deletedAt: Swift.String?, latitude: Swift.String?, longitude: Swift.String?)
  public let id: Swift.Int?
  public let userId: Swift.Int?
  public let userType: Swift.String?
  public let addressType: Swift.String?
  public var recipientName: Swift.String?
  public var phone: Swift.String?
  public let address: Swift.String?
  public let zipcode: Swift.String?
  public let city: Swift.String?
  public let countryId: Swift.Int?
  public let provinceId: Swift.Int?
  public let cityId: Swift.Int?
  public let suburbId: Swift.Int?
  public let areaId: Swift.Int?
  public let maskedCountryId: Swift.String?
  public let maskedProvinceId: Swift.String?
  public let maskedCityId: Swift.String?
  public let maskedSuburbId: Swift.String?
  public let maskedAreaId: Swift.String?
  public let isDefault: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public let latitude: Swift.String?
  public let longitude: Swift.String?
  public static func getDefaultShippingAddress(shippingAddresses: [WalletCoreKit.ShippingAddress]) -> WalletCoreKit.ShippingAddress?
  public static func save(data: WalletCoreKit.ShippingAddress)
  public static func load() -> WalletCoreKit.ShippingAddress?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.ShippingAddress : Swift.Equatable {
  public static func == (lhs: WalletCoreKit.ShippingAddress, rhs: WalletCoreKit.ShippingAddress) -> Swift.Bool
}
extension WalletCoreKit.ShippingAddress {
  public struct Country : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let active: Swift.Bool?
    public let code: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Province : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let active: Swift.Bool?
    public let countryId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct City : Swift.Codable {
    public init(cityId: Swift.String?)
    public let id: Swift.String?
    public let name: Swift.String?
    public let active: Swift.Bool?
    public let provinceId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Suburb : Swift.Codable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let active: Swift.Bool?
    public let cityId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Area : Swift.Codable {
    public init(areaId: Swift.String?)
    public let id: Swift.String?
    public let name: Swift.String?
    public let active: Swift.Bool?
    public let suburbId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class ShippingAddressUseCase {
  public func getUserAddresses(page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<[WalletCoreKit.ShippingAddress], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func createShippingAddress(request: WalletCoreKit.WalletCoreKitManageAddressRequest, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func updateShippingAddress(request: WalletCoreKit.WalletCoreKitManageAddressRequest, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func deleteShippingAddress(addressId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.RemoveShippingAddressResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func setPrimaryAddress(address: WalletCoreKit.ShippingAddress, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ShippingAttributeCoreData) public class ShippingAttributeCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.ShippingAttributeCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.ShippingAttributeCoreData>
  @objc @NSManaged dynamic public var categoryId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shippingName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var maximumDistance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minimumPrice: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pricePerKM: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var item: WalletCoreKit.ItemCoreData? {
    @objc get
    @objc set
  }
}
public struct ShippingFeeRule : Swift.Codable {
  public let absorber: Swift.String?
  public let unit: Swift.String?
  public let value: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShippingInfoItem : WalletCoreKit.WalletCoreKitPayload {
  public init(id: Swift.String, quantity: Swift.Int, categoryId: Swift.String, catalogCategoryId: Swift.String, variantId: Swift.String)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct ShippingInfoResponse : Swift.Decodable {
  public let eddFrom: Swift.Int?
  public let eddTo: Swift.Int?
  public let price: Swift.Double?
  public let pointProgram: Swift.Double?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShippingMethod {
  public let type: Swift.String?
  public let name: Swift.String?
  public let pointProgram: Swift.Double?
  public let price: Swift.Double
  public let minDay: Swift.Int?
  public let maxDay: Swift.Int?
}
public class ShippingOptionRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(shippingMethods: [Swift.String], total: Swift.Double, items: [WalletCoreKit.ShippingInfoItem], originCoord: Swift.String?, destinationCoord: Swift.String?, originAreaId: Swift.String?, destinationAreaId: Swift.String?, cityId: Swift.String?, programId: Swift.String?, catalogId: Swift.String?, orderType: Swift.String?, storeId: Swift.String?, payment: Swift.String?)
  public var parameters: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
public struct ShippingPriceResponse : Swift.Codable, Swift.Equatable {
  public init(type: Swift.String?, logistic: Swift.String?, shippingMethod: Swift.String?, name: Swift.String?, price: Swift.Double?, minDay: WalletCoreKit.ValueWrapper?, maxDay: WalletCoreKit.ValueWrapper?, minPrice: Swift.Double?, maxDistance: Swift.Double?, rateId: Swift.String?, cityId: Swift.Int?)
  public let type: Swift.String?
  public let logistic: Swift.String?
  public let shippingMethod: Swift.String?
  public let name: Swift.String?
  public let price: Swift.Double?
  public let minDay: WalletCoreKit.ValueWrapper?
  public let maxDay: WalletCoreKit.ValueWrapper?
  public let minPrice: Swift.Double?
  public let maxDistance: Swift.Double?
  public let rateId: Swift.String?
  public let catalogCategoryItemId: Swift.String?
  public static func == (a: WalletCoreKit.ShippingPriceResponse, b: WalletCoreKit.ShippingPriceResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShoppingCart {
  public let id: Foundation.UUID?
  public let cardNumber: Swift.String?
  public let catalogType: WalletCoreKit.CatalogType?
  public let items: [WalletCoreKit.CartItem]
}
@_inheritsConvenienceInitializers @objc(ShoppingCartCoreData) public class ShoppingCartCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.ShoppingCartCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.ShoppingCartCoreData>
  @objc @NSManaged dynamic public var cardNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cardMerchantCountryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentLevelName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var programId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isPointProgram: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isStampsProgram: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isBuyNow: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointProgramRate: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var storeId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var areaId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var items: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension WalletCoreKit.ShoppingCartCoreData {
  @objc(insertObject:inItemsAtIndex:) @NSManaged dynamic public func insertIntoItems(_ value: WalletCoreKit.ItemCoreData, at idx: Swift.Int)
  @objc(removeObjectFromItemsAtIndex:) @NSManaged dynamic public func removeFromItems(at idx: Swift.Int)
  @objc(insertItems:atIndexes:) @NSManaged dynamic public func insertIntoItems(_ values: [WalletCoreKit.ItemCoreData], at indexes: Foundation.NSIndexSet)
  @objc(removeItemsAtIndexes:) @NSManaged dynamic public func removeFromItems(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInItemsAtIndex:withObject:) @NSManaged dynamic public func replaceItems(at idx: Swift.Int, with value: WalletCoreKit.ItemCoreData)
  @objc(replaceItemsAtIndexes:withItems:) @NSManaged dynamic public func replaceItems(at indexes: Foundation.NSIndexSet, with values: [WalletCoreKit.ItemCoreData])
  @objc(addItemsObject:) @NSManaged dynamic public func addToItems(_ value: WalletCoreKit.ItemCoreData)
  @objc(removeItemsObject:) @NSManaged dynamic public func removeFromItems(_ value: WalletCoreKit.ItemCoreData)
  @objc(addItems:) @NSManaged dynamic public func addToItems(_ values: Foundation.NSOrderedSet)
  @objc(removeItems:) @NSManaged dynamic public func removeFromItems(_ values: Foundation.NSOrderedSet)
}
public struct ShopProgramResponse : Swift.Codable, Swift.Equatable {
  public static func == (lhs: WalletCoreKit.ShopProgramResponse, rhs: WalletCoreKit.ShopProgramResponse) -> Swift.Bool
  public let id: Swift.Int?
  public let programIds: [Swift.String]?
  public let storeIds: [WalletCoreKit.ValueWrapper]?
  public let name: Swift.String?
  public let active: Swift.Bool?
  public let allowUseVoucher: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShopVouchersResponse : Swift.Codable, Swift.Equatable {
  public let type: Swift.String?
  public let voucherId: Swift.String?
  public let voucherMasterId: Swift.String?
  public let voucherName: Swift.String?
  public var voucherCode: Swift.String?
  public let voucherAmount: Swift.Double?
  public let voucherType: Swift.String?
  public let voucherImage: Swift.String?
  public let voucherVisibility: Swift.String?
  public let merchantName: Swift.String?
  public let minTransaction: Swift.Double?
  public let minQuantity: Swift.Int?
  public let maxDiscount: Swift.Double?
  public let expiryAt: Swift.String?
  public let termCondition: Swift.String?
  public let quantity: Swift.Int?
  public let list: [WalletCoreKit.Voucher]?
  public var discountType: WalletCoreKit.DiscountType? {
    get
  }
  public static func == (a: WalletCoreKit.ShopVouchersResponse, b: WalletCoreKit.ShopVouchersResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Voucher : Swift.Codable, Swift.Equatable {
  public let voucherId: WalletCoreKit.WalletCoreKitAnyCodable?
  public let voucherMasterId: WalletCoreKit.WalletCoreKitAnyCodable?
  public let voucherCode: Swift.String?
  public let expiryAt: Swift.String?
  public static func == (a: WalletCoreKit.Voucher, b: WalletCoreKit.Voucher) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StoreCategory : Swift.Decodable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let label: Swift.String?
  public let position: Swift.Int?
  public init(id: Swift.String?, name: Swift.String?, label: Swift.String?, position: Swift.Int?)
  public init(from decoder: any Swift.Decoder) throws
}
public struct StoreRatingAddRatingResponse : Swift.Codable {
  public let ok: Swift.Bool?
  public let isNewMember: Swift.Bool?
  public let memberCreatedAt: Swift.String?
  public let storeRating: WalletCoreKit.StoreRatingAddRatingResponse.StoreRating?
  public let isAlreadyFilled: Swift.Bool?
  public let redirectUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.StoreRatingAddRatingResponse {
  public struct StoreRating : Swift.Codable {
    public let id: Swift.Int?
    public let storeId: Swift.Int?
    public let transactionId: Swift.Int?
    public let gciUserId: Swift.Int?
    public let rate: Swift.Int?
    public let description: Swift.String?
    public let isPending: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let type: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct StoreRatingGetInfoResponse : Swift.Codable {
  public let cardProgram: WalletCoreKit.StoreRatingGetInfoResponse.CardProgram?
  public let merchant: WalletCoreKit.StoreRatingGetInfoResponse.Merchant?
  public let merchantCurrency: WalletCoreKit.StoreRatingGetInfoResponse.MerchantCurrency?
  public let landingPage: WalletCoreKit.StoreRatingGetInfoResponse.LandingPage
  public let enableTracking: Swift.Bool?
  public let googleReviewLink: Swift.String?
  public let store: WalletCoreKit.StoreRatingGetInfoResponse.Store?
  public let isAlreadyFilledStoreRating: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.StoreRatingGetInfoResponse {
  public struct CardProgram : Swift.Codable {
    public let id: Swift.Int?
    public let programId: Swift.String?
    public let programName: Swift.String?
    public let iconUrl: Swift.String?
    public let paymentType: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Merchant : Swift.Codable {
    public let id: Swift.Int?
    public let mId: Swift.String?
    public let brand: Swift.String?
    public let iconUrl: Swift.String?
    public let countryCode: Swift.String?
    public let isDirectPayment: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct MerchantCurrency : Swift.Codable {
    public let symbol: Swift.String?
    public let name: Swift.String?
    public let code: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct LandingPage : Swift.Codable {
    public let title: Swift.String?
    public let description: Swift.String?
    public let imageUrl: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Store : Swift.Codable {
    public let location: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct StoreResponseV2 : Swift.Decodable {
  public let id: Swift.String?
  public let sId: Swift.String?
  public let location: Swift.String?
  public let address: Swift.String?
  public let isActive: Swift.Bool?
  public let latitude: Swift.String?
  public let longitude: Swift.String?
  public let coordinate: Swift.String?
  public let distance: Swift.Double?
  public let distributor: WalletCoreKit.StoreResponse.Distributor?
  public init(from decoder: any Swift.Decoder) throws
}
public struct StoreResponse : Swift.Decodable {
  public let sId: Swift.String?
  public let location: Swift.String?
  public let name: Swift.String?
  public let address: Swift.String?
  public let isActive: Swift.Bool?
  public let latitude: Swift.String?
  public let longitude: Swift.String?
  public let coordinate: Swift.String?
  public let distance: Swift.Double?
  public let distributor: WalletCoreKit.StoreResponse.Distributor?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.StoreResponse {
  public struct Distributor : Swift.Decodable {
    public let countryName: Swift.String?
    public let currency: WalletCoreKit.StoreResponse.Distributor.Currency?
    public let id: Swift.Int?
    public let dId: Swift.String?
    public let distributorType: Swift.String?
    public let name: Swift.String?
    public let company: Swift.String?
    public let brand: Swift.String?
    public let email: Swift.String?
    public let contact: Swift.String?
    public let contactPosition: Swift.String?
    public let phone: Swift.String?
    public let address: Swift.String?
    public let billingAddress: Swift.String?
    public let npwp: Swift.String?
    public let isActive: Swift.Bool?
    public let redemptionFee360Pct: Swift.Double?
    public let distributionFeePct: Swift.Double?
    public let egiftSharingFeePct: Swift.Double?
    public let isTada360: Swift.Bool?
    public let headerColor: Swift.String?
    public let buttonColor: Swift.String?
    public let iconUrl: Swift.String?
    public let smsSender: Swift.String?
    public let enablePaymentReward: Swift.Bool?
    public let MerchantId: Swift.Int?
    public let CountryCode: Swift.String?
    public let Timezone: Swift.String?
    public let config: WalletCoreKit.StoreResponse.Distributor.Config?
    public let enableStoreRating: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let visualProfile: WalletCoreKit.StoreResponse.Distributor.VisualProfile?
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.StoreResponse.Distributor {
  public struct Currency : Swift.Decodable {
    public let symbol: Swift.String?
    public let name: Swift.String?
    public let symbolNative: Swift.String?
    public let decimalDigits: Swift.Double?
    public let rounding: Swift.Double?
    public let code: Swift.String?
    public let namePlural: Swift.String?
    public let thousandSeparator: Swift.String?
    public let decimalSeparator: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Config : Swift.Decodable {
    public let useCashierPin: Swift.Bool?
    public let showOutletIconOnTada: Swift.Bool?
    public let requireBillNumber: Swift.Bool?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct VisualProfile : Swift.Decodable {
    public let id: Swift.Int?
    public let logoUrl: Swift.String?
    public let profilable: Swift.String?
    public let profilableId: Swift.Int?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public func filterAcceptedStores(_ stores: [WalletCoreKit.StoreResponse]) -> [WalletCoreKit.StoreResponse]
public func filterAcceptedStoresV2(_ stores: [WalletCoreKit.StoreResponse]) -> [WalletCoreKit.StoreResponse]
public struct StoreReviewRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(transactionID: Swift.String, rate: Swift.Int, description: Swift.String?)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class StoreUseCase {
  public func getStores(location: CoreLocation.CLLocation? = nil, programId: Swift.String? = nil, distributorId: Swift.String? = nil, brand: Swift.String? = nil, searchAddress: Swift.String? = nil, page: Swift.Int? = nil, perPage: Swift.Int? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.StoreResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
extension Swift.String {
  public func hashSHA1() -> Swift.String
  public func hashSHA512() -> Swift.String
}
public struct WalletCoreKitString {
  public enum Localization {
    public static let action_button_chat: Swift.String
    public static let action_button_food_order: Swift.String
    public static let action_button_history: Swift.String
    public static let action_button_leads: Swift.String
    public static let action_button_pay: Swift.String
    public static let action_button_redeem: Swift.String
    public static let action_button_scan_receipt: Swift.String
    public static let action_button_see_history: Swift.String
    public static let action_change_pin: Swift.String
    public static let action_delete: Swift.String
    public static let action_hide: Swift.String
    public static let action_hide_evoucher: Swift.String
    public static let action_remove_card: Swift.String
    public static let action_remove_evoucher: Swift.String
    public static let action_search: Swift.String
    public static let action_share: Swift.String
    public static let action_unhide_evoucher: Swift.String
    public static let activate_now: Swift.String
    public static let add: Swift.String
    public static let add_address: Swift.String
    public static let add_card: Swift.String
    public static let address: Swift.String
    public static let address_additional_info_placeholder: Swift.String
    public static let address_additional_info_title: Swift.String
    public static let address_information: Swift.String
    public static let address_type: Swift.String
    public static let address_type_hint: Swift.String
    public static let alert_desc_store_closed: Swift.String
    public static let alert_store_closed: Swift.String
    public static let amount: Swift.String
    public static let amount_reward: Swift.String
    public static let amount_transaction: Swift.String
    public static let approval_code: Swift.String
    public static let archive_cards_instruction: Swift.String
    public static let are_you_sure_want_to_redeem_this_e_voucher: Swift.String
    public static let bank: Swift.String
    public static let bank_account_name: Swift.String
    public static let bank_account_number: Swift.String
    public static let bank_name: Swift.String
    public static let birthday: Swift.String
    public static let birthday_inputfield_day_placeholder: Swift.String
    public static let birthday_inputfield_day_title: Swift.String
    public static let birthday_inputfield_month_placeholder: Swift.String
    public static let birthday_inputfield_month_title: Swift.String
    public static let birthday_inputfield_title: Swift.String
    public static let birthday_inputfield_year_placeholder: Swift.String
    public static let birthday_inputfield_year_title: Swift.String
    public static let btn_how_it_works: Swift.String
    public static let btn_pay_now: Swift.String
    public static let btn_register: Swift.String
    public static let btn_see_details: Swift.String
    public static let btn_show_more: Swift.String
    public static let btn_yes_exchange: Swift.String
    public static let button_add_notes: Swift.String
    public static let button_apply_settings: Swift.String
    public static let button_awesome: Swift.String
    public static let button_awesome_receipt: Swift.String
    public static let button_back: Swift.String
    public static let button_buy: Swift.String
    public static let button_buy_now: Swift.String
    public static let button_cancel: Swift.String
    public static let button_cancel_order: Swift.String
    public static let button_cant_combine_item: Swift.String
    public static let button_change_payment: Swift.String
    public static let button_change_pinpoint: Swift.String
    public static let button_check_bill: Swift.String
    public static let button_check_map_account: Swift.String
    public static let button_check_my_rewards: Swift.String
    public static let button_check_order_status: Swift.String
    public static let button_choose: Swift.String
    public static let button_claim_rewards: Swift.String
    public static let button_click_here: Swift.String
    public static let button_confirm: Swift.String
    public static let button_confirm_logout: Swift.String
    public static let button_continue: Swift.String
    public static let button_continue_payment: Swift.String
    public static let button_continue_to_payment: Swift.String
    public static let button_continue_via_email: Swift.String
    public static let button_copy: Swift.String
    public static let button_create_new_pin: Swift.String
    public static let button_daily: Swift.String
    public static let button_delete_all: Swift.String
    public static let button_discover_our_partner: Swift.String
    public static let button_done: Swift.String
    public static let button_doku_consent: Swift.String
    public static let button_enable_location: Swift.String
    public static let button_enjoy_card: Swift.String
    public static let button_enjoy_reward: Swift.String
    public static let button_exchange_now: Swift.String
    public static let button_explore_more_brands: Swift.String
    public static let button_finish: Swift.String
    public static let button_get: Swift.String
    public static let button_get_card: Swift.String
    public static let button_give_us_feedback: Swift.String
    public static let button_got_it: Swift.String
    public static let button_havent_receive_pass_code: Swift.String
    public static let button_hide_card: Swift.String
    public static let button_hide_details: Swift.String
    public static let button_inbox_see_more: Swift.String
    public static let button_learn_more: Swift.String
    public static let button_let_s_try: Swift.String
    public static let button_off: Swift.String
    public static let button_ok: Swift.String
    public static let button_okay: Swift.String
    public static let button_on: Swift.String
    public static let button_open: Swift.String
    public static let button_open_voucher: Swift.String
    public static let button_order_online: Swift.String
    public static let button_process: Swift.String
    public static let button_read_all: Swift.String
    public static let button_redeem: Swift.String
    public static let button_redeem_now: Swift.String
    public static let button_redeem_e_voucher: Swift.String
    public static let button_refer_more: Swift.String
    public static let button_refer_more_friend: Swift.String
    public static let button_refer_now: Swift.String
    public static let button_remove_card: Swift.String
    public static let button_renew: Swift.String
    public static let button_renew_now: Swift.String
    public static let button_request_join_membership: Swift.String
    public static let button_resend_pass_code: Swift.String
    public static let button_reset: Swift.String
    public static let button_save_address: Swift.String
    public static let button_see_all: Swift.String
    public static let button_see_all_location: Swift.String
    public static let button_see_transaction_details: Swift.String
    public static let button_see_details: Swift.String
    public static let button_see_less: Swift.String
    public static let button_see_mission_detail: Swift.String
    public static let button_see_rewards: Swift.String
    public static let button_see_your_reward: Swift.String
    public static let button_select: Swift.String
    public static let button_sell_now: Swift.String
    public static let button_sell_this: Swift.String
    public static let button_set_primary: Swift.String
    public static let button_show_code: Swift.String
    public static let button_skip: Swift.String
    public static let button_sms: Swift.String
    public static let button_start: Swift.String
    public static let button_start_selling: Swift.String
    public static let button_statistics: Swift.String
    public static let button_subscribe: Swift.String
    public static let button_subscribe_now: Swift.String
    public static let button_switch: Swift.String
    public static let button_switch_to_sms: Swift.String
    public static let button_switch_to_whatsapp: Swift.String
    public static let button_tap_to_refresh_ios: Swift.String
    public static let button_track: Swift.String
    public static let button_track_order: Swift.String
    public static let button_try_again: Swift.String
    public static let button_unhide_card: Swift.String
    public static let button_update: Swift.String
    public static let button_use: Swift.String
    public static let button_use_later: Swift.String
    public static let button_use_now: Swift.String
    public static let button_use_reward: Swift.String
    public static let button_view: Swift.String
    public static let button_view_my_wallet: Swift.String
    public static let button_weekly: Swift.String
    public static let button_whatsapp: Swift.String
    public static let buyback_amount: Swift.String
    public static let buyback_formula_note: Swift.String
    public static let buyback_formula_note_alternative: Swift.String
    public static let buyback_not_allowed: Swift.String
    public static let buyback_now: Swift.String
    public static let buyback_on_progress: Swift.String
    public static let buyback_tax_fee_notice: Swift.String
    public static let call_center: Swift.String
    public static let camera: Swift.String
    public static let cancel: Swift.String
    public static let caption_ask_for_help_via_whatsapp: Swift.String
    public static let caption_customer_number: Swift.String
    public static let caption_meter_number: Swift.String
    public static let card: Swift.String
    public static let card_balance: Swift.String
    public static let card_balance_after_buyback_note: Swift.String
    public static let card_number: Swift.String
    public static let change_address: Swift.String
    public static let change_photo: Swift.String
    public static let change_pin: Swift.String
    public static let charge_fee_description: Swift.String
    public static let city_hint: Swift.String
    public static let claim_rewards_success_message: Swift.String
    public static let claim_rewards: Swift.String
    public static let claim_rewards_form_code_hint_alfamart: Swift.String
    public static let claim_rewards_form_number_hint_alfamart: Swift.String
    public static let claim_rewards_form_number_hint_shopee: Swift.String
    public static let claim_rewards_form_number_hint_tokopedia: Swift.String
    public static let claim_rewards_informational_message: Swift.String
    public static let claim_rewards_tutorial_title: Swift.String
    public static let claim_rewards_tutorial_subtitle: Swift.String
    public static let claim_rewards_select_purchase_location: Swift.String
    public static let claim_rewards_tutorial_1: Swift.String
    public static let claim_rewards_tutorial_2: Swift.String
    public static let claim_rewards_tutorial_3: Swift.String
    public static let claim_reward_tutorial_1: Swift.String
    public static let claim_reward_tutorial_2: Swift.String
    public static let claim_reward_tutorial_3: Swift.String
    public static let claim_rewards_instruction_tokopedia_1: Swift.String
    public static let claim_rewards_instruction_tokopedia_2: Swift.String
    public static let claim_rewards_instruction_tokopedia_3: Swift.String
    public static let claim_rewards_instruction_tokopedia_4: Swift.String
    public static let claim_rewards_instruction_shopee_1: Swift.String
    public static let claim_rewards_instruction_shopee_2: Swift.String
    public static let claim_rewards_instruction_shopee_3: Swift.String
    public static let claim_rewards_instruction_shopee_4: Swift.String
    public static let claim_rewards_instruction_shopee_5: Swift.String
    public static let claim_rewards_instruction_alfamart: Swift.String
    public static let claim_rewards_purchase_location: Swift.String
    public static let claim_rewards_instruction_help_text: Swift.String
    public static let claim_rewards_instruction_help_text_interaction: Swift.String
    public static let close: Swift.String
    public static let contact_us_help: Swift.String
    public static let contact_us_more_help: Swift.String
    public static let content_bill_not_found: Swift.String
    public static let content_info_cancel_subscription: Swift.String
    public static let content_info_pending_membership: Swift.String
    public static let content_info_pending_payment: Swift.String
    public static let content_remind_refer_your_friends: Swift.String
    public static let content_success_locked_membership: Swift.String
    public static let copy_code: Swift.String
    public static let copy_number: Swift.String
    public static let date: Swift.String
    public static let default_here_place_name: Swift.String
    public static let default_here_place_type: Swift.String
    public static let default_notification_title: Swift.String
    public static let delete_description: Swift.String
    public static let delete_title: Swift.String
    public static let desc_account_locked: Swift.String
    public static let desc_cannot_combine_items: Swift.String
    public static let desc_contact_us_to_unlock: Swift.String
    public static let desc_payment_total: Swift.String
    public static let desc_unique_code_lock: Swift.String
    public static let desc_select_garuda_miles_account: Swift.String
    public static let desc_target_and_achievement: Swift.String
    public static let desc_locked_claim_rewards: Swift.String
    public static let desc_locked_scan: Swift.String
    public static let description: Swift.String
    public static let description_cancel_order: Swift.String
    public static let description_card_inactive: Swift.String
    public static let description_processing_request: Swift.String
    public static let description_qr_code: Swift.String
    public static let description_qr_code_note: Swift.String
    public static let description_reward_used_by_delivery_order: Swift.String
    public static let description_terms_and_privacy: Swift.String
    public static let description_terms_and_privacy_simple: Swift.String
    public static let description_terms_and_privacy_qris: Swift.String
    public static let description_terms_and_privacy_by_continuing_custom: Swift.String
    public static let descriptions: Swift.String
    public static let details: Swift.String
    public static let dialog_are_you_sure_to_submit_answer: Swift.String
    public static let dialog_code_already_taken: Swift.String
    public static let dialog_code_expired: Swift.String
    public static let dialog_code_suspended: Swift.String
    public static let dialog_code_pending: Swift.String
    public static let dialog_confirmation_exchange: Swift.String
    public static let dialog_confirmation_exchange_updated: Swift.String
    public static let dialog_confirmation_exchange_updated_new: Swift.String
    public static let dialog_content_choose_payment_method: Swift.String
    public static let dialog_content_hide_wallet: Swift.String
    public static let dialog_content_input_data: Swift.String
    public static let dialog_content_no_internet: Swift.String
    public static let dialog_content_remove_wallet: Swift.String
    public static let dialog_content_remove_e_voucher: Swift.String
    public static let dialog_content_unarchive_card: Swift.String
    public static let dialog_force_update_content: Swift.String
    public static let dialog_force_update_title: Swift.String
    public static let dialog_title_complete_order: Swift.String
    public static let dialog_subtitle_approval_required_order: Swift.String
    public static let dialog_title_confirmation: Swift.String
    public static let dialog_title_hide: Swift.String
    public static let dialog_title_logout: Swift.String
    public static let dialog_title_remove: Swift.String
    public static let dialog_title_unarchive: Swift.String
    public static let dialog_update_content: Swift.String
    public static let dialog_update_title: Swift.String
    public static let dialog_your_answer_has_been_submitted: Swift.String
    public static let donate: Swift.String
    public static let download_later: Swift.String
    public static let download_now: Swift.String
    public static let ENCOURAGE: Swift.String
    public static let edit: Swift.String
    public static let edit_profile: Swift.String
    public static let egift: Swift.String
    public static let email: Swift.String
    public static let email_center: Swift.String
    public static let email_input_disabled_message: Swift.String
    public static let email_input_information_message: Swift.String
    public static let empty_cart_warning: Swift.String
    public static let empty_shop_store_list: Swift.String
    public static let empty_state_address: Swift.String
    public static let empty_state_leads_history_approved: Swift.String
    public static let empty_state_leads_history_approved_desc: Swift.String
    public static let empty_state_leads_history_pending: Swift.String
    public static let empty_state_leads_history_pending_desc: Swift.String
    public static let empty_state_leads_history_rejected: Swift.String
    public static let empty_state_leads_history_rejected_desc: Swift.String
    public static let empty_state_leads_homepage: Swift.String
    public static let empty_state_leads_homepage_desc: Swift.String
    public static let empty_state_mission_history: Swift.String
    public static let empty_state_mission_history_desc: Swift.String
    public static let empty_state_mission_history_desc_filter: Swift.String
    public static let empty_state_mission_history_filter: Swift.String
    public static let empty_state_search_card: Swift.String
    public static let enter_country_name: Swift.String
    public static let error_address_require_update: Swift.String
    public static let error_balance_not_sufficient: Swift.String
    public static let error_delivery_location_not_covered: Swift.String
    public static let error_empty_form: Swift.String
    public static let error_fill_field: Swift.String
    public static let error_future_bithday_date: Swift.String
    public static let error_field_numeric_only: Swift.String
    public static let error_garuda_miles_member_not_active: Swift.String
    public static let error_garuda_miles_member_not_found: Swift.String
    public static let error_invalid_phone_number: Swift.String
    public static let error_invalid_phone_operator: Swift.String
    public static let error_invalid_date: Swift.String
    public static let error_message_inbox_perk_not_active: Swift.String
    public static let error_minimum_to_be_converted_value: Swift.String
    public static let error_mixed_payment_balance_not_sufficent: Swift.String
    public static let error_mixed_payment_not_supported: Swift.String
    public static let error_mixed_payments_cant_combine: Swift.String
    public static let error_name_contains_numeric: Swift.String
    public static let error_name_alphabet: Swift.String
    public static let error_name_alphanumeric: Swift.String
    public static let error_no_payment_method: Swift.String
    public static let error_no_shipping_method: Swift.String
    public static let error_payment_no_shipment: Swift.String
    public static let error_payment_not_sufficent: Swift.String
    public static let error_phone_number_invalid: Swift.String
    public static let error_response: Swift.String
    public static let error_something_went_wrong_try_again_or_contact_us: Swift.String
    public static let error_scan_qris_max_amount: Swift.String
    public static let error_timeout: Swift.String
    public static let error_qr_code_not_recognized: Swift.String
    public static let error_qr_code_remaining_attempt: Swift.String
    public static let error_upload_file_size: Swift.String
    public static let error_upload_image_size: Swift.String
    public static let error_you_can_only_put_the_number_between_x_until_y: Swift.String
    public static let error_voucher_not_exist: Swift.String
    public static let error_wrong_pass_code_attempt: Swift.String
    public static let error_number_not_found: Swift.String
    public static let error_xxx_not_found: Swift.String
    public static let expired_on: Swift.String
    public static let FRIEND_REGISTERED: Swift.String
    public static let failed_upload_photo: Swift.String
    public static let fee: Swift.String
    public static let female: Swift.String
    public static let full_address_hint: Swift.String
    public static let gallery: Swift.String
    public static let gender: Swift.String
    public static let hello: Swift.String
    public static let hidden_cards: Swift.String
    public static let hidden_description: Swift.String
    public static let hidden_title: Swift.String
    public static let hide_card: Swift.String
    public static let hint_bank_account_holder: Swift.String
    public static let hint_bank_account_number: Swift.String
    public static let hint_city: Swift.String
    public static let hint_customer_number: Swift.String
    public static let hint_enter_notes: Swift.String
    public static let hint_enter_shipping_address: Swift.String
    public static let hint_full_name: Swift.String
    public static let hint_input_feedback: Swift.String
    public static let hint_input_phone_number: Swift.String
    public static let hint_meter_number_customer_id: Swift.String
    public static let hint_notes: Swift.String
    public static let hint_openmembership_search_cards_or_brands: Swift.String
    public static let hint_search_any: Swift.String
    public static let hint_search_bank: Swift.String
    public static let hint_search_cards_or_brands: Swift.String
    public static let hint_search_catalog: Swift.String
    public static let hint_search_shop_store: Swift.String
    public static let hint_search_stores: Swift.String
    public static let hint_search_voucher_or_brands: Swift.String
    public static let hint_sender_phone_number: Swift.String
    public static let hint_transaction_number_18_digits: Swift.String
    public static let hint_type_your_answer: Swift.String
    public static let hint_type_your_suggestion_here: Swift.String
    public static let hint_voucher_promo_search: Swift.String
    public static let hint_withdrawal_amount: Swift.String
    public static let important_label: Swift.String
    public static let in_case_need_to_contact: Swift.String
    public static let info: Swift.String
    public static let info_amount_must_be_multiple_of_x: Swift.String
    public static let info_card_pdr_get_high_reward_or_lower_reward: Swift.String
    public static let info_card_pdr_get_highest_reward: Swift.String
    public static let info_card_pdr_keep_high_reward: Swift.String
    public static let info_card_pdr_welcome_reward: Swift.String
    public static let info_drag_map_to_location_you_want: Swift.String
    public static let info_highest_level: Swift.String
    public static let info_pdam_bill: Swift.String
    public static let info_point_will_be_recieved_2x24: Swift.String
    public static let info_progress_level: Swift.String
    public static let info_progress_level_by: Swift.String
    public static let info_progress_level_collect: Swift.String
    public static let info_progress_level_collect_full: Swift.String
    public static let info_progress_level_full: Swift.String
    public static let info_progress_level_wait: Swift.String
    public static let info_pulsa_postpaid: Swift.String
    public static let info_pln_postpaid: Swift.String
    public static let info_retention_level: Swift.String
    public static let info_retention_level_collect: Swift.String
    public static let info_retention_level_collect_date: Swift.String
    public static let info_retention_level_date: Swift.String
    public static let info_retention_maintained: Swift.String
    public static let info_shop_operating_hour: Swift.String
    public static let info_success_add_card: Swift.String
    public static let info_success_add_to_cart: Swift.String
    public static let info_tooltip_cvv: Swift.String
    public static let info_wallet_voucher_list: Swift.String
    public static let info_you_have_this_card: Swift.String
    public static let input_email_subtitle: Swift.String
    public static let input_email_title: Swift.String
    public static let input_minimum_transaction: Swift.String
    public static let input_your_phone_number: Swift.String
    public static let invalid_email_format: Swift.String
    public static let invalid_phone_format: Swift.String
    public static let item: Swift.String
    public static let item_order: Swift.String
    public static let you_haven_t_any_items_yet: Swift.String
    public static let label_repeat_new_pass_code: Swift.String
    public static let label_rounding_adjustment: Swift.String
    public static let label_about_the_role: Swift.String
    public static let label_achievement: Swift.String
    public static let label_activating_card: Swift.String
    public static let label_active: Swift.String
    public static let label_add_by_card_number: Swift.String
    public static let label_add_more_item: Swift.String
    public static let label_add_to_cart: Swift.String
    public static let label_add_to_your_home_screen: Swift.String
    public static let label_add_image: Swift.String
    public static let label_additional_fee: Swift.String
    public static let label_address_search_current_location: Swift.String
    public static let label_adjustment_amount: Swift.String
    public static let label_admin_fee: Swift.String
    public static let label_after: Swift.String
    public static let label_alfamart_redeem_guide: Swift.String
    public static let label_all_card_displayed: Swift.String
    public static let label_allow_access: Swift.String
    public static let label_answer_under_review: Swift.String
    public static let label_approved: Swift.String
    public static let label_are_you_sure: Swift.String
    public static let label_area: Swift.String
    public static let label_ask_email_for_payment: Swift.String
    public static let label_available_for: Swift.String
    public static let label_available_for_redemption: Swift.String
    public static let label_available_for_value: Swift.String
    public static let label_waiting_for_approval: Swift.String
    public static let label_water_provider: Swift.String
    public static let label_waiting_for_courier_update: Swift.String
    public static let label_waiting_for_courier_update_tracking_detail: Swift.String
    public static let label_balance: Swift.String
    public static let label_balance_expired: Swift.String
    public static let label_balance_expired_on: Swift.String
    public static let label_balance_expired_on_ios: Swift.String
    public static let label_balance_inactive: Swift.String
    public static let label_balance_not_enough_for_transaction: Swift.String
    public static let label_balance_redeemed: Swift.String
    public static let label_balance_suspended: Swift.String
    public static let label_balance_will_expired_on: Swift.String
    public static let label_balance_will_expired_on_ios: Swift.String
    public static let label_balancedetail_title_middle: Swift.String
    public static let label_balancedetail_title_prefix: Swift.String
    public static let label_bank_tranfer_manual: Swift.String
    public static let label_barcode: Swift.String
    public static let label_become_premium_member: Swift.String
    public static let label_become_premium_member_to_enjoy_offer: Swift.String
    public static let label_before: Swift.String
    public static let label_begin_search: Swift.String
    public static let label_bill_amount: Swift.String
    public static let label_billing_recurring_info: Swift.String
    public static let label_billing_recurring_info_bold: Swift.String
    public static let label_blibli_redeem_guide: Swift.String
    public static let label_biometric_register_faceid_caption: Swift.String
    public static let label_biometric_register_faceid_title: Swift.String
    public static let label_biometric_register_touchid_caption: Swift.String
    public static let label_biometric_register_touchid_title: Swift.String
    public static let label_biometric_popup_faceid_title: Swift.String
    public static let label_biometric_popup_touchid_title: Swift.String
    public static let label_biometric_scan_faceid: Swift.String
    public static let label_biometric_scan_touchid: Swift.String
    public static let label_brand_location: Swift.String
    public static let label_buyback_id: Swift.String
    public static let label_buyback_is_not_allowed: Swift.String
    public static let label_buyback_is_on_process: Swift.String
    public static let label_buyback_status: Swift.String
    public static let label_bpjs_card_number: Swift.String
    public static let label_bpjs_info_text: Swift.String
    public static let label_by_params: Swift.String
    public static let label_call: Swift.String
    public static let label_call_center: Swift.String
    public static let label_call_tada_phone: Swift.String
    public static let label_call_us: Swift.String
    public static let label_can_be_redeemed_at: Swift.String
    public static let label_cancel_subscription: Swift.String
    public static let label_cancel_subscription_desc: Swift.String
    public static let label_cancel_subscription_miss_you: Swift.String
    public static let label_cancel_subscription_recurring: Swift.String
    public static let label_cannot_be_used_yet: Swift.String
    public static let label_card_acceptance_section_subtitle: Swift.String
    public static let label_card_archived_info: Swift.String
    public static let label_card_detail_franchise: Swift.String
    public static let label_card_detail_member_get_lead: Swift.String
    public static let label_card_store_location: Swift.String
    public static let label_card_successfully_added: Swift.String
    public static let label_cash_on_delivery: Swift.String
    public static let label_challenge: Swift.String
    public static let label_challenge_completion: Swift.String
    public static let label_challenge_failed_retry_subtitle: Swift.String
    public static let label_challenge_failed_subtitle: Swift.String
    public static let label_challenge_pending_subtitle: Swift.String
    public static let label_challenge_success_subtitle: Swift.String
    public static let label_change: Swift.String
    public static let label_change_file: Swift.String
    public static let label_change_image: Swift.String
    public static let label_chat: Swift.String
    public static let label_chat_only: Swift.String
    public static let label_chat_us: Swift.String
    public static let label_check_settings: Swift.String
    public static let label_choose_city: Swift.String
    public static let label_choose_payment_method: Swift.String
    public static let label_choose_point_or_balance: Swift.String
    public static let label_choose_shipping: Swift.String
    public static let label_choose_shipping_method: Swift.String
    public static let label_city_empty_subtitle: Swift.String
    public static let label_city_empty_title: Swift.String
    public static let label_claim_rewards_order_id: Swift.String
    public static let label_click_here_open_membership: Swift.String
    public static let label_click_to_see_details: Swift.String
    public static let label_clicks: Swift.String
    public static let label_code_invalid: Swift.String
    public static let label_commision: Swift.String
    public static let label_complete_payment_in: Swift.String
    public static let label_complete_the_form: Swift.String
    public static let label_completed: Swift.String
    public static let label_congratulations: Swift.String
    public static let label_contact_concierge: Swift.String
    public static let label_contact_customer_service: Swift.String
    public static let label_contact_person: Swift.String
    public static let label_contact_us: Swift.String
    public static let label_contact_us_for_otp: Swift.String
    public static let label_content_lock_authentication: Swift.String
    public static let label_content_lock_otp: Swift.String
    public static let label_convenience_fee: Swift.String
    public static let label_copy_link: Swift.String
    public static let label_country_title: Swift.String
    public static let label_courier: Swift.String
    public static let label_courier_plain: Swift.String
    public static let label_credit_card_payment_auto_renewal_subtitle: Swift.String
    public static let label_credit_card_payment_auto_renewal_title: Swift.String
    public static let label_current_level: Swift.String
    public static let label_current_miles: Swift.String
    public static let label_customer_id: Swift.String
    public static let label_customer_name: Swift.String
    public static let label_currency_rp: Swift.String
    public static let label_customer_number: Swift.String
    public static let label_days: Swift.String
    public static let label_delete_account_note_one: Swift.String
    public static let label_delete_account_note_two: Swift.String
    public static let label_delete_account_note_three: Swift.String
    public static let label_delete_account_title: Swift.String
    public static let label_delete_account_subtitle: Swift.String
    public static let label_deleted_account: Swift.String
    public static let label_deleted_account_desc: Swift.String
    public static let label_delivery_address: Swift.String
    public static let label_delivery_order: Swift.String
    public static let label_device_pairing_blocked: Swift.String
    public static let label_discount: Swift.String
    public static let label_district: Swift.String
    public static let label_district_empty_title: Swift.String
    public static let label_district_hint: Swift.String
    public static let label_district_search: Swift.String
    public static let label_do_you_have_anymore_suggestions: Swift.String
    public static let label_doku_id: Swift.String
    public static let label_donation_email_required: Swift.String
    public static let label_driver: Swift.String
    public static let label_driver_name: Swift.String
    public static let label_e_voucher: Swift.String
    public static let label_e_voucher_code: Swift.String
    public static let label_e_voucher_name: Swift.String
    public static let label_e_voucher_suspended: Swift.String
    public static let label_e_voucher_inactive: Swift.String
    public static let label_e_wallet: Swift.String
    public static let label_electricity_token: Swift.String
    public static let label_edit_profile_success: Swift.String
    public static let label_empty_open_membership: Swift.String
    public static let label_empty_referral_history: Swift.String
    public static let label_end_on_date: Swift.String
    public static let label_enjoy_member_benefits: Swift.String
    public static let label_enjoy_your_benefit: Swift.String
    public static let label_ensure_your_phone_is_active_to_receive_verification_code: Swift.String
    public static let label_enter_card_digit: Swift.String
    public static let label_enter_new_pass_code: Swift.String
    public static let label_enter_pass_code: Swift.String
    public static let label_error_not_found: Swift.String
    public static let label_estimation_delivery: Swift.String
    public static let label_estimation_delivery_single: Swift.String
    public static let label_evoucher: Swift.String
    public static let label_evoucher_external_code: Swift.String
    public static let label_evouchers_available: Swift.String
    public static let label_exchange_to: Swift.String
    public static let label_exclusive_offer_for_you: Swift.String
    public static let label_exceed_topup_limit: Swift.String
    public static let label_exp: Swift.String
    public static let label_expire_date: Swift.String
    public static let label_expires_on: Swift.String
    public static let label_expiring_in: Swift.String
    public static let label_expiring_in_value: Swift.String
    public static let label_explore_brands: Swift.String
    public static let label_ewallet_not_found_title: Swift.String
    public static let label_ewallet_not_found_desc: Swift.String
    public static let label_facebook: Swift.String
    public static let label_facebook_messanger: Swift.String
    public static let label_failed: Swift.String
    public static let label_form_customer_read_only: Swift.String
    public static let label_free: Swift.String
    public static let label_friend_encourage_make_purchase: Swift.String
    public static let label_friend_registered: Swift.String
    public static let label_from: Swift.String
    public static let label_final_balance: Swift.String
    public static let label_get_rewards: Swift.String
    public static let label_get_rewards_info_alfa: Swift.String
    public static let label_get_rewards_title: Swift.String
    public static let label_gopay: Swift.String
    public static let label_gram: Swift.String
    public static let label_have_not_received_verification_code: Swift.String
    public static let label_hang_tight: Swift.String
    public static let label_handling_fee: Swift.String
    public static let label_help_center: Swift.String
    public static let label_here_suggestion: Swift.String
    public static let label_how_do_you_use_your_reward: Swift.String
    public static let label_hint_eg: Swift.String
    public static let label_id_customer: Swift.String
    public static let label_id_card_must_be_visible: Swift.String
    public static let label_in_store: Swift.String
    public static let label_internal_redeem_guide: Swift.String
    public static let label_inactive: Swift.String
    public static let label_info_upload: Swift.String
    public static let label_info_fixed_shipping_address: Swift.String
    public static let label_info_point_exchange: Swift.String
    public static let label_info_redemption_limit: Swift.String
    public static let label_info_redeem_external_instore_only: Swift.String
    public static let label_info_redeem_external_instore_online: Swift.String
    public static let label_input_cashier_code: Swift.String
    public static let label_input_garuda_miles_number: Swift.String
    public static let label_input_phone_number: Swift.String
    public static let label_input_pin: Swift.String
    public static let label_input_amount_between: Swift.String
    public static let label_input_topup_amount: Swift.String
    public static let label_insufficient_balance: Swift.String
    public static let label_insufficient_minimum_voucher_subtitle: Swift.String
    public static let label_insufficient_minimum_voucher_title: Swift.String
    public static let label_insurance_fee: Swift.String
    public static let label_invoice_number: Swift.String
    public static let label_item_sold: Swift.String
    public static let label_item_stock: Swift.String
    public static let label_items: Swift.String
    public static let label_items_qty: Swift.String
    public static let label_items_selected: Swift.String
    public static let label_join_now: Swift.String
    public static let label_kilogram: Swift.String
    public static let label_last_billing_date: Swift.String
    public static let label_last_transaction: Swift.String
    public static let label_later: Swift.String
    public static let label_let_cashier_scan: Swift.String
    public static let label_let_s_get_started: Swift.String
    public static let label_level_benefit: Swift.String
    public static let label_level_up_rewards: Swift.String
    public static let label_line: Swift.String
    public static let label_linkedin: Swift.String
    public static let label_looking_for_more_cards: Swift.String
    public static let label_looking_for_this_brand: Swift.String
    public static let label_make_sure_id_card_fits: Swift.String
    public static let label_make_sure_your_id_card: Swift.String
    public static let label_make_sure_valid_id_card: Swift.String
    public static let label_make_sure_your_number_is_active: Swift.String
    public static let label_make_sure_your_phone_number_is_right: Swift.String
    public static let label_make_sure_your_xxx_is_correct: Swift.String
    public static let label_manage_shipping_address: Swift.String
    public static let label_map_club: Swift.String
    public static let label_map_club_app: Swift.String
    public static let label_map_club_app_information: Swift.String
    public static let label_max_discount: Swift.String
    public static let label_max_one_hour: Swift.String
    public static let label_max_six_hours: Swift.String
    public static let label_maximum_price: Swift.String
    public static let label_maximum_shipping_distance: Swift.String
    public static let label_member_get_lead_detail_reward_caption: Swift.String
    public static let label_member_get_lead_search_caption: Swift.String
    public static let label_member_get_reward_other_rewards: Swift.String
    public static let label_menu_get_rewards_popup_subtitle: Swift.String
    public static let label_merchant: Swift.String
    public static let label_meter_number: Swift.String
    public static let label_method: Swift.String
    public static let label_min_amount_is: Swift.String
    public static let label_min_cvv_chars: Swift.String
    public static let label_min_transaction: Swift.String
    public static let label_minimum_characters: Swift.String
    public static let label_minimum_price: Swift.String
    public static let label_minimum_shipping_price: Swift.String
    public static let label_mission: Swift.String
    public static let label_mission_achieved: Swift.String
    public static let label_mission_detail_statistic_monthly_achievement_in_period: Swift.String
    public static let label_mission_detail_statistic_quarterly_achievement_in_period: Swift.String
    public static let label_mission_end_date: Swift.String
    public static let label_mission_period: Swift.String
    public static let label_mission_reward: Swift.String
    public static let label_mission_target: Swift.String
    public static let label_mixed_payments_combine_toast_message: Swift.String
    public static let label_mobile_app: Swift.String
    public static let label_month: Swift.String
    public static let label_month_year: Swift.String
    public static let label_monthly_target: Swift.String
    public static let label_more: Swift.String
    public static let label_multiple_items: Swift.String
    public static let label_my_account: Swift.String
    public static let label_must_consist_character: Swift.String
    public static let label_my_benefits: Swift.String
    public static let label_my_card: Swift.String
    public static let label_my_e_voucher_empty_subtitle: Swift.String
    public static let label_my_e_voucher_empty_title: Swift.String
    public static let label_my_referral_summary: Swift.String
    public static let label_my_rewards: Swift.String
    public static let label_my_voucher_section_subtitle: Swift.String
    public static let label_my_vouchers: Swift.String
    public static let label_nearest_expiry_on: Swift.String
    public static let label_need_approval: Swift.String
    public static let label_new: Swift.String
    public static let label_next_billing: Swift.String
    public static let label_next_billing_date: Swift.String
    public static let label_next_billing_on: Swift.String
    public static let label_next_payment_on: Swift.String
    public static let label_no_expiry: Swift.String
    public static let label_notification_settings_information: Swift.String
    public static let label_notes: Swift.String
    public static let label_number: Swift.String
    public static let label_official_store: Swift.String
    public static let label_oops: Swift.String
    public static let label_open_camera: Swift.String
    public static let label_open_file: Swift.String
    public static let label_open_my_voucher: Swift.String
    public static let label_open_membership_banner_text_all: Swift.String
    public static let label_open_membership_banner_text_beauty: Swift.String
    public static let label_open_membership_banner_text_education: Swift.String
    public static let label_open_membership_banner_text_fashion: Swift.String
    public static let label_open_membership_banner_text_food: Swift.String
    public static let label_open_membership_banner_text_hotel: Swift.String
    public static let label_open_membership_banner_text_near_me: Swift.String
    public static let label_open_membership_banner_text_others: Swift.String
    public static let label_open_membership_banner_text_popular: Swift.String
    public static let label_open_membership_banner_text_reseller: Swift.String
    public static let label_open_membership_near_me: Swift.String
    public static let label_open_membership_near_me_location_request_subtitle: Swift.String
    public static let label_open_membership_near_me_location_request_title: Swift.String
    public static let label_or_share_sms: Swift.String
    public static let label_or_input_unique_code: Swift.String
    public static let label_or_input_amount: Swift.String
    public static let label_order: Swift.String
    public static let label_order_no: Swift.String
    public static let label_order_details: Swift.String
    public static let label_order_id: Swift.String
    public static let label_order_summary_contact_infornation: Swift.String
    public static let label_order_pln_mandatory_message: Swift.String
    public static let label_other: Swift.String
    public static let label_other_bank: Swift.String
    public static let label_out_of_stock: Swift.String
    public static let label_pay: Swift.String
    public static let label_paid_membership: Swift.String
    public static let label_payment: Swift.String
    public static let label_payment_alfamart: Swift.String
    public static let label_payment_bank_transfer: Swift.String
    public static let label_payment_credit_card: Swift.String
    public static let label_payment_dana: Swift.String
    public static let label_payment_gopay: Swift.String
    public static let label_payment_linkaja: Swift.String
    public static let label_payment_method: Swift.String
    public static let label_payment_mobile_banking: Swift.String
    public static let label_payment_online_banking: Swift.String
    public static let label_payment_ovo: Swift.String
    public static let label_payment_point_or_balance: Swift.String
    public static let label_payment_qris: Swift.String
    public static let label_payment_shopeepay: Swift.String
    public static let label_payment_success: Swift.String
    public static let label_payment_success_information: Swift.String
    public static let label_payment_successful: Swift.String
    public static let label_pdr_reward_already_used: Swift.String
    public static let label_pdr_reward_available_tomorrow: Swift.String
    public static let label_pending: Swift.String
    public static let label_period: Swift.String
    public static let label_perk_referral_success_subtitle: Swift.String
    public static let label_perks_card: Swift.String
    public static let label_perks_e_voucher: Swift.String
    public static let label_perks_no_rewards: Swift.String
    public static let label_phone_no: Swift.String
    public static let label_pick_period: Swift.String
    public static let label_pick_race: Swift.String
    public static let label_pick_status: Swift.String
    public static let label_pick_target_type: Swift.String
    public static let label_pick_year: Swift.String
    public static let label_pln_power: Swift.String
    public static let label_pln_kwh: Swift.String
    public static let label_played: Swift.String
    public static let label_please_enable_your_location_from_settings: Swift.String
    public static let label_please_rate_your_experience: Swift.String
    public static let label_please_fill_the_details_below: Swift.String
    public static let label_please_fill_your_answer: Swift.String
    public static let label_please_insert_code_to_verify: Swift.String
    public static let label_please_update_subscription_payment: Swift.String
    public static let label_please_wait: Swift.String
    public static let label_please_wait_to_resend: Swift.String
    public static let label_please_wait_to_switch: Swift.String
    public static let label_plus_other_reward: Swift.String
    public static let label_point: Swift.String
    public static let label_point_earned: Swift.String
    public static let label_point_exchange_details: Swift.String
    public static let label_points_earned: Swift.String
    public static let label_popup_member_get_lead_subtitle: Swift.String
    public static let label_powered_by: Swift.String
    public static let label_powered_by_doku: Swift.String
    public static let label_participant_card_number: Swift.String
    public static let label_primary: Swift.String
    public static let label_price: Swift.String
    public static let label_price_details: Swift.String
    public static let label_price_range_filter: Swift.String
    public static let label_privacy_policy: Swift.String
    public static let label_privileges: Swift.String
    public static let label_priviliges_section_subtitle: Swift.String
    public static let label_preparing_something_awesome: Swift.String
    public static let label_prepare_something_for_you: Swift.String
    public static let label_prepare_your_id_card: Swift.String
    public static let label_previous_level: Swift.String
    public static let label_processing_fee: Swift.String
    public static let label_product_type: Swift.String
    public static let label_process_payment: Swift.String
    public static let label_profile: Swift.String
    public static let label_program: Swift.String
    public static let label_program_ended: Swift.String
    public static let label_program_has_ended: Swift.String
    public static let label_promo_subscription: Swift.String
    public static let label_promo_subscription_bold: Swift.String
    public static let label_promo_subscription_price: Swift.String
    public static let label_promo_subscription_price_bold: Swift.String
    public static let label_promotion: Swift.String
    public static let label_promotion_detail: Swift.String
    public static let label_purchase_topup_ewallet_success: Swift.String
    public static let label_purchased: Swift.String
    public static let label_qr_code: Swift.String
    public static let label_qr_payment_expired_alert_button: Swift.String
    public static let label_qr_payment_expired_alert_subtitle: Swift.String
    public static let label_qr_payment_expired_alert_title: Swift.String
    public static let label_qr_payment_expired_header: Swift.String
    public static let label_qr_payment_pending_footer_button: Swift.String
    public static let label_qr_payment_pending_footer_subtitle: Swift.String
    public static let label_qr_payment_pending_footer_title: Swift.String
    public static let label_qr_payment_pending_header: Swift.String
    public static let label_qr_payment_pending_instruction_dana: Swift.String
    public static let label_qr_payment_pending_instruction_gopay: Swift.String
    public static let label_qr_payment_pending_instruction_mobile_banking: Swift.String
    public static let label_qr_payment_pending_instruction_ovo: Swift.String
    public static let label_qr_payment_pending_instruction_shopeepay: Swift.String
    public static let label_qr_payment_pending_title: Swift.String
    public static let label_qris_invoice_number: Swift.String
    public static let label_qris_payment_header_message: Swift.String
    public static let label_qris_payment_confirmation: Swift.String
    public static let label_qris_payment_merchant_name: Swift.String
    public static let label_qris_choose_payment_method: Swift.String
    public static let label_qty: Swift.String
    public static let label_quarter: Swift.String
    public static let label_quarterly_target: Swift.String
    public static let label_rates_or_power: Swift.String
    public static let label_rating_after_trx: Swift.String
    public static let label_refresh: Swift.String
    public static let label_rejected: Swift.String
    public static let label_request_share_otp: Swift.String
    public static let label_request_to_unlock: Swift.String
    public static let label_reason: Swift.String
    public static let label_reason_for_rejection: Swift.String
    public static let label_receipt: Swift.String
    public static let label_receipt_earn_e_voucher: Swift.String
    public static let label_receipt_earn_point: Swift.String
    public static let label_receipt_error_expired: Swift.String
    public static let label_receipt_error_invalid: Swift.String
    public static let label_receipt_error_used: Swift.String
    public static let label_received: Swift.String
    public static let label_received_amount: Swift.String
    public static let label_recent: Swift.String
    public static let label_recent_numbers: Swift.String
    public static let label_recipient_detail: Swift.String
    public static let label_redeem_your_reward: Swift.String
    public static let label_redeem_your_reward_section_subtitle: Swift.String
    public static let label_redeem_guide_online: Swift.String
    public static let label_redeem_guide_in_store: Swift.String
    public static let label_redeem_guide_in_store_and_online: Swift.String
    public static let label_redeem_info: Swift.String
    public static let label_redemption_limit_reached: Swift.String
    public static let label_referral_description: Swift.String
    public static let label_referral_statistics: Swift.String
    public static let label_refer_by_phone: Swift.String
    public static let label_refer_more: Swift.String
    public static let label_refer_to_your_friends: Swift.String
    public static let label_refer_your_friend: Swift.String
    public static let label_refer_your_friend_via: Swift.String
    public static let label_reference_code: Swift.String
    public static let label_reference_number: Swift.String
    public static let label_referral: Swift.String
    public static let label_registered: Swift.String
    public static let label_registration_number: Swift.String
    public static let label_remaining_balance: Swift.String
    public static let label_remaining_payment: Swift.String
    public static let label_remaining_topup_limit: Swift.String
    public static let label_remove_evoucher: Swift.String
    public static let label_remove_voucher: Swift.String
    public static let label_result: Swift.String
    public static let label_resend_on: Swift.String
    public static let label_retail_outlet: Swift.String
    public static let label_review_content: Swift.String
    public static let label_review_title: Swift.String
    public static let label_reward: Swift.String
    public static let label_rewards: Swift.String
    public static let label_sad_to_see_you_go: Swift.String
    public static let label_sales_statistic: Swift.String
    public static let label_sales_summary: Swift.String
    public static let label_scan_to_earn_title: Swift.String
    public static let label_scan_to_earn_info: Swift.String
    public static let label_scan_failed_please_contact_us: Swift.String
    public static let label_scan_qr: Swift.String
    public static let label_scan_qr_add_card: Swift.String
    public static let label_scan_qris_upload: Swift.String
    public static let label_scan_qris_guide: Swift.String
    public static let label_scan_qris: Swift.String
    public static let label_scan_receipt_info: Swift.String
    public static let label_search_card: Swift.String
    public static let label_search_did_not_find: Swift.String
    public static let label_search_evoucher_checkout_hint: Swift.String
    public static let label_search_favorite_brand: Swift.String
    public static let label_search_not_found: Swift.String
    public static let label_search_offer: Swift.String
    public static let label_search_result: Swift.String
    public static let label_search_something_else: Swift.String
    public static let label_search_try_search_else: Swift.String
    public static let label_see: Swift.String
    public static let label_see_details: Swift.String
    public static let label_select_between_x_until_y: Swift.String
    public static let label_select_data_package: Swift.String
    public static let label_select_from_gallery: Swift.String
    public static let label_select_from_files: Swift.String
    public static let label_select_image: Swift.String
    public static let label_select_image_desc: Swift.String
    public static let label_select_point: Swift.String
    public static let label_select_program: Swift.String
    public static let label_select_top_up_amount: Swift.String
    public static let label_select_topup_amount: Swift.String
    public static let label_select_method: Swift.String
    public static let label_selected: Swift.String
    public static let label_sell_item: Swift.String
    public static let label_sell_point: Swift.String
    public static let label_sell_these_product_to_your_friends: Swift.String
    public static let label_sell_to_your_friend: Swift.String
    public static let label_sell_to_your_friend_caption: Swift.String
    public static let label_send_me_verification_code_via: Swift.String
    public static let label_settings: Swift.String
    public static let label_settings_now: Swift.String
    public static let label_service_package: Swift.String
    public static let label_share_all_offers: Swift.String
    public static let label_share_more: Swift.String
    public static let label_share_store_via: Swift.String
    public static let label_shipment_gosend_instant: Swift.String
    public static let label_shipment_gosend_same_day: Swift.String
    public static let label_shipment_grab_instant: Swift.String
    public static let label_shipment_internal: Swift.String
    public static let label_shipment_jne: Swift.String
    public static let label_shipment_jnt: Swift.String
    public static let label_shipment_sap: Swift.String
    public static let label_shipment_si_cepat: Swift.String
    public static let label_shipment_tiki: Swift.String
    public static let label_shipment_wahana: Swift.String
    public static let label_shipper_id: Swift.String
    public static let label_shop: Swift.String
    public static let label_show_qr_to_staff_to_redeem_rewards: Swift.String
    public static let label_show_to_cashier: Swift.String
    public static let label_sign_out: Swift.String
    public static let label_sms: Swift.String
    public static let label_sold: Swift.String
    public static let label_sort: Swift.String
    public static let label_sort_and_filter: Swift.String
    public static let label_sort_best_seller: Swift.String
    public static let label_sort_highest_price: Swift.String
    public static let label_sort_lowest_price: Swift.String
    public static let label_sort_recommended: Swift.String
    public static let label_stamps: Swift.String
    public static let label_stamps_earned: Swift.String
    public static let label_start_from: Swift.String
    public static let label_started_date: Swift.String
    public static let label_status: Swift.String
    public static let label_status_used: Swift.String
    public static let label_store: Swift.String
    public static let label_store_acceptance: Swift.String
    public static let label_store_contact_subtitle: Swift.String
    public static let label_store_contact_title: Swift.String
    public static let label_store_name: Swift.String
    public static let label_stores: Swift.String
    public static let label_subdistrict: Swift.String
    public static let label_subdistrict_empty_title: Swift.String
    public static let label_subdistrict_hint: Swift.String
    public static let label_subdistrict_search: Swift.String
    public static let label_submitted_by: Swift.String
    public static let label_subscription: Swift.String
    public static let label_subscription_created: Swift.String
    public static let label_subscription_expired: Swift.String
    public static let label_subscription_promote_renew: Swift.String
    public static let label_subscription_save_more: Swift.String
    public static let label_subtitle_empty_state_transactions: Swift.String
    public static let label_subtitle_locked_user: Swift.String
    public static let label_success: Swift.String
    public static let label_successfully_redeemed: Swift.String
    public static let label_tap_to_copy: Swift.String
    public static let label_target: Swift.String
    public static let label_target_type: Swift.String
    public static let label_task: Swift.String
    public static let label_tax: Swift.String
    public static let label_tax_fee: Swift.String
    public static let label_terms_and_condition: Swift.String
    public static let label_text_no: Swift.String
    public static let label_text_yes: Swift.String
    public static let label_the_field_is_required: Swift.String
    public static let label_title_empty_state_transactions: Swift.String
    public static let label_title_lock_authentication: Swift.String
    public static let label_title_locked_user: Swift.String
    public static let label_title_session_expired: Swift.String
    public static let label_tokopedia_redeem_guide: Swift.String
    public static let label_top_up_amount: Swift.String
    public static let label_topup_info: Swift.String
    public static let label_topup_to: Swift.String
    public static let label_topup_limit_reached_desc: Swift.String
    public static let label_topup_limit_reached: Swift.String
    public static let label_total: Swift.String
    public static let label_total_bill: Swift.String
    public static let label_total_price: Swift.String
    public static let label_total_sales: Swift.String
    public static let label_total_shopping: Swift.String
    public static let label_tracking_no: Swift.String
    public static let label_tracking_number: Swift.String
    public static let label_tracking_number_not_valid: Swift.String
    public static let label_tracking_number_plain: Swift.String
    public static let label_transaction: Swift.String
    public static let label_transaction_amount: Swift.String
    public static let label_transaction_history: Swift.String
    public static let label_transaction_summary: Swift.String
    public static let label_transaction_type_payment: Swift.String
    public static let label_transaction_no: Swift.String
    public static let label_transaction_wallet_reward: Swift.String
    public static let label_transaction_was_successful: Swift.String
    public static let label_try_another_search: Swift.String
    public static let label_under_review: Swift.String
    public static let label_unique_code: Swift.String
    public static let label_unlimited: Swift.String
    public static let label_unique_code_locked: Swift.String
    public static let label_upload_image: Swift.String
    public static let label_upload_image_subtitle: Swift.String
    public static let label_upload_your_id_card: Swift.String
    public static let label_used_at: Swift.String
    public static let label_used_date: Swift.String
    public static let label_used_on: Swift.String
    public static let label_use_voucher_wait_time_notice: Swift.String
    public static let label_using_balance_or_point_conversion: Swift.String
    public static let label_value_rating_bad_0: Swift.String
    public static let label_value_rating_bad_1: Swift.String
    public static let label_value_rating_bad_2: Swift.String
    public static let label_value_rating_bad_3: Swift.String
    public static let label_value_rating_bad_4: Swift.String
    public static let label_value_rating_good_0: Swift.String
    public static let label_value_rating_good_1: Swift.String
    public static let label_value_rating_good_2: Swift.String
    public static let label_value_rating_good_3: Swift.String
    public static let label_value_rating_normal_0: Swift.String
    public static let label_value_rating_normal_1: Swift.String
    public static let label_value_rating_normal_2: Swift.String
    public static let label_value_rating_normal_3: Swift.String
    public static let label_value_rating_normal_4: Swift.String
    public static let label_value_sales_summary: Swift.String
    public static let label_verification_code_problem: Swift.String
    public static let label_verification_code_sent_via: Swift.String
    public static let label_video_already_watched: Swift.String
    public static let label_void_amount: Swift.String
    public static let label_virtual_account_number: Swift.String
    public static let label_virtual_number: Swift.String
    public static let label_voucher: Swift.String
    public static let label_voucher_code: Swift.String
    public static let label_waiting_review: Swift.String
    public static let label_wallet_minimum_eligibility_info: Swift.String
    public static let label_wallet_minimum_eligibility_redeem_info: Swift.String
    public static let label_wallet_minimum_eligibility_item_detail_info: Swift.String
    public static let label_website: Swift.String
    public static let label_weight: Swift.String
    public static let label_weight_input: Swift.String
    public static let label_we_will_fix_it_as_soon_as_possible: Swift.String
    public static let label_what_you_will_do: Swift.String
    public static let label_whatsapp: Swift.String
    public static let label_send_code_via_whatsapp: Swift.String
    public static let label_send_code_via_sms: Swift.String
    public static let label_will_expire_in: Swift.String
    public static let label_will_expire_in_value: Swift.String
    public static let label_withdraw_all: Swift.String
    public static let label_withdrawal_amount: Swift.String
    public static let label_would_you_like_a_quicker_access: Swift.String
    public static let label_year: Swift.String
    public static let label_yearly_target: Swift.String
    public static let label_you_already_have_an_item_in_the_cart: Swift.String
    public static let label_you_get: Swift.String
    public static let label_you_have: Swift.String
    public static let label_you_have_collected: Swift.String
    public static let label_you_have_no_card_content: Swift.String
    public static let label_you_have_not_process_any_items_yet: Swift.String
    public static let label_you_have_not_sell_any_items_yet: Swift.String
    public static let label_you_have_not_sold_any_items_yet: Swift.String
    public static let label_you_have_spent: Swift.String
    public static let label_your_account_linked_to_doku_wallet: Swift.String
    public static let label_your_card_is_being_prepared: Swift.String
    public static let label_your_email: Swift.String
    public static let label_your_friends_get: Swift.String
    public static let label_your_level: Swift.String
    public static let label_your_map_club_point: Swift.String
    public static let label_your_referral_friends: Swift.String
    public static let label_your_referral_link: Swift.String
    public static let label_your_rewards: Swift.String
    public static let label_your_request_under_review: Swift.String
    public static let label_no_min_transaction: Swift.String
    public static let label_min_quantity: Swift.String
    public static let label_miles: Swift.String
    public static let level: Swift.String
    public static let level_ios: Swift.String
    public static let limit_quantity: Swift.String
    public static let link_e_voucher_tokopedia: Swift.String
    public static let link_tada_privacy_policy: Swift.String
    public static let link_doku_terms_condition: Swift.String
    public static let live_chat: Swift.String
    public static let login_contact_bottom_subtitle: Swift.String
    public static let login_label_email_caption: Swift.String
    public static let login_placeholder_email: Swift.String
    public static let label_mission_bonus_rewards: Swift.String
    public static let label_mission_bonus_rewards_subtitle: Swift.String
    public static let made_a_purchase: Swift.String
    public static let male: Swift.String
    public static let manage_shipping_address: Swift.String
    public static let maximum_redemption_gold_pcs: Swift.String
    public static let maximum_redemption_pcs: Swift.String
    public static let message_card_associated: Swift.String
    public static let message_card_exist: Swift.String
    public static let message_card_expired: Swift.String
    public static let message_card_expired_desc: Swift.String
    public static let message_card_expired_title: Swift.String
    public static let message_card_inactive: Swift.String
    public static let message_card_inactive_desc: Swift.String
    public static let message_card_is_inactive: Swift.String
    public static let message_card_not_found: Swift.String
    public static let message_card_status_ended: Swift.String
    public static let message_card_status_expired: Swift.String
    public static let message_card_status_inactive: Swift.String
    public static let message_card_status_suspended: Swift.String
    public static let message_card_suspended: Swift.String
    public static let message_card_suspended_desc: Swift.String
    public static let message_card_suspended_title: Swift.String
    public static let message_copy_success: Swift.String
    public static let message_device_locked_general: Swift.String
    public static let message_email_invalid: Swift.String
    public static let message_email_required: Swift.String
    public static let message_error_payment_key_failed: Swift.String
    public static let message_not_implemented_yet: Swift.String
    public static let message_payment_success_sell_point: Swift.String
    public static let message_phone_number_invalid: Swift.String
    public static let message_phone_number_required: Swift.String
    public static let message_request_otp_to_tada: Swift.String
    public static let message_request_unlock_account_email: Swift.String
    public static let message_request_unlock_account_phone: Swift.String
    public static let message_request_unlock_device_email: Swift.String
    public static let message_request_unlock_device_phone: Swift.String
    public static let message_reset_pass_code_success: Swift.String
    public static let message_scan_success_reward_text: Swift.String
    public static let message_send_pass_code: Swift.String
    public static let message_send_verification_code_whatsapp: Swift.String
    public static let message_shipping_city_not_found: Swift.String
    public static let message_store_empty: Swift.String
    public static let message_store_search_no_result: Swift.String
    public static let message_subscription_ended: Swift.String
    public static let message_success_add_card_timer: Swift.String
    public static let message_transaction_failed: Swift.String
    public static let message_title_transaction_failed: Swift.String
    public static let message_upload_image_fail: Swift.String
    public static let message_upload_image_fail_exception: Swift.String
    public static let message_url_invalid: Swift.String
    public static let message_otp_remaining_attempt: Swift.String
    public static let message_verification_sent: Swift.String
    public static let message_voucher_applied: Swift.String
    public static let message_voucher_removed: Swift.String
    public static let message_qris_camera_access: Swift.String
    public static let message_qris_link_doku: Swift.String
    public static let message_qr_camera_access: Swift.String
    public static let meter_number: Swift.String
    public static let min_buyback_note: Swift.String
    public static let minimum_donation_is: Swift.String
    public static let monitor_buyback_in_transaction: Swift.String
    public static let name: Swift.String
    public static let near_me_empty_list: Swift.String
    public static let next: Swift.String
    public static let no_address: Swift.String
    public static let no_address_available: Swift.String
    public static let no_internet_connection: Swift.String
    public static let note_point_exchange_map: Swift.String
    public static let note_purchase_subscription: Swift.String
    public static let note_redemption_phone: Swift.String
    public static let note_topup_dana: Swift.String
    public static let note_topup_gopay: Swift.String
    public static let note_topup_linkaja: Swift.String
    public static let note_topup_ovo: Swift.String
    public static let note_topup_shopeepay: Swift.String
    public static let notelp_hub_kami: Swift.String
    public static let notification_settings: Swift.String
    public static let number_of_working_days: Swift.String
    public static let oh_no_warning: Swift.String
    public static let ok: Swift.String
    public static let on_board_description_1: Swift.String
    public static let on_board_description_2: Swift.String
    public static let on_board_description_3: Swift.String
    public static let on_board_description_4: Swift.String
    public static let on_board_title_1: Swift.String
    public static let on_board_title_1_whitelabel: Swift.String
    public static let on_board_title_2: Swift.String
    public static let on_board_title_3: Swift.String
    public static let on_board_title_4: Swift.String
    public static let onboard_evoucher_desc_1: Swift.String
    public static let onboard_evoucher_desc_2: Swift.String
    public static let onboard_evoucher_title_1: Swift.String
    public static let onboard_evoucher_title_2: Swift.String
    public static let onboard_referral_desc_1: Swift.String
    public static let onboard_referral_desc_2: Swift.String
    public static let onboard_referral_desc_3: Swift.String
    public static let onboard_referral_title_1: Swift.String
    public static let onboard_referral_title_2: Swift.String
    public static let onboard_referral_title_3: Swift.String
    public static let opps_your_apps_is_missing: Swift.String
    public static let opps_your_friend_not_registered_yet: Swift.String
    public static let oops_permissionn_is_not_allowed: Swift.String
    public static let option_choice_input_error: Swift.String
    public static let or: Swift.String
    public static let or_see_our_partners: Swift.String
    public static let or_type_cashier_code_directly: Swift.String
    public static let order_number: Swift.String
    public static let order_status: Swift.String
    public static let order_total: Swift.String
    public static let overview: Swift.String
    public static let paid_membership_expire_description: Swift.String
    public static let paid_membership_expire_title: Swift.String
    public static let page_title_add_address: Swift.String
    public static let page_title_add_card: Swift.String
    public static let page_title_distribution_channel: Swift.String
    public static let page_title_edit_address: Swift.String
    public static let page_title_order_summary: Swift.String
    public static let page_title_transaction_history: Swift.String
    public static let payment_successful: Swift.String
    public static let pending_perks: Swift.String
    public static let perks: Swift.String
    public static let permission_allow: Swift.String
    public static let permission_allowed: Swift.String
    public static let permission_denied_desc_camera: Swift.String
    public static let permission_denied_desc_contact: Swift.String
    public static let permission_denied_desc_gallery: Swift.String
    public static let permission_denied_desc_location: Swift.String
    public static let permission_denied_title: Swift.String
    public static let permission_desc_camera: Swift.String
    public static let permission_desc_contact: Swift.String
    public static let permission_desc_gallery: Swift.String
    public static let permission_dont_allow: Swift.String
    public static let permission_location: Swift.String
    public static let permission_subtitle_camera: Swift.String
    public static let permission_subtitle_camera_disabled: Swift.String
    public static let permission_subtitle_contacts: Swift.String
    public static let permission_subtitle_contacts_disabled: Swift.String
    public static let permission_subtitle_location: Swift.String
    public static let permission_subtitle_location_disabled: Swift.String
    public static let permission_title_camera: Swift.String
    public static let permission_title_contact: Swift.String
    public static let permission_title_contacts_disabled: Swift.String
    public static let permission_title_gallery: Swift.String
    public static let permission_title_location: Swift.String
    public static let permission_title_location_disabled: Swift.String
    public static let phone_number: Swift.String
    public static let pin_account_locked_subtitle: Swift.String
    public static let pin_button_reset: Swift.String
    public static let pin_create_subtitle: Swift.String
    public static let pin_create_title: Swift.String
    public static let pin_current_subtitle: Swift.String
    public static let pin_current_title: Swift.String
    public static let pin_doesnt_match: Swift.String
    public static let pin_errmsg_reenter: Swift.String
    public static let pin_forgot_label: Swift.String
    public static let pin_help_locked_message: Swift.String
    public static let pin_input_subtitle: Swift.String
    public static let pin_input_title: Swift.String
    public static let pin_new_subtitle: Swift.String
    public static let pin_new_title: Swift.String
    public static let pin_request_reset_title: Swift.String
    public static let pin_request_reset_subtitle: Swift.String
    public static let pin_popup_create_content: Swift.String
    public static let pin_popup_create_title: Swift.String
    public static let pin_popup_new_content: Swift.String
    public static let pin_popup_set_content: Swift.String
    public static let pin_reenter_subtitle: Swift.String
    public static let pin_reenter_title: Swift.String
    public static let pin_still_doesnt_match: Swift.String
    public static let pin_uppercase: Swift.String
    public static let placeholder_amount: Swift.String
    public static let placeholder_bill_number: Swift.String
    public static let placeholder_birthday_ios: Swift.String
    public static let placeholder_cc_cvv: Swift.String
    public static let placeholder_cc_expire_date: Swift.String
    public static let placeholder_cc_month: Swift.String
    public static let placeholder_cc_year: Swift.String
    public static let placeholder_credit_card_numbers: Swift.String
    public static let placeholder_form_phone_number: Swift.String
    public static let placeholder_email_ios: Swift.String
    public static let placeholder_enter_your_valid_email: Swift.String
    public static let placeholder_name_ios: Swift.String
    public static let placeholder_name_on_card: Swift.String
    public static let placeholder_outlet_code_sample: Swift.String
    public static let placeholder_search_address: Swift.String
    public static let placeholder_unique_short_code: Swift.String
    public static let placeholder_write_your_feedback_here: Swift.String
    public static let please_add_your_card_here: Swift.String
    public static let please_download_and_sign_in: Swift.String
    public static let please_try_again: Swift.String
    public static let price: Swift.String
    public static let push_notification: Swift.String
    public static let qty: Swift.String
    public static let qty_item: Swift.String
    public static let quantity: Swift.String
    public static let quantity_max: Swift.String
    public static let quantity_remaining: Swift.String
    public static let label_register_as_merchant: Swift.String
    public static let rating_average: Swift.String
    public static let rating_bad: Swift.String
    public static let rating_good: Swift.String
    public static let rating_how_can_we_improve: Swift.String
    public static let rating_how_was_our_service: Swift.String
    public static let rating_very_bad: Swift.String
    public static let rating_very_good: Swift.String
    public static let rating_what_did_like: Swift.String
    public static let rating_what_do_you_like_about_the_app: Swift.String
    public static let rating_what_went_wrong: Swift.String
    public static let receipt_footer: Swift.String
    public static let recipient_bank_account: Swift.String
    public static let recipient_bank_account_note: Swift.String
    public static let recipient_information: Swift.String
    public static let recipient_name: Swift.String
    public static let recipient_phone_hint: Swift.String
    public static let redeem_now: Swift.String
    public static let register_form_encouragement_subtitle: Swift.String
    public static let register_form_encouragement_title: Swift.String
    public static let regular: Swift.String
    public static let remove_address_confirmation: Swift.String
    public static let required_bank_account_holder: Swift.String
    public static let required_bank_account_name: Swift.String
    public static let required_bank_account_number: Swift.String
    public static let required_field: Swift.String
    public static let required_id_card_image: Swift.String
    public static let reviewing_perks: Swift.String
    public static let label_shipping_fee_discount: Swift.String
    public static let label_shipping_info: Swift.String
    public static let save: Swift.String
    public static let scan_qr_caption: Swift.String
    public static let scan_qr_code: Swift.String
    public static let scan_qris_tutorial_title: Swift.String
    public static let scan_qris_tutorial_subtitle: Swift.String
    public static let scan_qris_tutorial_1: Swift.String
    public static let scan_qris_tutorial_2: Swift.String
    public static let scan_qris_tutorial_3: Swift.String
    public static let search_hint: Swift.String
    public static let select_card: Swift.String
    public static let select_payment: Swift.String
    public static let select_payment_method: Swift.String
    public static let select_variant: Swift.String
    public static let send_email: Swift.String
    public static let sender_information: Swift.String
    public static let serial_number: Swift.String
    public static let snapreceipt_subtitle: Swift.String
    public static let shipping_address: Swift.String
    public static let shipping_cost: Swift.String
    public static let shipping_fee: Swift.String
    public static let shipping_method: Swift.String
    public static let shop_now: Swift.String
    public static let shopping_cart_title: Swift.String
    public static let show: Swift.String
    public static let showcase_btn_ok: Swift.String
    public static let showcase_desc_add_card: Swift.String
    public static let showcase_desc_balance: Swift.String
    public static let showcase_desc_evoucher: Swift.String
    public static let showcase_desc_food_order: Swift.String
    public static let showcase_desc_home_add_card: Swift.String
    public static let showcase_desc_home_e_voucher: Swift.String
    public static let showcase_desc_home_inbox: Swift.String
    public static let showcase_desc_home_profile: Swift.String
    public static let showcase_desc_home_scan_qr: Swift.String
    public static let showcase_desc_home_search: Swift.String
    public static let showcase_desc_perks: Swift.String
    public static let showcase_desc_redeem: Swift.String
    public static let showcase_desc_refer: Swift.String
    public static let showcase_title_add_card: Swift.String
    public static let something_went_wrong: Swift.String
    public static let sorry_warning: Swift.String
    public static let stamps_collection: Swift.String
    public static let start_from: Swift.String
    public static let start_from_key: Swift.String
    public static let status_order_scan_qr_egift_reward: Swift.String
    public static let status_order_cancelled: Swift.String
    public static let status_order_completed: Swift.String
    public static let status_order_failed: Swift.String
    public static let status_order_new: Swift.String
    public static let status_order_on_courier: Swift.String
    public static let status_order_on_delivery: Swift.String
    public static let status_order_on_process: Swift.String
    public static let status_order_order_ready: Swift.String
    public static let status_order_order_taken: Swift.String
    public static let status_order_partially_delivered: Swift.String
    public static let status_order_payment_success: Swift.String
    public static let status_order_pending: Swift.String
    public static let status_order_returned: Swift.String
    public static let status_referral_title: Swift.String
    public static let status_transaction_accepted: Swift.String
    public static let status_transaction_decline: Swift.String
    public static let status_transaction_declined: Swift.String
    public static let status_transaction_expired: Swift.String
    public static let status_transaction_on_processed: Swift.String
    public static let status_transaction_order_received: Swift.String
    public static let status_transaction_pending: Swift.String
    public static let status_transaction_waiting_payment: Swift.String
    public static let step_redeem_cashier: Swift.String
    public static let store_near_me: Swift.String
    public static let sub_total: Swift.String
    public static let sublabel_challenge: Swift.String
    public static let sublabel_redeemreward_section_single_item: Swift.String
    public static let sublabel_mission_expired: Swift.String
    public static let submit: Swift.String
    public static let subscription_banner_saving: Swift.String
    public static let subtitle_amount_range_input_between: Swift.String
    public static let subtitle_choose_usage_method: Swift.String
    public static let subtitle_completed_payment: Swift.String
    public static let subtitle_maintenance_page: Swift.String
    public static let subtitle_member_get_lead_share_offer: Swift.String
    public static let subtitle_member_get_lead_statistic: Swift.String
    public static let subtitle_mgl_multiple_program: Swift.String
    public static let subtitle_need_help: Swift.String
    public static let subtitle_sales_history: Swift.String
    public static let subtitle_virtual_franchise_share_item: Swift.String
    public static let subtitle_virtual_franchise_statistic: Swift.String
    public static let subtitle_we_could_not_find_your_location: Swift.String
    public static let sub_title_voucher_on_progress: Swift.String
    public static let TO_MAKE_PURCHASE: Swift.String
    public static let tab_accepted_at: Swift.String
    public static let tab_benefits: Swift.String
    public static let tab_desc_history_lead_0: Swift.String
    public static let tab_desc_history_lead_1: Swift.String
    public static let tab_desc_history_lead_2: Swift.String
    public static let tab_desc_history_sales_0: Swift.String
    public static let tab_desc_history_sales_1: Swift.String
    public static let tab_desc_history_sales_2: Swift.String
    public static let tab_history_lead_0: Swift.String
    public static let tab_history_lead_1: Swift.String
    public static let tab_history_lead_2: Swift.String
    public static let tab_history_sales_0: Swift.String
    public static let tab_history_sales_1: Swift.String
    public static let tab_history_sales_2: Swift.String
    public static let terms: Swift.String
    public static let text_ensure_phone_number: Swift.String
    public static let text_ensure_meter_number_customer_id: Swift.String
    public static let text_mission_history: Swift.String
    public static let text_your_mission: Swift.String
    public static let the_item_is_currently_unavailable: Swift.String
    public static let the_phone_number_may_not_a_valid_provider_number: Swift.String
    public static let title_account_locked: Swift.String
    public static let title_activity_checkout: Swift.String
    public static let title_amount_to_exchange: Swift.String
    public static let title_billing_information: Swift.String
    public static let title_bill_not_found: Swift.String
    public static let title_cannot_combine_items: Swift.String
    public static let title_category: Swift.String
    public static let title_choose_outlet: Swift.String
    public static let title_choose_usage_method: Swift.String
    public static let title_complete_payment: Swift.String
    public static let title_completed_payment: Swift.String
    public static let title_e_voucher_history: Swift.String
    public static let title_voucher_on_progress: Swift.String
    public static let title_explore_more_menu: Swift.String
    public static let title_history: Swift.String
    public static let title_how_to_claim_rewards: Swift.String
    public static let title_info_pending_membership: Swift.String
    public static let title_input_your_email: Swift.String
    public static let title_input_credit_card: Swift.String
    public static let title_item_detail_ambassador: Swift.String
    public static let title_level_info: Swift.String
    public static let title_maintenance_page: Swift.String
    public static let title_member_get_lead_share_offer: Swift.String
    public static let title_need_help: Swift.String
    public static let title_need_more_help: Swift.String
    public static let title_recent_number: Swift.String
    public static let title_notifications: Swift.String
    public static let title_point_exchange_description: Swift.String
    public static let title_sales_history: Swift.String
    public static let title_select_garuda_miles_account: Swift.String
    public static let title_send_verification_code: Swift.String
    public static let title_success_locked_membership: Swift.String
    public static let title_target_and_achievement: Swift.String
    public static let title_track_your_order: Swift.String
    public static let title_thank_you: Swift.String
    public static let title_upload_file: Swift.String
    public static let title_virtual_franchise_share_item: Swift.String
    public static let title_warn_delete_item: Swift.String
    public static let title_we_could_not_find_your_location: Swift.String
    public static let token: Swift.String
    public static let total_amount: Swift.String
    public static let total_payment: Swift.String
    public static let total_received: Swift.String
    public static let total_price_label: Swift.String
    public static let track: Swift.String
    public static let transaction_cashier: Swift.String
    public static let transaction_history_sign_up_rewards: Swift.String
    public static let transaction_history_activation: Swift.String
    public static let transaction_history_adjustment: Swift.String
    public static let transaction_history_approved: Swift.String
    public static let transaction_history_blast_point: Swift.String
    public static let transaction_history_buyback: Swift.String
    public static let transaction_history_cash_reward_redemption: Swift.String
    public static let transaction_history_cashier_incentive: Swift.String
    public static let transaction_history_complimentary: Swift.String
    public static let transaction_history_complimentary_reward: Swift.String
    public static let transaction_history_commission_ambassador_balance: Swift.String
    public static let transaction_history_commission_ambassador_egift: Swift.String
    public static let transaction_history_commission_ambassador_wallet: Swift.String
    public static let transaction_history_commission_balance: Swift.String
    public static let transaction_history_commission_egift: Swift.String
    public static let transaction_history_commission_referral_balance: Swift.String
    public static let transaction_history_commission_referral_egift: Swift.String
    public static let transaction_history_commission_referral_wallet: Swift.String
    public static let transaction_history_commission_wallet: Swift.String
    public static let transaction_history_cancelled: Swift.String
    public static let transaction_history_dynamic_reward_egift: Swift.String
    public static let transaction_history_deactivation: Swift.String
    public static let transaction_history_decline: Swift.String
    public static let transaction_history_egift_generation: Swift.String
    public static let transaction_history_egift_redemption: Swift.String
    public static let transaction_history_egift_subscription: Swift.String
    public static let transaction_history_expired: Swift.String
    public static let transaction_history_hold_balance: Swift.String
    public static let transaction_history_level_rewards: Swift.String
    public static let transaction_history_level_stay: Swift.String
    public static let transaction_history_level_downgrade: Swift.String
    public static let transaction_history_level_upgrade: Swift.String
    public static let transaction_history_membership: Swift.String
    public static let transaction_history_used: Swift.String
    public static let transaction_history_mission_and_activity_rewards: Swift.String
    public static let transaction_history_merchant_free_wallet: Swift.String
    public static let transaction_history_perks_reward_balance: Swift.String
    public static let transaction_history_perks_reward_egift: Swift.String
    public static let transaction_history_perks_reward_wallet: Swift.String
    public static let transaction_history_point_reward_redemption: Swift.String
    public static let transaction_history_purchase: Swift.String
    public static let transaction_history_receive_balance: Swift.String
    public static let transaction_history_redemption: Swift.String
    public static let transaction_history_redemption_rewards: Swift.String
    public static let transaction_history_referral_commission: Swift.String
    public static let transaction_history_referral_rewards: Swift.String
    public static let transaction_history_review_rewards: Swift.String
    public static let transaction_history_rewards: Swift.String
    public static let transaction_history_reward_adjustment: Swift.String
    public static let transaction_history_reward_advocate_egift: Swift.String
    public static let transaction_history_reward_referral_egift: Swift.String
    public static let transaction_history_reward_topup: Swift.String
    public static let transaction_history_sharing_offer_rewards: Swift.String
    public static let transaction_history_shop_rewards: Swift.String
    public static let transaction_history_selling_rewards: Swift.String
    public static let transaction_history_subscription: Swift.String
    public static let transaction_history_subscription_new: Swift.String
    public static let transaction_history_subscription_renewal: Swift.String
    public static let transaction_history_subscription_rewards: Swift.String
    public static let transaction_history_subtract_point: Swift.String
    public static let transaction_history_suspend: Swift.String
    public static let transaction_history_topup: Swift.String
    public static let transaction_history_topup_point: Swift.String
    public static let transaction_history_topup_rewards: Swift.String
    public static let transaction_history_transfer_balance: Swift.String
    public static let transaction_history_unsuspend: Swift.String
    public static let transaction_history_void: Swift.String
    public static let transaction_history_wallet_redemption: Swift.String
    public static let transaction_history_wallet_topup: Swift.String
    public static let transaction_history_qris: Swift.String
    public static let title_unable_to_claim_rewards: Swift.String
    public static let transaction_id: Swift.String
    public static let transaction_number: Swift.String
    public static let transaction_type: Swift.String
    public static let trxStatus: Swift.String
    public static let try_again: Swift.String
    public static let unhidden_description: Swift.String
    public static let unhidden_title: Swift.String
    public static let unhide_card: Swift.String
    public static let upload_id_card: Swift.String
    public static let view_transaction: Swift.String
    public static let virtual_franchise_my_rewards_caption: Swift.String
    public static let virtual_franchise_rewards_for_friends_caption: Swift.String
    public static let visual_franchise_search_products_caption: Swift.String
    public static let visual_franchise_search_products_placeholder: Swift.String
    public static let warn_ask_sure_to_delete: Swift.String
    public static let warning_check_pin_subtitle: Swift.String
    public static let warning_check_pin_title: Swift.String
    public static let warning_combined_item: Swift.String
    public static let warning_shipping_method: Swift.String
    public static let warning_please_combine_another_payment: Swift.String
    public static let you_have_no_card: Swift.String
    public static let you_have_no_hidden_card: Swift.String
    public static let you_have_no_hidden_voucher: Swift.String
    public static let you_have_received_a_commission: Swift.String
    public static let your_card_pin: Swift.String
    public static let your_email_address: Swift.String
    public static let your_phone_number: Swift.String
    public static let zip_code_hint: Swift.String
  }
}
extension Swift.String {
  public func isValidPhoneNumber(countryCode: Swift.String? = nil) -> Swift.Bool
  public var isValidEmailAddress: Swift.Bool {
    get
  }
  public var onlyNameValidCharacters: Swift.Bool {
    get
  }
  public var onlyNameValidAlphaNumeric: Swift.Bool {
    get
  }
  public var onlyNumeric: Swift.Bool {
    get
  }
  public var isExpiredDate: Swift.Bool {
    get
  }
}
extension Swift.String {
  public func isNumericString() -> Swift.Bool
  public func isContainNumeric() -> Swift.Bool
  public func isValidURL() -> Swift.Bool
  public var isEwalletValidation: Swift.Bool {
    get
  }
  public func isPulsaValid(prefix: Swift.String) -> Swift.Bool
}
public struct SubmitPreRegistrationRequest : WalletCoreKit.WalletCoreKitPayload {
  public struct Data : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(address: Swift.String?, birthday: Swift.String?, city: Swift.String?, customIdentityType: Swift.String?, customIdentityValue: Swift.String?, data: [WalletCoreKit.SubmitPreRegistrationRequest.Data]?, name: Swift.String?, phone: Swift.String?, registerForOther: Swift.Bool?, sex: Swift.String?)
  public var parameters: [Swift.String : Any] {
    get
  }
}
public struct SurveyAnswers : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class SubmitPrivilegeRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(surveyAnswers: [WalletCoreKit.SurveyAnswers]?)
  public var parameters: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
public struct SubscriptionInfoResponse : Swift.Codable {
  public let id: Swift.String?
  public let subscriptionNo: Swift.String?
  public let status: Swift.String?
  public let startDate: Swift.String?
  public let endDate: Swift.String?
  public let source: Swift.String?
  public let subscriptionProgram: WalletCoreKit.SubscriptionInfoResponse.SubscriptionProgram?
  public let paymentType: Swift.String?
  public let paymentResponse: WalletCoreKit.SubscriptionInfoResponse.PaymentResponse?
  public let isRecurring: Swift.Bool?
  public let isDailyReward: Swift.Bool?
  public let dailyRewards: [WalletCoreKit.SubscriptionInfoResponse.DailyReward]?
  public struct SubscriptionProgram : Swift.Codable, Swift.Equatable {
    public let price: Swift.Double?
    public let status: Swift.String?
    public let normalPriceTag: Swift.String?
    public let salePriceTag: Swift.String?
    public let savedPriceTag: Swift.String?
    public let themeColor: Swift.String?
    public let imageUrl: Swift.String?
    public let isActive: Swift.Bool?
    public let isTerminated: Swift.Bool?
    public let periodType: Swift.String?
    public let periodValue: Swift.Int?
    public static func == (a: WalletCoreKit.SubscriptionInfoResponse.SubscriptionProgram, b: WalletCoreKit.SubscriptionInfoResponse.SubscriptionProgram) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentResponse : Swift.Codable {
    public let id: Swift.String?
    public let amount: Swift.Double?
    public let maskedCardNumber: Swift.String?
    public let token: Swift.String?
    public let status: Swift.String?
    public let updated: Swift.String?
    public let lastCreatedInvoiceUrl: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DailyReward : Swift.Codable {
    public let subscriptionId: Swift.String?
    public let subscriptionDirectRewardId: Swift.String?
    public let rewardName: Swift.String?
    public let imageUrl: Swift.String?
    public let claimed: Swift.Bool?
    public let milisecondFromNow: Swift.Double?
    public let quantity: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SubscriptionUseCase {
  public func getCardSubscription(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.SubscriptionInfoResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func paySubscription(subscription: WalletCoreKit.PendingSubscriptionRequest, completion: @escaping (Swift.Result<WalletCoreKit.PendingSubscriptionResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func cancelSubscription(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func updatePaymentSubscription(subscription: WalletCoreKit.PendingSubscriptionRequest, completion: @escaping (Swift.Result<WalletCoreKit.PendingSubscriptionResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func claimSubscriptionReward(claimReward: WalletCoreKit.ClaimRewardRequest, completion: @escaping (Swift.Result<[WalletCoreKit.ClaimRewardResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct SuburbsResponse : Swift.Codable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let cityID: WalletCoreKit.WalletCoreKitAnyCodable?
  public let name: Swift.String?
  public let active: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SurveyAnswer : Swift.Codable {
  public let id: Swift.Int?
  public let merchantId: Swift.Int?
  public let gciUserId: Swift.Int?
  public let privilegeId: Swift.Int?
  public let surveyId: Swift.Int?
  public let status: Swift.String?
  public let description: Swift.String?
  public let cardInventoryId: Swift.Int?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SurveyAnswerListResponse : Swift.Decodable {
  public let id: Swift.String?
  public let status: Swift.String?
  public let description: Swift.String?
  public let createdAt: Swift.String?
  public let cardInventoryId: Swift.String?
  public let hereMapResponse: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct SurveyAnswerDetailResponse : Swift.Decodable {
  public let status: Swift.String?
  public let description: Swift.String?
  public let createdAt: Swift.String?
  public let surveyAnswers: [WalletCoreKit.SurveyAnswerDetailResponse.SurveyAnswers]?
  public struct SurveyAnswers : Swift.Decodable {
    public let id: Swift.String?
    public let question: Swift.String?
    public let questionValue: Swift.String?
    public let type: Swift.String?
    public let answers: [Swift.String]?
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SurveyQuestion : Swift.Codable {
  public let questionId: Swift.String?
  public let questionType: Swift.String?
  public let isReadonly: Swift.Bool?
  public let isDisabled: Swift.Bool?
  public let isRequired: Swift.Bool?
  public let questionText: Swift.String?
  public let placeholder: Swift.String?
  public let language: Swift.String?
  public let options: [WalletCoreKit.OptionQuestion]?
  public let additional: WalletCoreKit.AdditionalQuestion?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TadaWalletKit : ObjectiveC.NSObject {
  public static func initialize(apiKey: Swift.String, apiSecret: Swift.String, terminalId: Swift.String)
  public static func initialize(apiKey: Swift.String, apiSecret: Swift.String, terminalId: Swift.String, isInternalTadaApi: Swift.Bool = false, isProduction: Swift.Bool = true)
  public static func setBearer(bearer: Swift.String, cardNumber: Swift.String? = nil, isAlreadyHasCards: Swift.Bool? = false)
  public static let app: WalletCoreKit.AppUseCase
  public static let authentication: WalletCoreKit.AuthenticationUseCase
  public static let buyback: WalletCoreKit.BuybackUseCase
  public static let card: WalletCoreKit.CardUseCase
  public static let cashier: WalletCoreKit.CashierUseCase
  public static let catalog: WalletCoreKit.CatalogUseCase
  public static let catalogItem: WalletCoreKit.CatalogItemUseCase
  public static let cart: WalletCoreKit.CartUseCase
  public static let claimReward: WalletCoreKit.ClaimRewardUseCase
  public static let customer: WalletCoreKit.CustomerUseCase
  public static let eVoucher: WalletCoreKit.EVoucherUseCase
  public static let fee: WalletCoreKit.FeeUseCase
  public static let form: WalletCoreKit.FormUseCase
  public static let inAppNotification: WalletCoreKit.InAppNotificationUseCase
  public static let info: WalletCoreKit.InfoUseCase
  public static let leadGeneration: WalletCoreKit.LeadGenerationUseCase
  public static let mission: WalletCoreKit.MissionUseCase
  public static let notification: WalletCoreKit.NotificationUseCase
  public static let openMembership: WalletCoreKit.OpenMembershipUseCase
  public static let order: WalletCoreKit.OrderUseCase
  public static let payment: WalletCoreKit.PaymentUseCase
  public static let pin: WalletCoreKit.PINUseCase
  public static let preRegistration: WalletCoreKit.PreRegistrationUseCase
  public static let privileges: WalletCoreKit.PrivilegeUseCase
  public static let profile: WalletCoreKit.ProfileUseCase
  public static let qris: WalletCoreKit.QrisUseCase
  public static let receipt: WalletCoreKit.ReceiptUseCase
  public static let region: WalletCoreKit.RegionUseCase
  public static let scan: WalletCoreKit.ScanUseCase
  public static let shippingAddress: WalletCoreKit.ShippingAddressUseCase
  public static let store: WalletCoreKit.StoreUseCase
  public static let subscription: WalletCoreKit.SubscriptionUseCase
  public static let targetAchievement: WalletCoreKit.TargetAchievementUseCase
  public static let transaction: WalletCoreKit.TransactionUseCase
  public static let transferPoint: WalletCoreKit.TransferPointUseCase
  public static let user: WalletCoreKit.UserUseCase
  public static let virtualFranchise: WalletCoreKit.VirtualFranchiseUseCase
  public static let wallet: WalletCoreKit.WalletUseCase
  public static func getAccessToken() -> Swift.String?
  @objc deinit
}
public struct TargetAchievementActivePeriodResponse : Swift.Decodable {
  public init(currentPeriod: Swift.String?)
  public let currentPeriod: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct TargetAchievementListRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int, year: Swift.String?, cycle: Swift.String?, period: Swift.String?, isExpired: Swift.Bool?, status: Swift.String?)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct TargetAchievementListResponse : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let imageUrl: Swift.String?
  public let cycle: Swift.String?
  public let year: Swift.String?
  public let period: Swift.String?
  public let target: Swift.Double?
  public let targetType: Swift.String?
  public let achievement: Swift.Double?
  public let unit: Swift.String?
  public let expiredAt: Swift.String?
  public let status: Swift.String?
  public let rewards: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TargetAchievementResponse : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let description: Swift.String?
  public let imageUrl: Swift.String?
  public let cycle: Swift.String?
  public let year: Swift.String?
  public let period: Swift.String?
  public let target: Swift.Double?
  public let targetType: Swift.String?
  public let achievement: Swift.Double?
  public let unit: Swift.String?
  public let expiredAt: Swift.String?
  public let status: Swift.String?
  public let rewards: [Swift.String]?
  public let targetCycle: WalletCoreKit.TargetAchievementResponse.TargetCycle?
  public let achievementDetails: WalletCoreKit.TargetAchievementResponse.achievementDetails?
  public struct TargetCycle : Swift.Codable {
    public let monthly: Swift.Bool?
    public let quarterly: Swift.Bool?
    public let yearly: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct achievementDetails : Swift.Codable {
    public let monthly: [WalletCoreKit.TargetAchievementResponse.achievementDetails.CycleAchievementDetail]?
    public let quarterly: [WalletCoreKit.TargetAchievementResponse.achievementDetails.CycleAchievementDetail]?
    public let yearly: [WalletCoreKit.TargetAchievementResponse.achievementDetails.CycleAchievementDetail]?
    public struct CycleAchievementDetail : Swift.Codable {
      public let period: Swift.String?
      public let target: Swift.Double?
      public let outletAchievement: WalletCoreKit.TargetAchievementResponse.achievementDetails.CycleAchievementDetail.OutletAchievement?
      public struct OutletAchievement : Swift.Codable {
        public let achievement: Swift.Double?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class TargetAchievementUseCase {
  public func getTargetAchievementYear(cardId: Swift.String, completion: @escaping (Swift.Result<[Swift.String], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTargetAchievementCycle(cardId: Swift.String, year: Swift.String, completion: @escaping (Swift.Result<[Swift.String], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTargetAchievementPeriod(cardId: Swift.String, year: Swift.String, cycle: Swift.String, completion: @escaping (Swift.Result<[Swift.String], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTargetAchievementActiveToday(cardId: Swift.String, cycle: Swift.String, completion: @escaping (Swift.Result<Swift.String, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTargetAchievementMissions(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int = 25, year: Swift.String?, cycle: Swift.String?, period: Swift.String?, isExpired: Swift.Bool?, status: Swift.String?, completion: @escaping (Swift.Result<[WalletCoreKit.TargetAchievementListResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTargetAchievementMissionDetail(cardId: Swift.String, missionId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.TargetAchievementResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TargetValue {
  @objc deinit
}
public struct TaxConfig : Swift.Codable {
  public let isActive: Swift.Bool?
  public let absorbBy: Swift.String?
  public let percentage: Swift.Double?
  public var isTaxFeeAbsorbByCustomer: Swift.Bool {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TerminalDetail {
  public let brand: Swift.String?
  public let location: Swift.String?
}
extension Swift.Double {
  public func secondsFromTimeInterval() -> Swift.Double
}
public struct TotalReferralResponse : Swift.Codable {
  public let pending: Swift.Int?
  public let register: Swift.Int?
  public let purchase: Swift.Int?
  public let failed: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionDeliveryTrackingDetailResponse : Swift.Codable {
  public let status: Swift.String?
  public let summary: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.Summary?
  public let detail: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.Detail?
  public let history: [WalletCoreKit.TransactionDeliveryTrackingDetailResponse.History]?
  public let actualLatestStatus: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.LatestStatus?
  public let deliveryProof: Swift.String?
  public let deliverySignature: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.TransactionDeliveryTrackingDetailResponse {
  public struct Summary : Swift.Codable, Swift.Equatable {
    public let awb: Swift.String?
    public let courier: Swift.String?
    public let service: Swift.String?
    public let date: Swift.String?
    public let desc: Swift.String?
    public let weight: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.Summary, b: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.Summary) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Detail : Swift.Codable, Swift.Equatable {
    public let origin: Swift.String?
    public let destination: Swift.String?
    public let shipper: Swift.String?
    public let receiver: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.Detail, b: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.Detail) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct History : Swift.Codable, Swift.Equatable {
    public let date: Swift.String?
    public let desc: Swift.String?
    public let location: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.History, b: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.History) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct LatestStatus : Swift.Codable, Swift.Equatable {
    public let status: Swift.String?
    public let message: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.LatestStatus, b: WalletCoreKit.TransactionDeliveryTrackingDetailResponse.LatestStatus) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct TriggeredInfo : Swift.Codable, Swift.Equatable {
  public let name: Swift.String?
  public let phone: Swift.String?
  public let orderId: Swift.String?
  public let transactionId: Swift.Int?
  public let triggeredInfo: WalletCoreKit.WalletCoreKitAnyCodable?
  public static func == (a: WalletCoreKit.TriggeredInfo, b: WalletCoreKit.TriggeredInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionDetailsV1 : Swift.Decodable {
  public let id: Swift.Int?
  public let maskedTransactionId: Swift.String?
  public let trxNo: Swift.String?
  public let trxTime: Swift.String?
  public let trxDate: Swift.String?
  public let cardNo: Swift.String?
  public let status: Swift.String?
  public let trxStatus: Swift.String?
  public let trxType: Swift.String?
  public let trxAmount: Swift.Double?
  public let trxAmountType: Swift.String?
  public let description: Swift.String?
  public let paymentDetails: [WalletCoreKit.TransactionDetailsV1.PaymentDetail]?
  public let items: [[Swift.String : WalletCoreKit.ValueWrapper?]?]?
  public let metaData: WalletCoreKit.TransactionDetailsV1.MetaData?
  public let merchant: Swift.String?
  public let order: WalletCoreKit.TransactionDetailsV1.Order?
  public let buyback: WalletCoreKit.TransactionDetailsV1.BuyBack?
  public let store: WalletCoreKit.TransactionDetailsV1.Store?
  public let cardProgram: WalletCoreKit.TransactionDetailsV1.CardProgram?
  public let storeRating: WalletCoreKit.TransactionDetailsV1.StoreRating?
  public let rewards: [WalletCoreKit.TransactionDetailsV1.Reward]?
  public let rewardsSummary: [WalletCoreKit.TransactionDetailsV1.RewardSummary]?
  public let fees: [WalletCoreKit.OrderResponse.Fee]?
  public let cardExchangeTransaction: WalletCoreKit.TransactionDetailsV1.CardExchangeTransaction?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.TransactionDetailsV1 {
  public struct Reward : Swift.Codable {
    public let type: Swift.String?
    public let wallet: Swift.String?
    public let value: Swift.String?
    public let collectedAt: Swift.String?
    public let unitType: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RewardSummary : Swift.Codable {
    public let type: Swift.String?
    public let wallet: Swift.String?
    public let value: Swift.String?
    public let unitType: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct MetaData : Swift.Codable {
    public let billNumber: [Swift.String]?
    public let triggeredInfo: WalletCoreKit.TriggeredInfo?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Item : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let EgiftBatchId: Swift.Int?
    public let EgiftMasterId: Swift.Int?
    public let MerchantId: Swift.Int?
    public let mId: Swift.String?
    public let IssuerId: Swift.Int?
    public let batchNum: Swift.Int?
    public let number: Swift.String?
    public let amount: WalletCoreKit.WalletCoreKitAnyCodable?
    public let status: Swift.String?
    public let programId: Swift.String?
    public let code: Swift.String?
    public let redeemPin: Swift.String?
    public let expiredAt: Swift.String?
    public let deletedAt: Swift.String?
    public let sourceType: Swift.String?
    public let sourceId: Swift.String?
    public let ownerType: Swift.String?
    public let ownerId: Swift.String?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let Merchant: WalletCoreKit.TransactionDetailsV1.Item.Merchant?
    public let EgiftMaster: WalletCoreKit.TransactionDetailsV1.Item.EgiftMaster?
    public let program: WalletCoreKit.TransactionDetailsV1.Item.Program?
    public let programName: Swift.String?
    public let itemName: Swift.String?
    public let sku: Swift.String?
    public let quantity: WalletCoreKit.WalletCoreKitAnyCodable?
    public let egift: WalletCoreKit.TransactionDetailsV1.Item.EGift?
    public struct EGift : Swift.Codable, Swift.Equatable {
      public let mId: Swift.String?
      public let egiftNumber: Swift.String?
      public let egiftName: Swift.String?
      public static func == (a: WalletCoreKit.TransactionDetailsV1.Item.EGift, b: WalletCoreKit.TransactionDetailsV1.Item.EGift) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func == (a: WalletCoreKit.TransactionDetailsV1.Item, b: WalletCoreKit.TransactionDetailsV1.Item) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardProgram : Swift.Codable {
    public let id: Swift.Int?
    public let shippingFeeRule: WalletCoreKit.TransactionDetailsV1.CardProgram.ShippingFeeRule?
    public let programName: Swift.String?
    public let qrisAdminFee: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardExchangeTransaction : Swift.Codable, Swift.Equatable {
    public let store: Swift.String?
    public let fee: Swift.Double?
    public let amount: Swift.Double?
    public let conveniencesFee: Swift.Double?
    public let referenceNumber: Swift.String?
    public let qrCodeValue: Swift.String?
    public let merchantData: WalletCoreKit.TransactionDetailsV1.CardExchangeTransaction.MerchantData?
    public struct MerchantData : Swift.Codable, Swift.Equatable {
      public let merchantName: Swift.String?
      public let merchantCity: Swift.String?
      public let terminalId: Swift.String?
      public let merchantCountryCode: Swift.String?
      public static func == (a: WalletCoreKit.TransactionDetailsV1.CardExchangeTransaction.MerchantData, b: WalletCoreKit.TransactionDetailsV1.CardExchangeTransaction.MerchantData) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func == (a: WalletCoreKit.TransactionDetailsV1.CardExchangeTransaction, b: WalletCoreKit.TransactionDetailsV1.CardExchangeTransaction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentDetail : Swift.Codable {
    public let type: Swift.String?
    public let rewardType: Swift.String?
    public let unitType: Swift.String?
    public let conversionRate: Swift.Double?
    public let amount: Swift.Double?
    public let channel: Swift.String?
    public let paymentType: Swift.String?
    public let conversionType: Swift.String?
    public let value: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Order : Swift.Codable {
    public let orderNumber: Swift.String?
    public let cardNo: Swift.String?
    public let status: Swift.String?
    public let description: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BuyBack : Swift.Codable {
    public let cardNumber: Swift.String?
    public let bankName: Swift.String?
    public let accountNumber: Swift.String?
    public let accountName: Swift.String?
    public let amount: Swift.Double?
    public let phone: Swift.String?
    public let email: Swift.String?
    public let buybackAbsorbBy: Swift.String?
    public let buybackChargeRate: Swift.Double?
    public let amountAfterFee: Swift.Double?
    public let createdAt: Swift.String?
    public let imageUrl: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Store : Swift.Codable {
    public let location: Swift.String?
    public let reviewLink: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct StoreRating : Swift.Codable {
    public let eligible: Swift.Bool?
    public let rate: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionDetailsV1.Item {
  public struct Merchant : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let mId: Swift.String?
    public let brand: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDetailsV1.Item.Merchant, b: WalletCoreKit.TransactionDetailsV1.Item.Merchant) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct EgiftMaster : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let MerchantId: Swift.Int?
    public let egiftName: Swift.String?
    public let egiftSourceType: Swift.String?
    public let egiftType: Swift.String?
    public let allowMultiVoucher: Swift.Bool?
    public let amount: Swift.Double?
    public let imageUrl: Swift.String?
    public let termCondition: Swift.String?
    public let active: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDetailsV1.Item.EgiftMaster, b: WalletCoreKit.TransactionDetailsV1.Item.EgiftMaster) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Program : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let programId: Swift.String?
    public let usedType: Swift.String?
    public let cardType: Swift.String?
    public let cardValueType: Swift.String?
    public let cardLoadValue: Swift.Double?
    public let pinDigit: Swift.Int?
    public let reload: Swift.Bool?
    public let active: Swift.Bool?
    public let upc: Swift.String?
    public let MerchantId: Swift.Int?
    public let enablePin: Swift.Bool?
    public let customerType: Swift.String?
    public let initialPoint: Swift.Double?
    public let programName: Swift.String?
    public let EgiftMasterId: Swift.Int?
    public let enablePointExpired: Swift.Bool?
    public let productType: Swift.String?
    public let loyalty: Swift.Bool?
    public let processorV2: Swift.Bool?
    public let balanceExpiry: Swift.Int?
    public let balanceExpiryType: Swift.String?
    public let egiftPaymentType: Swift.String?
    public let enableEgiftEcommerce: Swift.Bool?
    public let smsCharge: Swift.Double?
    public let enableEgift: Swift.Bool?
    public let defaultEgiftExpType: Swift.String?
    public let defaultEgiftExp: Swift.Int?
    public let enableBuyBack: Swift.Bool?
    public let buybackAbsorbBy: Swift.String?
    public let buybackFeePct: Swift.Double?
    public let buybackChargeRate: Swift.Double?
    public let enableRedeemPointNoCustomer: Swift.Bool?
    public let isPointProgram: Swift.Bool?
    public let pointProgramRate: Swift.Double?
    public let pointTopupRate: Swift.Double?
    public let isSmsDefault: Swift.Bool?
    public let isRequiredCustomerData: Swift.Bool?
    public let customerDataRule: WalletCoreKit.TransactionDetailsV1.CardProgram.CustomerDataRule?
    public let paymentType: Swift.String?
    public let balanceName: Swift.String?
    public let isConvertReward: Swift.Bool?
    public let useCustomPaymentOptions: Swift.Bool?
    public let isBalanceHide: Swift.Bool?
    public let pointTopupRateType: Swift.String?
    public let egiftExternalRedeemPin: Swift.Bool?
    public let processingFeePct: Swift.Double?
    public let enableSmsReminder: Swift.Bool?
    public let allowSendDataToExternal: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDetailsV1.Item.Program, b: WalletCoreKit.TransactionDetailsV1.Item.Program) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionDetailsV1.CardProgram {
  public struct ShippingFeeRule : Swift.Codable {
    public let absorber: Swift.String?
    public let unit: Swift.String?
    public let value: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CustomerDataRule : Swift.Codable, Swift.Equatable {
    public let phone: Swift.Bool?
    public let name: Swift.Bool?
    public let email: Swift.Bool?
    public let birthday: Swift.Bool?
    public let sex: Swift.Bool?
    public let city: Swift.Bool?
    public static func == (a: WalletCoreKit.TransactionDetailsV1.CardProgram.CustomerDataRule, b: WalletCoreKit.TransactionDetailsV1.CardProgram.CustomerDataRule) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct TransactionDetailsV2 : Swift.Decodable {
  public let id: Swift.String?
  public let maskedId: Swift.String?
  public let trxType: Swift.String?
  public let trxNo: Swift.String?
  public let trxAmountType: Swift.String?
  public let trxTime: Swift.String?
  public let description: Swift.String?
  public let name: Swift.String?
  public let trxAmount: Swift.Double?
  public let originalAmount: Swift.Double?
  public let paymentType: Swift.String?
  public let rewards: [WalletCoreKit.TransactionDetailsV2.Reward]?
  public let isStamp: Swift.Bool?
  public let sign: Swift.String?
  public let location: Swift.String?
  public let order: WalletCoreKit.TransactionDetailsV2.Order?
  public let item: WalletCoreKit.TransactionDetailsV2.Item?
  public let transactionReference: WalletCoreKit.TransactionDetailsV2.TransactionReference?
  public let metaData: WalletCoreKit.TransactionDetailsV2.MetaData?
  public let merchant: WalletCoreKit.TransactionDetailsV2.Merchant?
  public let store: WalletCoreKit.TransactionDetailsV2.Store?
  public let status: Swift.String?
  public let trxStatus: Swift.String?
  public let paymentDetails: [WalletCoreKit.TransactionDetailsV2.PaymentDetail]?
  public let cardProgram: WalletCoreKit.TransactionDetailsV2.CardProgram?
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.TransactionDetailsV2 {
  public struct Item : Swift.Codable {
    public let type: Swift.String?
    public let data: [WalletCoreKit.TransactionDetailsV2.Item.ItemObject]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct MetaData : Swift.Codable {
    public let billNumber: Swift.String?
    public let referralList: [WalletCoreKit.TransactionDetailsV2.MetaData.Referral]?
    public let referralFriend: WalletCoreKit.TransactionDetailsV2.MetaData.ReferralFriend?
    public let buyback: WalletCoreKit.TransactionDetailsV2.BuyBack?
    public let previousAmount: Swift.Double?
    public let triggeredInfo: WalletCoreKit.TriggeredInfo?
    public let storeRating: WalletCoreKit.TransactionDetailsV2.StoreRating?
    public let egift: WalletCoreKit.TransactionDetailsV2.MetaData.Egift?
    public let missionActivity: WalletCoreKit.TransactionDetailsV2.MetaData.MissionActivity?
    public let levelInfo: WalletCoreKit.TransactionDetailsV2.MetaData.LevelInfo?
    public let subscription: WalletCoreKit.TransactionDetailsV2.MetaData.Subscription?
    public let qrisExchange: WalletCoreKit.TransactionDetailsV2.MetaData.QrisExchange?
    public let paidMembership: WalletCoreKit.TransactionDetailsV2.MetaData.PaidMembership?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardProgram : Swift.Codable {
    public let id: Swift.Int?
    public let shippingFeeRule: WalletCoreKit.TransactionDetailsV2.CardProgram.ShippingFeeRule?
    public let programName: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentDetail : Swift.Codable {
    public let type: Swift.String?
    public let rewardType: Swift.String?
    public let unitType: Swift.String?
    public let conversionRate: Swift.Double?
    public let amount: Swift.Double?
    public let channel: Swift.String?
    public let paymentType: Swift.String?
    public let conversionType: Swift.String?
    public let value: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Order : Swift.Codable {
    public let image: Swift.String?
    public let quantity: Swift.Int?
    public let category: Swift.String?
    public let isDigital: Swift.Bool?
    public let otherItemCount: Swift.Int?
    public let orderNumber: Swift.String?
    public let type: Swift.String?
    public let status: Swift.String?
    public let adminFee: Swift.Double?
    public let total: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BuyBack : Swift.Codable {
    public let status: Swift.String?
    public let bankName: Swift.String?
    public let accountName: Swift.String?
    public let accountNumber: Swift.String?
    public let phoneNumber: Swift.String?
    public let amount: Swift.Double?
    public let fee: Swift.Double?
    public let receivedAmount: Swift.Double?
    public let absorber: Swift.String?
    public let taxFee: Swift.Double?
    public let taxFeeAbsorberBy: Swift.String?
    public let reason: Swift.String?
    public let createdAt: Swift.String?
    public let approvedAt: Swift.String?
    public let paidAt: Swift.String?
    public let email: Swift.String?
    public let buybackAbsorbBy: Swift.String?
    public let buybackChargeRate: Swift.Double?
    public let amountAfterFee: Swift.Double?
    public let imageUrl: Swift.String?
    public func getCreatedAt() -> Swift.String?
    public func getApprovedAt() -> Swift.String?
    public func getPaidAt() -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Store : Swift.Codable {
    public let location: Swift.String?
    public let reviewLink: Swift.String?
    public let address: Swift.String?
    public let phone: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct StoreRating : Swift.Codable {
    public let rate: Swift.Int?
    public let description: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Merchant : Swift.Codable {
    public let brand: Swift.String?
    public let iconUrl: Swift.String?
    public let countryCode: Swift.String?
    public let currency: WalletCoreKit.TransactionDetailsV2.Currency?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Currency : Swift.Codable {
    public let symbol: Swift.String?
    public let decimalDigits: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct TransactionReference : Swift.Codable {
    public let id: Swift.String?
    public let type: Swift.String?
    public let transactionNumber: Swift.String?
    public let amount: Swift.Double?
    public let amountType: Swift.String?
    public let order: WalletCoreKit.TransactionDetailsV2.OrderReference?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct OrderReference : Swift.Codable {
    public let items: [WalletCoreKit.TransactionDetailsV2.OrderReferenceItem]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct OrderReferenceItem : Swift.Codable {
    public let name: Swift.String?
    public let price: Swift.Double?
    public let image: Swift.String?
    public let quantity: Swift.Int?
    public let category: Swift.String?
    public let isDigital: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Reward : Swift.Codable {
    public let type: Swift.String?
    public let amount: Swift.Double?
    public let unitType: Swift.String?
    public let walletName: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionDetailsV2.MetaData {
  public struct Egift : Swift.Codable {
    public let mId: Swift.String?
    public let number: Swift.String?
    public let name: Swift.String?
    public let status: Swift.String?
    public let imageUrl: Swift.String?
    public let approvalCode: Swift.String?
    public let sourceType: Swift.String?
    public let externalCodes: [WalletCoreKit.TransactionDetailsV2.MetaData.Egift.ExternalCode]?
    public let isMultipleVoucher: Swift.Bool?
    public let allowAttribute: WalletCoreKit.TransactionDetailsV2.MetaData.Egift.AllowAttribute?
    public let integrationType: Swift.String?
    public let integrationCode: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct MissionActivity : Swift.Codable {
    public let type: Swift.String?
    public let name: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct LevelInfo : Swift.Codable {
    public let current: Swift.String?
    public let previous: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Subscription : Swift.Codable {
    public let source: Swift.String?
    public let paymentType: Swift.String?
    public let periodType: Swift.String?
    public let periodValue: Swift.Int?
    public let nextPaymentOn: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaidMembership : Swift.Codable {
    public let name: Swift.String?
    public let value: Swift.Double?
    public let expiredAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct QrisExchange : Swift.Codable, Swift.Equatable {
    public let referenceNumber: Swift.String?
    public let invoice: Swift.String?
    public let amount: Swift.Double?
    public let adminFee: Swift.Double?
    public let conveniencesFee: Swift.Double?
    public let distributorName: Swift.String?
    public let fees: [WalletCoreKit.TransactionDetailsV2.MetaData.QrisExchange.Fees]?
    public struct Fees : Swift.Codable, Swift.Equatable {
      public let name: Swift.String?
      public let type: Swift.String?
      public let amount: Swift.Double?
      public let absorber: Swift.String?
      public static func == (a: WalletCoreKit.TransactionDetailsV2.MetaData.QrisExchange.Fees, b: WalletCoreKit.TransactionDetailsV2.MetaData.QrisExchange.Fees) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func == (a: WalletCoreKit.TransactionDetailsV2.MetaData.QrisExchange, b: WalletCoreKit.TransactionDetailsV2.MetaData.QrisExchange) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ReferralFriend : Swift.Codable {
    public let name: Swift.String?
    public let refNumber: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Referral : Swift.Codable {
    public let level: Swift.Int?
    public let name: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionDetailsV2.MetaData.Egift {
  public struct AllowAttribute : Swift.Codable {
    public let instoreRedemption: Swift.Bool?
    public let onlineRedemption: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ExternalCode : Swift.Codable {
    public let number: Swift.String?
    public let amount: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionDetailsV2.Item {
  public struct ItemObject : Swift.Codable {
    public let sku: Swift.String?
    public let name: Swift.String?
    public let price: Swift.Double?
    public let quantity: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Merchant : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let mId: Swift.String?
    public let brand: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDetailsV2.Item.Merchant, b: WalletCoreKit.TransactionDetailsV2.Item.Merchant) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct EgiftMaster : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let MerchantId: Swift.Int?
    public let egiftName: Swift.String?
    public let egiftSourceType: Swift.String?
    public let egiftType: Swift.String?
    public let allowMultiVoucher: Swift.Bool?
    public let amount: Swift.Double?
    public let imageUrl: Swift.String?
    public let termCondition: Swift.String?
    public let active: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDetailsV2.Item.EgiftMaster, b: WalletCoreKit.TransactionDetailsV2.Item.EgiftMaster) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Program : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let programId: Swift.String?
    public let usedType: Swift.String?
    public let cardType: Swift.String?
    public let cardValueType: Swift.String?
    public let cardLoadValue: Swift.Double?
    public let pinDigit: Swift.Int?
    public let reload: Swift.Bool?
    public let active: Swift.Bool?
    public let upc: Swift.String?
    public let MerchantId: Swift.Int?
    public let enablePin: Swift.Bool?
    public let giftcardRule: WalletCoreKit.GiftCardRuleV1?
    public let customerType: Swift.String?
    public let initialPoint: Swift.Double?
    public let programName: Swift.String?
    public let EgiftMasterId: Swift.Int?
    public let enablePointExpired: Swift.Bool?
    public let productType: Swift.String?
    public let loyalty: Swift.Bool?
    public let processorV2: Swift.Bool?
    public let balanceExpiry: Swift.Int?
    public let balanceExpiryType: Swift.String?
    public let egiftPaymentType: Swift.String?
    public let enableEgiftEcommerce: Swift.Bool?
    public let smsCharge: Swift.Double?
    public let enableEgift: Swift.Bool?
    public let defaultEgiftExpType: Swift.String?
    public let defaultEgiftExp: Swift.Int?
    public let enableBuyBack: Swift.Bool?
    public let buybackAbsorbBy: Swift.String?
    public let buybackFeePct: Swift.Double?
    public let buybackChargeRate: Swift.Double?
    public let enableRedeemPointNoCustomer: Swift.Bool?
    public let isPointProgram: Swift.Bool?
    public let pointProgramRate: Swift.Double?
    public let pointTopupRate: Swift.Double?
    public let isSmsDefault: Swift.Bool?
    public let isRequiredCustomerData: Swift.Bool?
    public let customerDataRule: WalletCoreKit.TransactionDetailsV2.CardProgram.CustomerDataRule?
    public let paymentType: Swift.String?
    public let balanceName: Swift.String?
    public let isConvertReward: Swift.Bool?
    public let useCustomPaymentOptions: Swift.Bool?
    public let isBalanceHide: Swift.Bool?
    public let pointTopupRateType: Swift.String?
    public let egiftExternalRedeemPin: Swift.Bool?
    public let processingFeePct: Swift.Double?
    public let enableSmsReminder: Swift.Bool?
    public let allowSendDataToExternal: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public static func == (a: WalletCoreKit.TransactionDetailsV2.Item.Program, b: WalletCoreKit.TransactionDetailsV2.Item.Program) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionDetailsV2.CardProgram {
  public struct ShippingFeeRule : Swift.Codable {
    public let absorber: Swift.String?
    public let unit: Swift.String?
    public let value: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CustomerDataRule : Swift.Codable, Swift.Equatable {
    public let phone: Swift.Bool?
    public let name: Swift.Bool?
    public let email: Swift.Bool?
    public let birthday: Swift.Bool?
    public let sex: Swift.Bool?
    public let city: Swift.Bool?
    public static func == (a: WalletCoreKit.TransactionDetailsV2.CardProgram.CustomerDataRule, b: WalletCoreKit.TransactionDetailsV2.CardProgram.CustomerDataRule) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct TransactionHistoryUnfinishedOrderResponse : Swift.Codable, Swift.Equatable {
  public init(loadingID: Swift.String)
  public let id: Swift.String?
  public let transactionId: Swift.String?
  public let status: Swift.String?
  public let amount: Swift.Double?
  public let cardNumber: Swift.String?
  public let orderNumber: Swift.String?
  public let type: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let items: [WalletCoreKit.TransactionHistoryUnfinishedOrderResponse.Item]?
  public static func == (a: WalletCoreKit.TransactionHistoryUnfinishedOrderResponse, b: WalletCoreKit.TransactionHistoryUnfinishedOrderResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.TransactionHistoryUnfinishedOrderResponse {
  public struct Item : Swift.Codable, Swift.Equatable {
    public let name: Swift.String?
    public let image: Swift.String?
    public let quantity: Swift.Double?
    public static func == (a: WalletCoreKit.TransactionHistoryUnfinishedOrderResponse.Item, b: WalletCoreKit.TransactionHistoryUnfinishedOrderResponse.Item) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct TransactionItem : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let type: Swift.String?
  public let transactionNumber: Swift.String?
  public let amountType: Swift.String?
  public let date: Swift.String?
  public let name: Swift.String?
  public let amount: Swift.Double?
  public let rewards: [WalletCoreKit.TransactionItem.Reward]?
  public let isStamp: Swift.Bool?
  public let sign: Swift.String?
  public let order: WalletCoreKit.TransactionItem.Order?
  public let location: Swift.String?
  public let merchant: WalletCoreKit.TransactionItem.Merchant?
  public let metadata: WalletCoreKit.TransactionItem.Metadata?
  public static var cardTrxTestModels: [WalletCoreKit.TransactionItem] {
    get
  }
  public static var egiftTrxTestModels: [WalletCoreKit.TransactionItem] {
    get
  }
  public static func == (a: WalletCoreKit.TransactionItem, b: WalletCoreKit.TransactionItem) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.TransactionItem {
  public struct Order : Swift.Codable, Swift.Equatable {
    public let id: Swift.String?
    public let image: Swift.String?
    public let quantity: Swift.Int?
    public let category: Swift.String?
    public let isDigital: Swift.Bool?
    public let otherItemCount: Swift.Int?
    public let orderNumber: Swift.String?
    public let type: Swift.String?
    public let status: Swift.String?
    public static func == (a: WalletCoreKit.TransactionItem.Order, b: WalletCoreKit.TransactionItem.Order) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionItem {
  public struct Merchant : Swift.Codable, Swift.Equatable {
    public let brand: Swift.String?
    public let iconUrl: Swift.String?
    public let countryCode: Swift.String?
    public let currency: WalletCoreKit.TransactionItem.Currency?
    public static func == (a: WalletCoreKit.TransactionItem.Merchant, b: WalletCoreKit.TransactionItem.Merchant) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Currency : Swift.Codable, Swift.Equatable {
    public let symbol: Swift.String?
    public let code: Swift.String?
    public let decimalDigits: Swift.Double?
    public let rounding: Swift.String?
    public let thousandSeparator: Swift.String?
    public let decimalSeparator: Swift.String?
    public static func == (a: WalletCoreKit.TransactionItem.Currency, b: WalletCoreKit.TransactionItem.Currency) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionItem {
  public struct Reward : Swift.Codable, Swift.Equatable {
    public let type: Swift.String?
    public let wallet: Swift.String?
    public let value: Swift.String?
    public let collectedAt: Swift.String?
    public let expiredAt: Swift.String?
    public let unitType: Swift.String?
    public static func == (a: WalletCoreKit.TransactionItem.Reward, b: WalletCoreKit.TransactionItem.Reward) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.TransactionItem {
  public struct Metadata : Swift.Codable, Swift.Equatable {
    public let subscription: WalletCoreKit.TransactionItem.Subscription?
    public let qrisExchange: WalletCoreKit.TransactionItem.QrisExchange?
    public let paidMembership: WalletCoreKit.TransactionItem.PaidMembership?
    public static func == (a: WalletCoreKit.TransactionItem.Metadata, b: WalletCoreKit.TransactionItem.Metadata) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaidMembership : Swift.Codable, Swift.Equatable {
    public let name: Swift.String?
    public let value: Swift.Double?
    public let expiredAt: Swift.String?
    public static func == (a: WalletCoreKit.TransactionItem.PaidMembership, b: WalletCoreKit.TransactionItem.PaidMembership) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct QrisExchange : Swift.Codable, Swift.Equatable {
    public let status: Swift.String?
    public static func == (a: WalletCoreKit.TransactionItem.QrisExchange, b: WalletCoreKit.TransactionItem.QrisExchange) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Subscription : Swift.Codable, Swift.Equatable {
    public let periodType: Swift.String?
    public let periodValue: Swift.Int?
    public static func == (a: WalletCoreKit.TransactionItem.Subscription, b: WalletCoreKit.TransactionItem.Subscription) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class TransactionUseCase {
  public func getCardTransaction(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int, completion: @escaping (Swift.Result<[WalletCoreKit.TransactionItem], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVoucherTransaction(cardId: Swift.String, page: Swift.Int, perPage: Swift.Int, completion: @escaping (Swift.Result<[WalletCoreKit.TransactionItem], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func trackOrder(courierBrand: Swift.String, awbNumber: Swift.String, orderNumber: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.TransactionDeliveryTrackingDetailResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func rateStore(transactionId: Swift.String, rate: Swift.Int, description: Swift.String? = nil, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTransactionDetailv2(id: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.TransactionDetailsV2, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTransactionDetailv1(id: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.TransactionDetailsV1, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TransferPointUseCase {
  public func getTransferPointSenderInfo(cardId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.PointTransferSenderResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTransferPointRecipientInfo(identifier: Swift.String, maskedSenderId: Swift.String, completion: @escaping (Swift.Result<[WalletCoreKit.PointTransferReceiverResponse], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getTransferPointAmount(senderWalletId: Swift.String, senderCardNumber: Swift.String, receiverWalletId: Swift.String, receiverCardNumber: Swift.String, amount: Swift.Double, completion: @escaping (Swift.Result<WalletCoreKit.PointTransferConversionResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func submitTransferPoint(senderCardNumber: Swift.String, senderWalletID: Swift.String, receiverCardNumber: Swift.String, receiverWalletID: Swift.String, amount: Swift.Double, note: Swift.String?, pin: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.PointTransferProcessResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct UnreadNotificationResponse : Swift.Decodable {
  public let count: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct UpdateProfileRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(address: Swift.String? = nil, birthday: Swift.String? = nil, city: Swift.String? = nil, countryCode: Swift.String? = nil, email: Swift.String? = nil, imageUrl: Swift.String? = nil, language: Swift.String? = nil, name: Swift.String? = nil, occupation: Swift.String? = nil, phone: Swift.String? = nil, sex: Swift.String? = nil)
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct UseAtCashierRequest : WalletCoreKit.WalletCoreKitPayload {
  public init(qrCode: Swift.String, cardId: Swift.String)
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct UseAtCashierResponse : Swift.Decodable {
  public let id: Swift.String?
  public let username: Swift.String?
  public let currency: Swift.String?
  public let terminalId: Swift.String?
  public let store: WalletCoreKit.UseAtCashierResponse.Store?
  public func getTerminalDetail() -> WalletCoreKit.TerminalDetail
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.UseAtCashierResponse {
  public struct Store : Swift.Decodable {
    public let id: Swift.String?
    public let name: Swift.String?
    public let address: Swift.String?
    public let latitude: Swift.String?
    public let longitude: Swift.String?
    public let distributor: WalletCoreKit.UseAtCashierResponse.Distributor?
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Distributor : Swift.Decodable {
    public let countryName: Swift.String?
    public let currency: Swift.String?
    public let id: Swift.String?
    public let brand: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct User : Swift.Decodable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let imageUrl: Swift.String?
  public let name: Swift.String?
  public let phone: Swift.String?
  public let email: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class UserUseCase {
  @objc deinit
}
public enum ValueWrapper : Swift.Codable, Swift.Equatable, Swift.Hashable {
  case int(Swift.Int)
  case string(Swift.String)
  case double(Swift.Double)
  case bool(Swift.Bool)
  case dictionary([Swift.String : WalletCoreKit.ValueWrapper])
  public var getValue: Swift.String {
    get
  }
  public var getDictionary: [Swift.String : WalletCoreKit.ValueWrapper] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public init(initializeValue: Swift.Int)
  public init(initializeValue: Swift.String)
  public static func == (a: WalletCoreKit.ValueWrapper, b: WalletCoreKit.ValueWrapper) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Variant : Swift.Codable {
  public let sku: Swift.String?
  public let itemId: Swift.Int?
  public let stockId: Swift.Int?
  public let name: Swift.String?
  public let description: Swift.String?
  public let image: Swift.String?
  public let valueType: Swift.String?
  public let minPrice: Swift.Double?
  public let isMultiPrice: Swift.Bool?
  public let price: Swift.Double?
  public let sourceType: Swift.String?
  public let sourceId: Swift.String?
  public let active: Swift.Bool?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public let stock: WalletCoreKit.Variant.Stock?
  public let eGiftProperty: WalletCoreKit.Variant.EGiftProperty?
  public let vendorCode: WalletCoreKit.Variant.VendorCode?
  public let disabledStoreIds: [WalletCoreKit.ValueWrapper]?
  public let prefixNumber: Swift.String?
  public let convertedPrice: Swift.Double?
  public func getPriceTag() -> Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.Variant {
  public var id: Swift.String? {
    get
  }
  public struct VendorCode : Swift.Codable {
    public let exchangeMultiply: Swift.Double?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct EGiftProperty : Swift.Codable {
    public let id: Swift.Int?
    public let variantId: Swift.Int?
    public let term: Swift.String?
    public let defaultExpiryType: Swift.String?
    public let defaultExpiry: Swift.Int?
    public let eGiftSourceType: Swift.String?
    public let eGiftType: Swift.String?
    public let allowMultiVoucher: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Stock : Swift.Codable {
    public let id: Swift.Int?
    public let mId: Swift.String?
    public let stockType: Swift.String?
    public let name: Swift.String?
    public let terms: Swift.String?
    public let price: Swift.Double?
    public let defaultExpType: Swift.String?
    public let defaultExp: Swift.Int?
    public let isLimited: Swift.Bool?
    public let quantity: Swift.Int?
    public let availability: [Swift.String]?
    public let image: Swift.String?
    public let weight: Swift.Double?
    public let length: Swift.Double?
    public let height: Swift.Double?
    public let width: Swift.Double?
    public let active: Swift.Bool?
    public let denom: Swift.Double?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public let owner: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.Variant : Swift.Comparable {
  public static func < (lhs: WalletCoreKit.Variant, rhs: WalletCoreKit.Variant) -> Swift.Bool
  public static func == (lhs: WalletCoreKit.Variant, rhs: WalletCoreKit.Variant) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(VariantCoreData) public class VariantCoreData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension WalletCoreKit.VariantCoreData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<WalletCoreKit.VariantCoreData>
  @objc @NSManaged dynamic public var id: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var image: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var price: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointProgram: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var weight: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var width: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var height: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var length: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var quantity: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notes: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var item: WalletCoreKit.ItemCoreData? {
    @objc get
    @objc set
  }
}
public enum VerificationState {
  case error(any Swift.Error)
  case networkError(WalletCoreKit.TadaWalletKitError)
  case success(isNewUser: Swift.Bool, user: WalletCoreKit.ProfileResponse)
}
public enum ViewControllerName : Swift.String {
  case CardDetailViewController
  case ReferralPerkViewController
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class VirtualFranchiseUseCase {
  public func getCardVirtualFranchise(cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.AmbassadorProgram, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVirtualFranchiseItem(programId: Swift.String, categoryId: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 15, minPrice: Swift.Int = 0, maxPrice: Swift.Int = 50_000_000, sortProductOptions: WalletCoreKit.SortProductOptions, keyword: Swift.String? = nil, completion: @escaping (Swift.Result<[WalletCoreKit.AmbassadorProduct], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func getVirtualFranchiseHistory(programId: Swift.String, status: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 100, completion: @escaping (Swift.Result<[WalletCoreKit.AmbassadorHistory.Order], WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func shareVirtualFranchise(programId: Swift.String, cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.AmbassadorShareMessage, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func shareVirtualFranchiseItem(programId: Swift.String, itemId: Swift.String, cardId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.AmbassadorShareMessage, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func trackVirtualFranchise(ambassadorCode: Swift.String, ambassadorProgramId: Swift.String, platform: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
public struct VisualAttributes : Swift.Codable {
  public let showBtnChat: Swift.Bool?
  public let showBtnShop: Swift.Bool?
  public let showBtnFoodOrdering: Swift.Bool?
  public let showRewardExtTrans: Swift.Bool?
  public let showBtnUseCashier: Swift.Bool?
  public let showScanBarcode: Swift.Bool?
  public let nameColor: Swift.String?
  public let showNameOnCard: Swift.Bool?
  public let showDeliveryButton: Swift.Bool?
  public let deliveryType: Swift.String?
  public let deliveryCode: Swift.String?
  public let deliveryUrl: Swift.String?
  public let deliveryUrlOrderHistory: Swift.String?
  public let externalLink: Swift.String?
  public let foodOrderUrl: Swift.String?
  public let primaryColor: Swift.String?
  public let secondaryColor: Swift.String?
  public let customFieldNames: [Swift.String]?
  public let showCustomField: Swift.Bool?
  public let showActivityMission: Swift.Bool?
  public let fontColor: Swift.String?
  public let showScanQris: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum VoucherStatus : Swift.String {
  case activated
  case used
  case suspended
  case expired
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VoucherGroup {
  case archived
  case `default`
  public static func == (a: WalletCoreKit.VoucherGroup, b: WalletCoreKit.VoucherGroup) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DiscountType {
  case value
  case percentage
  case freeShippingFee
  case shippingFeeDiscount
  public static func == (a: WalletCoreKit.DiscountType, b: WalletCoreKit.DiscountType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VoucherPromo {
}
public enum WalletGroup {
  case archived
  case `default`
  public static func == (a: WalletCoreKit.WalletGroup, b: WalletCoreKit.WalletGroup) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WalletCoreKitAnyCodable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension WalletCoreKit.WalletCoreKitAnyCodable : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension WalletCoreKit.WalletCoreKitAnyCodable : Swift.Equatable {
  public static func == (lhs: WalletCoreKit.WalletCoreKitAnyCodable, rhs: WalletCoreKit.WalletCoreKitAnyCodable) -> Swift.Bool
}
extension WalletCoreKit.WalletCoreKitAnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension WalletCoreKit.WalletCoreKitAnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension WalletCoreKit.WalletCoreKitAnyCodable : Swift.ExpressibleByNilLiteral, Swift.ExpressibleByBooleanLiteral, Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByFloatLiteral, Swift.ExpressibleByStringLiteral, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral {
  public init(nilLiteral: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
  public typealias ArrayLiteralElement = Any
  public typealias BooleanLiteralType = Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias FloatLiteralType = Swift.Double
  public typealias IntegerLiteralType = Swift.Int
  public typealias Key = Swift.AnyHashable
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public typealias Value = Any
}
public struct WalletCoreKitBaseArrayResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let success: Swift.Bool?
  public let message: Swift.String?
  public let currentPage: Swift.Int?
  public let totalPage: Swift.Int?
  public let page: Swift.Int?
  public let perPage: Swift.Int?
  public let hasMorePage: Swift.Bool?
  public let count: Swift.Int?
  public let data: [T]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletCoreKitBaseResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let success: Swift.Bool?
  public let message: Swift.String?
  public var data: T?
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletCoreKitCardDetailResponse : Swift.Codable {
  public let id: Swift.String?
  public let no: Swift.String?
  public let distributionId: Swift.String?
  public let alias: Swift.String?
  public let status: Swift.String?
  public let pin: Swift.String?
  public let hasExpiry: Swift.Bool?
  public let activatedAt: Swift.String?
  public let expiredAt: Swift.String?
  public let group: Swift.String?
  public let balance: WalletCoreKit.WalletCoreKitCardDetailResponse.Balance?
  public let balanceList: [WalletCoreKit.WalletCoreKitCardDetailResponse.BalanceItem]?
  public let isFixedAddress: Swift.Bool?
  public let isUpdateCustomerRequired: Swift.Bool?
  public let isNeedGlobalId: Swift.Bool?
  public let gciUserId: Swift.String?
  public let customer: WalletCoreKit.Customer?
  public let cardProgram: WalletCoreKit.WalletCoreKitCardDetailResponse.Program?
  public let merchant: WalletCoreKit.Merchant?
  public let buyback: WalletCoreKit.Buyback?
  public let currency: WalletCoreKit.Currency?
  public let taxConfig: WalletCoreKit.TaxConfig?
  public let visualAttributes: WalletCoreKit.VisualAttributes?
  public let features: WalletCoreKit.Features?
  public let leadGenerations: [WalletCoreKit.LeadGeneration]?
  public let hasQrisExchange: Swift.Bool?
  public let walletId: Swift.String?
  public let devicePairingInfo: WalletCoreKit.WalletCoreKitCardDetailResponse.DevicePairingInfo?
  public func clearCache()
  public static func load(cardNumber: Swift.String) -> WalletCoreKit.WalletCoreKitCardDetailResponse?
  public var shortcutIconURLString: Swift.String? {
    get
  }
  public func isProductCard() -> Swift.Bool
  public func isProductTada360() -> Swift.Bool
  public func canRedeemedInHoldr() -> Swift.Bool
  public static func testModel(type: Swift.Int) -> WalletCoreKit.WalletCoreKitCardDetailResponse
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct DevicePairingInfo : Swift.Codable {
    public let isDefaultPairingDevice: Swift.Bool?
    public let isUserPairable: Swift.Bool?
    public let metadata: WalletCoreKit.WalletCoreKitCardDetailResponse.DevicePairingInfo.DevicePairingInfoMetaData?
    public let message: Swift.String?
    public struct DevicePairingInfoMetaData : Swift.Codable {
      public let deviceId: Swift.String?
      public let deviceName: Swift.String?
      public let deviceType: Swift.String?
      public let identityValue: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Action : Swift.Codable {
    public let suspend: Swift.Bool?
    public let deactivate: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Alias : Swift.Codable {
    public let id: Swift.Int?
    public let originalNumber: Swift.String?
    public let aliasNumber: Swift.String?
    public let distributionId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Ambassador : Swift.Codable {
    public let clicks: Swift.Int?
    public let total_reward: Swift.Double?
    public let pending: Swift.Int?
    public let sold: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Subscription : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let subscriptionNo: Swift.String?
    public let cardProgramSubscriptionId: Swift.Int?
    public let cardInventoryId: Swift.Int?
    public let gCIUserId: Swift.Int?
    public let startAt: Swift.String?
    public let endAt: Swift.String?
    public let status: Swift.String?
    public let source: Swift.String?
    public let paymentType: Swift.String?
    public let paymentStatus: Swift.String?
    public let paymentNo: Swift.String?
    public let apiUserId: Swift.Int?
    public let clientId: Swift.Int?
    public let transactionId: Swift.Int?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public let paymentRecurring: Swift.Bool?
    public let paymentResponse: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription.PaymentResponse?
    public var isActive: Swift.Bool {
      get
    }
    public var isPending: Swift.Bool {
      get
    }
    public static func == (a: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription, b: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription {
  public struct PaymentResponse : Swift.Codable, Swift.Equatable {
    public let maskedCardNumber: Swift.String?
    public let status: Swift.String?
    public static func == (a: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription.PaymentResponse, b: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription.PaymentResponse) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct User : Swift.Codable {
    public let address: Swift.String?
    public let birthday: Swift.String?
    public let city: Swift.String?
    public let cityId: WalletCoreKit.ValueWrapper?
    public let confirmationToken: Swift.String?
    public let confirmedAt: Swift.String?
    public let countryCode: Swift.String?
    public let createdAt: Swift.String?
    public let email: Swift.String?
    public let id: Swift.Int?
    public let imageUrl: Swift.String?
    public let isLocked: Swift.Bool?
    public let language: Swift.String?
    public let lockedUntil: Swift.String?
    public let loginAttempts: Swift.String?
    public let name: Swift.String?
    public let occupation: Swift.String?
    public let permissions: [Swift.String]?
    public let phone: Swift.String?
    public let referrerId: Swift.Int?
    public let sex: Swift.String?
    public let updatedAt: Swift.String?
    public let zipcode: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Loyalty : Swift.Codable {
    public let customer: WalletCoreKit.WalletCoreKitCardDetailResponse.Loyalty.Customer?
    public let updateCustomerRequired: Swift.Bool?
    public let waitUntil: Swift.String?
    public let wallet: [WalletCoreKit.WalletCoreKitCardDetailResponse.Loyalty.Customer.Wallet]?
    public let experience: Swift.Double?
    public let level: WalletCoreKit.ActiveLevelResponse?
    public let levels: [WalletCoreKit.LevelResponse]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Loyalty {
  public struct Customer : Swift.Codable {
    public let additionalData: [Swift.String : Swift.String?]?
    public let address: Swift.String?
    public let birthday: Swift.String?
    public let city: Swift.String?
    public let confirmedAt: Swift.String?
    public let email: Swift.String?
    public let id: Swift.Int?
    public let name: Swift.String?
    public let occupation: Swift.String?
    public let phone: Swift.String?
    public let sex: Swift.String?
    public struct AdditionalData : Swift.Codable {
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Wallet : Swift.Codable {
      public let walletId: Swift.String?
      public let conversion: WalletCoreKit.WalletCoreKitCardDetailResponse.Loyalty.Customer.Wallet.WalletConversion?
      public let distributionId: Swift.String?
      public let wallet: Swift.String?
      public let unitType: Swift.String?
      public let walletType: Swift.String?
      public let expiredAt: Swift.String?
      public let createdAt: Swift.String?
      public let updatedAt: Swift.String?
      public let isValidateMinimumPointToRedeem: Swift.Bool?
      public let minimumPointToRedeem: Swift.Double?
      public let isMinimumPointToRedeemMet: Swift.Bool?
      public let listBalances: [WalletCoreKit.WalletCoreKitCardDetailResponse.BalanceList]?
      public var id: Swift.Int {
        get
      }
      public var cardInventoryId: Swift.Int {
        get
      }
      public var merchantId: Swift.Int {
        get
      }
      public var balance: Swift.Double {
        get
      }
      public struct WalletConversion : Swift.Codable {
        public let type: Swift.String?
        public let divider: Swift.Double?
        public let multiplier: Swift.Double?
        public let redeem: Swift.Double?
        public let redeemType: Swift.String?
        public let redeemDivider: Swift.Double?
        public let redeemMultiplier: Swift.Double?
        public let maxRedeem: Swift.Double?
        public let topup: Swift.Double?
        public let topupType: Swift.String?
        public let topupDivider: Swift.Double?
        public let topupMultiplier: Swift.Double?
        public let maxTopup: Swift.Double?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Balance : Swift.Codable {
    public let balance: Swift.Double?
    public let convertedAmount: Swift.Double?
    public let amountType: Swift.String?
    public let expired: Swift.String?
    public let hasExpiry: Swift.Bool?
    public let name: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.Merchant {
  public struct Currency : Swift.Codable {
    public let code: Swift.String?
    public let decimalDigits: Swift.Int?
    public let decimalSeparator: Swift.String?
    public let name: Swift.String?
    public let namePlural: Swift.String?
    public let rounding: Swift.Int?
    public let symbol: Swift.String?
    public let symbolNative: Swift.String?
    public let thousandSeparator: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct BalanceList : Swift.Codable {
    public let collectedAt: Swift.String?
    public let expiredAt: Swift.String?
    public var balance: Swift.Double {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BalanceItem : Swift.Codable {
    public let collectedAt: Swift.String?
    public let expiredAt: Swift.String?
    public var balance: Swift.Double {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Card : Swift.Codable {
    public let activatedAt: Swift.String?
    public let activationCode: Swift.String?
    public let balance: Swift.Double?
    public let batchNum: Swift.Int?
    public let cardBatchMasterId: Swift.Int?
    public let createdAt: Swift.String?
    public let distributionId: Swift.String?
    public let expiredAt: Swift.String?
    public let group: Swift.String?
    public let hasExpiry: Swift.Bool?
    public let id: Swift.Int?
    public let maskedId: Swift.String?
    public let isNeedGlobalId: Swift.Bool?
    public let lastLoginAt: Swift.String?
    public let membershipCard: Swift.Bool?
    public let no: Swift.String?
    public let phone: Swift.String?
    public let pin: Swift.String?
    public let pinLastUpdate: Swift.String?
    public let programId: Swift.String?
    public let status: Swift.String?
    public let track: Swift.String?
    public let track2: Swift.String?
    public let updatedAt: Swift.String?
    public let userId: Swift.Int?
    public let isFixedAddress: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct Program : Swift.Codable {
    public enum ExpiryType : Swift.String {
      case normal
      case multiple
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let id: Swift.String?
    public let productType: Swift.String?
    public let programType: Swift.String?
    public let programId: Swift.String?
    public let programName: Swift.String?
    public let active: Swift.Bool?
    public let imageUrl: Swift.String?
    public let iconUrl: Swift.String?
    public let enablePin: Swift.Bool?
    public let isPointProgram: Swift.Bool?
    public let pointProgramRate: Swift.Double?
    public let pointTopupRate: Swift.Double?
    public let isBalanceHide: Swift.Bool?
    public let isLevelHide: Swift.Bool?
    public let buyCatalogId: Swift.String?
    public let isConvertReward: Swift.Bool?
    public let isPromoted: Swift.Bool?
    public let promotedProgram: [Swift.String]?
    public let isRequiredCustomerData: Swift.Bool?
    public let isCustomerDataTemplate: Swift.Bool?
    public let customerDataRules: [WalletCoreKit.CustomerDataRules]?
    public let registrationForm: [WalletCoreKit.WalletCoreKitCardDetailResponse.Program.RegistrationForm]?
    public let balanceExpiryType: Swift.String?
    public let allowMixPayment: Swift.Bool?
    public let enableChannelIncentive: Swift.Bool?
    public let menus: [WalletCoreKit.WalletCoreKitCardDetailResponse.Program.Menu]?
    public let shippingFeeRule: WalletCoreKit.ShippingFeeRule?
    public let landingPageImage: Swift.String?
    public struct Menu : Swift.Codable {
      public enum IconType : Swift.String {
        case officialStore
        case chatUs
        case redeem
        case getRewards
        case history
        case referral
        case pay
        case leads
        case scanQr
        case mission
        case deliveryOrder
        case foodOrder
        case voucher
        case qris
        case privilege
        case subscription
        case withdrawal
        case sellItems
        case more
        case custom
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public enum Action : Swift.String {
        case inApp
        case privilege
        case externalLink
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public init(position: Swift.Int?, name: Swift.String?, icon: Swift.String?, type: Swift.String?, key: Swift.String?, show: Swift.Bool?)
      public let position: Swift.Int?
      public let name: Swift.String?
      public let icon: Swift.String?
      public let type: Swift.String?
      public let key: Swift.String?
      public let show: Swift.Bool?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct PointProgram : Swift.Codable {
    public let cardNo: Swift.String?
    public let balance: Swift.Double?
    public let suspended: Swift.Bool?
    public let expired: Swift.String?
    public let hasExpiry: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program {
  public struct RegistrationForm : Swift.Codable {
    public init(id: Swift.String?, name: Swift.String? = nil, type: Swift.String? = nil, additional: WalletCoreKit.Additional?, position: Swift.Int?, isRequired: Swift.Bool? = nil, isReadonly: Swift.Bool? = nil, isDisabled: Swift.Bool? = nil, labels: WalletCoreKit.Labels? = nil, options: [WalletCoreKit.RegistrationOption]? = nil)
    public let id: Swift.String?
    public var name: Swift.String?
    public var type: Swift.String?
    public let additional: WalletCoreKit.Additional?
    public let position: Swift.Int?
    public var isRequired: Swift.Bool?
    public var isReadonly: Swift.Bool?
    public var isDisabled: Swift.Bool?
    public var labels: WalletCoreKit.Labels?
    public var Labels: WalletCoreKit.Labels?
    public var options: [WalletCoreKit.RegistrationOption]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AmbassadorProgram : Swift.Codable {
    public let metas: WalletCoreKit.WalletCoreKitCardDetailResponse.Program.AmbassadorProgram.Metas?
    public let id: Swift.Int?
    public let ambassadorCardProgram: WalletCoreKit.WalletCoreKitCardDetailResponse.Program.AmbassadorProgram.AmbassadorCardProgram?
    public struct AmbassadorCardProgram : Swift.Codable {
      public let id: Swift.Int?
      public let ambassadorProgramId: Swift.Int?
      public let cardProgramId: Swift.Int?
      public let confirmedAt: Swift.String?
      public let createdAt: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Metas : Swift.Codable {
      public let bannerColor: Swift.String?
      public let bannerCaption: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardProgramSubscription : Swift.Codable {
    public let id: Swift.Int?
    public let cardProgramId: Swift.Int?
    public let periodType: Swift.String?
    public let periodValue: Swift.Int?
    public let price: Swift.Double?
    public let priceTag1: Swift.String?
    public let priceTag2: Swift.String?
    public let savedPrice: Swift.String?
    public let color: Swift.String?
    public let description: Swift.String?
    public let imageUrl: Swift.String?
    public let isActive: Swift.Bool?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardProgramBuybackConfig : Swift.Codable {
    public let id: Swift.Int?
    public let cardProgramId: Swift.Int?
    public let relationType: Swift.String?
    public let relationId: Swift.String?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program {
  public struct CardProgramProfile : Swift.Codable {
    public let cardProgramId: Swift.Int?
    public let createdAt: Swift.String?
    public let iconUrl: Swift.String?
    public let id: Swift.Int?
    public let imageUrl: Swift.String?
    public let logoUrl: Swift.String?
    public let profilable: Swift.String?
    public let profilableId: Swift.Int?
    public let updatedAt: Swift.String?
    public let menus: [WalletCoreKit.WalletCoreKitCardDetailResponse.Program.CardProgramProfile.Menu]?
    public let visualAttributes: WalletCoreKit.WalletCoreKitCardDetailResponse.Program.CardProgramProfile.VisualAttributes?
    public struct VisualAttributes : Swift.Codable {
      public let showBtnChat: Swift.Bool?
      public let showBtnShop: Swift.Bool?
      public let showBtnFoodOrdering: Swift.Bool?
      public let showRewardExtTrans: Swift.Bool?
      public let showBtnUseCashier: Swift.Bool?
      public let showScanBarcode: Swift.Bool?
      public let nameColor: Swift.String?
      public let showNameOnCard: Swift.Bool?
      public let showDeliveryButton: Swift.Bool?
      public let deliveryType: Swift.String?
      public let deliveryCode: Swift.String?
      public let deliveryUrl: Swift.String?
      public let deliveryUrlOrderHistory: Swift.String?
      public let externalLink: Swift.String?
      public let foodOrderingUrl: Swift.String?
      public let primaryColor: Swift.String?
      public let secondaryColor: Swift.String?
      public let customFieldNames: [Swift.String]?
      public let showCustomField: Swift.Bool?
      public let showActivityMission: Swift.Bool?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Menu : Swift.Codable {
      public init(position: Swift.Int?, name: Swift.String?, icon: Swift.String?, type: Swift.String?, key: Swift.String?, show: Swift.Bool?)
      public let position: Swift.Int?
      public let name: Swift.String?
      public let icon: Swift.String?
      public let type: Swift.String?
      public let key: Swift.String?
      public let show: Swift.Bool?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program {
  public struct CustomerDataRule : Swift.Codable {
    public let birthday: Swift.Bool?
    public let city: Swift.Bool?
    public let email: Swift.Bool?
    public let name: Swift.Bool?
    public let phone: Swift.Bool?
    public let sex: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program {
  public struct LandingPageTemplate : Swift.Codable {
    public let backgroundColor: Swift.String?
    public let caption: Swift.String?
    public let createdAt: Swift.String?
    public let deletedAt: Swift.String?
    public let description: Swift.String?
    public let id: Swift.Int?
    public let imageUrl: Swift.String?
    public let intermediaryPageLink: Swift.String?
    public let merchantId: Swift.Int?
    public let metaDescription: Swift.String?
    public let metaKeyword: Swift.String?
    public let name: Swift.String?
    public let ogDescription: Swift.String?
    public let ogImageUrl: Swift.String?
    public let ogTitle: Swift.String?
    public let ogUrl: Swift.String?
    public let title: Swift.String?
    public let twitterDescription: Swift.String?
    public let twitterImageAlt: Swift.String?
    public let twitterImageUrl: Swift.String?
    public let twitterTitle: Swift.String?
    public let updatedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct ActiveLevelResponse : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case CardInventoryId
    case MerchantId
    case distributionId
    case name
    case minimumExperience
    case cycle
    case ignoreCycle
    case activatedAt
    case expiredAt
    case createdAt
    case updatedAt
    case cardImageUrl
    case color
    case icon
    case description
    case levelId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.Int?
  public let CardInventoryId: Swift.Int?
  public let MerchantId: Swift.Int?
  public let distributionId: Swift.String?
  public let name: Swift.String?
  public let minimumExperience: Swift.Double?
  public let cycle: Swift.String?
  public let ignoreCycle: Swift.Bool?
  public let activatedAt: Swift.String?
  public let expiredAt: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let cardImageUrl: Swift.String?
  public let color: Swift.String?
  public let icon: Swift.String?
  public let description: Swift.String?
  public let levelId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LevelType {
  case spending
  case pointCollection
  public static func == (a: WalletCoreKit.LevelType, b: WalletCoreKit.LevelType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LevelResponse : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id
    case merchantId
    case name
    case experience
    case retentionExperience
    case cycle
    case ignoreCycle
    case upgradedBy
    case downgradedBy
    case orderType
    case orderPosition
    case cardImageUrl
    case color
    case icon
    case description
    case createdAt
    case updatedAt
    case deletedAt
    case type
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let merchantId: Swift.String?
  public let name: Swift.String?
  public let experience: Swift.Double?
  public let retentionExperience: Swift.Double?
  public let cycle: Swift.String?
  public let ignoreCycle: Swift.Bool?
  public let upgradedBy: Swift.String?
  public let downgradedBy: Swift.String?
  public let orderType: Swift.String?
  public let orderPosition: Swift.Int?
  public let cardImageUrl: Swift.String?
  public let color: Swift.String?
  public let icon: Swift.String?
  public let description: Swift.String?
  public let createdAt: Swift.String?
  public let updatedAt: Swift.String?
  public let deletedAt: Swift.String?
  public let type: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse {
  public struct ActiveSubscription : Swift.Codable, Swift.Equatable {
    public let subscriptionNo: Swift.String?
    public let startAt: Swift.String?
    public let endAt: Swift.String?
    public let status: Swift.String?
    public let source: Swift.String?
    public let payment: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.Payment?
    public let subscriptionProgram: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.SubscriptionProgram?
    public let isDailyReward: Swift.Bool?
    public let dailyRewards: [WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.DailyReward]?
    public static func == (a: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription, b: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription {
  public struct DailyReward : Swift.Codable, Swift.Equatable {
    public let subscriptionId: Swift.Int?
    public let subscriptionDirectRewardId: Swift.Int?
    public let rewardName: Swift.String?
    public let imageUrl: Swift.String?
    public let claimed: Swift.Bool?
    public let milisecondFromNow: Swift.Double?
    public let quantity: Swift.Int?
    public static func == (a: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.DailyReward, b: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.DailyReward) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct SubscriptionProgram : Swift.Codable, Swift.Equatable {
    public let periodType: Swift.String?
    public let periodValue: Swift.Int?
    public let price: Swift.Double?
    public let normalPriceTag: Swift.String?
    public let salePriceTag: Swift.String?
    public let savedPriceTag: Swift.String?
    public let themeColor: Swift.String?
    public let imageUrl: Swift.String?
    public let isActive: Swift.Bool?
    public let isTerminated: Swift.Bool?
    public static func == (a: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.SubscriptionProgram, b: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.SubscriptionProgram) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Payment : Swift.Codable, Swift.Equatable {
    public let channel: Swift.String?
    public let type: Swift.String?
    public let response: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription.PaymentResponse?
    public let recurring: Swift.Bool?
    public static func == (a: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.Payment, b: WalletCoreKit.WalletCoreKitCardDetailResponse.ActiveSubscription.Payment) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct WalletCoreKitCountryCode : Swift.Codable {
  public init(name: Swift.String?, dialCode: Swift.String?, example: Swift.String?, code: Swift.String?)
  public let name: Swift.String?
  public let dialCode: Swift.String?
  public let example: Swift.String?
  public let code: Swift.String?
  public static let defaultCountryCode: WalletCoreKit.WalletCoreKitCountryCode
  public static let emptyCountryCode: WalletCoreKit.WalletCoreKitCountryCode
  public static let unitedStatesCountryCode: WalletCoreKit.WalletCoreKitCountryCode
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.WalletCoreKitCountryCode : Swift.Equatable {
  public static func == (lhs: WalletCoreKit.WalletCoreKitCountryCode, rhs: WalletCoreKit.WalletCoreKitCountryCode) -> Swift.Bool
}
public let TADACalendar: Foundation.Calendar
public enum WalletCoreKitDateFormat {
  public static func seconds(_ dateString: Swift.String, timeZone: Foundation.TimeZone? = nil, locale: Foundation.Locale = Locale(identifier: "en_US_POSIX"), calendar: Foundation.Calendar = Calendar(identifier: .gregorian), dateFormat: Swift.String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ") -> Foundation.TimeInterval?
  public static func date(from dateString: Swift.String, dateFormat: Swift.String, timeZone: Foundation.TimeZone? = nil, locale: Foundation.Locale = Locale(identifier: "en_US_POSIX"), calendar: Foundation.Calendar = Calendar(identifier: .gregorian)) -> Foundation.Date?
  public static func date(secondsInUTC seconds: Foundation.TimeInterval, dateStyle: Foundation.DateFormatter.Style = .none, timeStyle: Foundation.DateFormatter.Style = .none, timeZone: Foundation.TimeZone? = nil, locale: Foundation.Locale = Locale.current, calendar: Foundation.Calendar = Calendar.current) -> Swift.String
  public static func date(_ date: Foundation.Date, dateStyle: Foundation.DateFormatter.Style = .none, timeStyle: Foundation.DateFormatter.Style = .none, timeZone: Foundation.TimeZone? = nil, locale: Foundation.Locale = Locale.current, calendar: Foundation.Calendar = Calendar.current) -> Swift.String
  public static func date(secondsInUTC seconds: Foundation.TimeInterval, template: Swift.String, timeZone: Foundation.TimeZone? = nil, locale: Foundation.Locale = Locale.current, calendar: Foundation.Calendar = Calendar.current) -> Swift.String
  public static func duration(secondsInUTC seconds: Foundation.TimeInterval, abbreviate: Swift.Bool = false, useToGo: Swift.Bool = false, locale: Foundation.Locale = Locale(identifier: "en_US_POSIX"), calendar: Foundation.Calendar = Calendar.current) -> (time: Swift.String, unit: Swift.String)
  public static func relative(secondsInUTC seconds: Foundation.TimeInterval, threshold thresholdInDays: Swift.Int = defaultThresholdInDays, timeZone: Foundation.TimeZone? = nil, locale: Foundation.Locale = Locale.current, calendar: Foundation.Calendar = Calendar.current) -> Swift.String
  public static func convertToDate(_ dateString: Swift.String?, dateFormat: Swift.String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ", locale: Foundation.Locale = Locale(identifier: "en_US_POSIX"), calendar: Foundation.Calendar = Calendar(identifier: .gregorian)) -> Foundation.Date?
  public static func convertToString(_ date: Foundation.Date, dateFormat: Swift.String = "yyyy-MM-dd'T'HH:mm:ss.SSSZ", locale: Foundation.Locale = Locale(identifier: "en_US_POSIX"), calendar: Foundation.Calendar = Calendar(identifier: .gregorian)) -> Swift.String?
}
extension Foundation.Date {
  public func get(_ components: Foundation.Calendar.Component..., calendar: Foundation.Calendar = Calendar.current) -> Foundation.DateComponents
  public func get(_ component: Foundation.Calendar.Component, calendar: Foundation.Calendar = Calendar.current) -> Swift.Int
  public var removeTimeStamp: Foundation.Date? {
    get
  }
}
extension Foundation.Date {
  public var isExpired: Swift.Bool {
    get
  }
}
public struct WalletCoreKitManageAddressRequest : WalletCoreKit.WalletCoreKitPayload {
  public var parameters: [Swift.String : Any]? {
    get
  }
}
public struct MissionTaskDetailV1Response : Swift.Codable {
  public let maskedId: Swift.String?
  public let maskedMemberActivityMissionId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletCoreKitMissionTaskDetailResponse : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let needApproval: Swift.Bool?
  public let taskType: Swift.String?
  public let TemplateId: Swift.String?
  public let imageUrl: Swift.String?
  public let startAt: Swift.String?
  public let endAt: Swift.String?
  public let description: Swift.String?
  public let rewards: [WalletCoreKit.MissionsListResponse.Reward]?
  public let questions: [WalletCoreKit.WalletCoreKitCardDetailResponse.Program.RegistrationForm]?
  public let memberActivityMissionTask: WalletCoreKit.WalletCoreKitMissionTaskDetailResponse.MissionTask?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.WalletCoreKitMissionTaskDetailResponse {
  public struct MissionTask : Swift.Codable {
    public let id: Swift.String?
    public let MemberActivityMissionId: Swift.String?
    public let TaskId: Swift.String?
    public let status: Swift.String?
    public let reason: Swift.String?
    public let submissions: [WalletCoreKit.WalletCoreKitMissionTaskDetailResponse.MissionTask.MissionTaskSubmission]?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension WalletCoreKit.WalletCoreKitMissionTaskDetailResponse.MissionTask {
  public struct MissionTaskSubmission : Swift.Codable {
    public let id: Swift.String?
    public let questionId: Swift.String?
    public let questionText: Swift.String?
    public let questionType: Swift.String?
    public let answer: Swift.String?
    public let createdAt: Swift.String?
    public let updatedAt: Swift.String?
    public let deletedAt: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct WalletCoreKitOCRKTPResponse : Swift.Codable {
  public let nik: Swift.String?
  public let name: Swift.String?
  public let birthdayPlace: Swift.String?
  public let birthday: Swift.String?
  public let sex: Swift.String?
  public let province: Swift.String?
  public let city: Swift.String?
  public let suburb: Swift.String?
  public let area: Swift.String?
  public let address: Swift.String?
  public let rtrw: Swift.String?
  public let religion: Swift.String?
  public let marital: Swift.String?
  public let job: Swift.String?
  public let nationality: Swift.String?
  public let provinceId: Swift.String?
  public let cityId: Swift.String?
  public let suburbId: Swift.String?
  public let areaId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol WalletCoreKitPayload {
  var parameters: [Swift.String : Any]? { get }
  var body: Foundation.Data? { get }
  var queryItems: [Foundation.URLQueryItem]? { get }
}
extension WalletCoreKit.WalletCoreKitPayload {
  public var parameters: [Swift.String : Any]? {
    get
  }
  public var body: Foundation.Data? {
    get
  }
  public var queryItems: [Foundation.URLQueryItem]? {
    get
  }
}
public struct WalletCoreKitRegionResponse : Swift.Codable {
  public let id: WalletCoreKit.WalletCoreKitAnyCodable?
  public let active: Swift.Bool?
  public let name: Swift.String?
  public let code: Swift.String?
  public let postCode: Swift.String?
  public let suburbId: Swift.String?
  public let areaId: Swift.String?
  public let provinceId: Swift.String?
  public let cityId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletCoreKitRegisterOpenMemberRules : Swift.Decodable {
  public let id: Swift.String?
  public let programId: Swift.String?
  public let programName: Swift.String?
  public let countryCode: Swift.String?
  public let imageUrl: Swift.String?
  public let isLocked: Swift.Bool?
  public let customerDataRules: [WalletCoreKit.CustomerDataRules]?
  public let isCustomerDataTemplate: Swift.Bool?
  public let registrationForm: [WalletCoreKit.RegistrationForm]?
  public init(from decoder: any Swift.Decoder) throws
}
final public class RegisterOpenMemberRulesViewModel {
  public enum ExpiryType : Swift.String {
    case normal
    case multiple
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(openMembershipRules: WalletCoreKit.WalletCoreKitRegisterOpenMemberRules)
  final public var isTemplateCustomerData: Swift.Bool {
    get
  }
  final public var registrationForm: [WalletCoreKit.RegistrationForm] {
    get
  }
  final public var countryCode: Swift.String {
    get
  }
  @objc deinit
}
public protocol WalletCoreKitTokenType {
  var bearerToken: Swift.String { get }
  var type: Swift.String { get }
  var value: Swift.String { get }
}
public struct WaletCoreKitToken : WalletCoreKit.WalletCoreKitTokenType {
  public let type: Swift.String
  public let value: Swift.String
  public init(type: Swift.String, value: Swift.String)
  public var bearerToken: Swift.String {
    get
  }
}
public struct WalletCoreKitUserCustomerResponse : Swift.Codable {
  public let id: Swift.String?
  public var name: Swift.String?
  public var type: Swift.String?
  public let additional: WalletCoreKit.Additional?
  public var isRequired: Swift.Bool?
  public var isReadonly: Swift.Bool?
  public var isDisabled: Swift.Bool?
  public var question: Swift.String?
  public var placeholder: Swift.String?
  public var options: [WalletCoreKit.WalletCoreKitUserCustomerResponse.Options]?
  public var answer: Swift.String?
  public struct Options : Swift.Codable {
    public init(value: Swift.String?, isDefault: Swift.Bool?, label: Swift.String?)
    public let value: Swift.String?
    public let isDefault: Swift.Bool?
    public let label: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func convertToCardDetailsRegisterForm(customerData: WalletCoreKit.WalletCoreKitUserCustomerResponse) -> WalletCoreKit.WalletCoreKitCardDetailResponse.Program.RegistrationForm
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WalletResponse : Swift.Codable, Swift.Equatable {
  public static func == (lhs: WalletCoreKit.WalletResponse, rhs: WalletCoreKit.WalletResponse) -> Swift.Bool
  public let id: Swift.String?
  public let balance: Swift.Double?
  public let balanceName: Swift.String?
  public let balanceType: Swift.String?
  public let _balanceName: Swift.String?
  public let _balanceType: Swift.String?
  public let brand: Swift.String?
  public let expiredDate: Swift.String?
  public let eGiftList: [WalletCoreKit.WalletResponse.EGiftList]?
  public let groupName: Swift.String?
  public let hasExpiry: Swift.Bool?
  public let _hasExpiry: Swift.Bool?
  public let image: Swift.String?
  public let imageUrl: Swift.String?
  public let isBalance: Swift.Bool?
  public let isBalanceHide: Swift.Bool?
  public let isMerchantActive: Swift.Bool?
  public let isProgramActive: Swift.Bool?
  public let isPointProgram: Swift.Bool?
  public let isRegister: Swift.Bool?
  public let mID: Swift.String?
  public let _mID: Swift.String?
  public let name: Swift.String?
  public let number: Swift.String?
  public let _number: Swift.String?
  public let productType: Swift.String?
  public let programID: Swift.String?
  public let programName: Swift.String?
  public let status: Swift.String?
  public let walletID: Swift.String?
  public let _walletID: Swift.String?
  public let cardIcon: Swift.String?
  public let cardProgram: WalletCoreKit.WalletResponse.CardProgramProfile?
  public let visualAttributes: WalletCoreKit.WalletCoreKitCardDetailResponse.Program.CardProgramProfile.VisualAttributes?
  public let subscription: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription?
  public let isDailyReward: Swift.Bool?
  public let primaryColor: Swift.String?
  public let secondaryColor: Swift.String?
  public let usedDate: Swift.String?
  public let iconUrl: Swift.String?
  public let currencyCode: Swift.String?
  public init(id: Swift.String? = nil, balance: Swift.Double? = nil, balanceName: Swift.String? = nil, balanceType: Swift.String? = nil, brand: Swift.String? = nil, expiredDate: Swift.String? = nil, eGiftList: [WalletCoreKit.WalletResponse.EGiftList]? = nil, groupName: Swift.String? = nil, hasExpiry: Swift.Bool? = nil, image: Swift.String? = nil, isBalance: Swift.Bool? = nil, isBalanceHide: Swift.Bool? = nil, isMerchantActive: Swift.Bool? = nil, isProgramActive: Swift.Bool? = nil, isRegister: Swift.Bool? = nil, mID: Swift.String? = nil, number: Swift.String?, productType: Swift.String? = nil, programID: Swift.String? = nil, programName: Swift.String? = nil, status: Swift.String? = nil, walletID: Swift.String? = nil, cardIcon: Swift.String? = nil, cardProgram: WalletCoreKit.WalletResponse.CardProgramProfile? = nil, subscription: WalletCoreKit.WalletCoreKitCardDetailResponse.Subscription? = nil, isDailyReward: Swift.Bool? = nil, primaryColor: Swift.String? = nil, secondaryColor: Swift.String? = nil, cardProgramIsActive: Swift.Bool? = nil, imageUrl: Swift.String? = nil, usedDate: Swift.String? = nil, iconUrl: Swift.String? = nil, currencyCode: Swift.String? = nil)
  public static func convertToEGiftList(data: WalletCoreKit.WalletResponse) -> WalletCoreKit.Egift
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension WalletCoreKit.WalletResponse {
  public struct EGiftList : Swift.Codable, Swift.Equatable {
    public let image: Swift.String?
    public let name: Swift.String?
    public let expiredDate: Swift.String?
    public let number: Swift.String?
    public let status: Swift.String?
    public let mID: Swift.String?
    public let walletID: Swift.String?
    public let isReachLimitDailyUsage: Swift.Bool?
    public init(image: Swift.String?, name: Swift.String?, expiredDate: Swift.String?, number: Swift.String?, status: Swift.String?, mID: Swift.String?, walletID: Swift.String?, isReachLimitDailyUsage: Swift.Bool?)
    public static func == (a: WalletCoreKit.WalletResponse.EGiftList, b: WalletCoreKit.WalletResponse.EGiftList) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardProgramProfile : Swift.Codable, Swift.Equatable {
    public let id: Swift.Int?
    public let active: Swift.Bool?
    public let programName: Swift.String?
    public let productType: Swift.String?
    public let paymentType: Swift.String?
    public let balanceName: Swift.String?
    public let isPointProgram: Swift.Bool?
    public let isBalanceHide: Swift.Bool?
    public let merchant: WalletCoreKit.Merchant?
    public let cardProgramProfile: WalletCoreKit.WalletResponse.CardProfile?
    public static func == (lhs: WalletCoreKit.WalletResponse.CardProgramProfile, rhs: WalletCoreKit.WalletResponse.CardProgramProfile) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardProfile : Swift.Codable {
    public typealias VisualAttibutes = WalletCoreKit.WalletCoreKitCardDetailResponse.Program.CardProgramProfile.VisualAttributes?
    public let visualAttributes: WalletCoreKit.WalletResponse.CardProfile.VisualAttibutes
    public let imageUrl: Swift.String?
    public let iconUrl: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_inheritsConvenienceInitializers @objc(PVSecureDefaults) public class WalletSecureDefaults : Foundation.UserDefaults {
  public static let shared: WalletCoreKit.WalletSecureDefaults
  public var keychainAccessible: Swift.String
  public var keychainAccessGroup: Swift.String?
  public var password: Swift.String? {
    get
    set
  }
  public var key: Foundation.Data! {
    get
    set
  }
  public var isKeyCreated: Swift.Bool {
    get
  }
  public var IV: Foundation.Data! {
    get
    set
  }
  @objc override dynamic public init?(suiteName suitename: Swift.String?)
  public func rawObject(forKey defaultName: Swift.String) -> Any?
  public func setRawObject(_ value: Any?, forKey defaultName: Swift.String)
  @objc override dynamic public func object(forKey defaultName: Swift.String) -> Any?
  @objc override dynamic public func set(_ value: Any?, forKey defaultName: Swift.String)
  @objc override dynamic public func set(_ value: Swift.Int, forKey defaultName: Swift.String)
  @objc override dynamic public func set(_ value: Swift.Float, forKey defaultName: Swift.String)
  @objc override dynamic public func set(_ value: Swift.Double, forKey defaultName: Swift.String)
  @objc override dynamic public func set(_ value: Swift.Bool, forKey defaultName: Swift.String)
  @objc override dynamic public func set(_ url: Foundation.URL?, forKey defaultName: Swift.String)
  @objc override dynamic public func string(forKey defaultName: Swift.String) -> Swift.String?
  @objc override dynamic public func array(forKey defaultName: Swift.String) -> [Any]?
  @objc override dynamic public func dictionary(forKey defaultName: Swift.String) -> [Swift.String : Any]?
  @objc override dynamic public func data(forKey defaultName: Swift.String) -> Foundation.Data?
  @objc override dynamic public func stringArray(forKey defaultName: Swift.String) -> [Swift.String]?
  @objc override dynamic public func integer(forKey defaultName: Swift.String) -> Swift.Int
  @objc override dynamic public func float(forKey defaultName: Swift.String) -> Swift.Float
  @objc override dynamic public func double(forKey defaultName: Swift.String) -> Swift.Double
  @objc override dynamic public func bool(forKey defaultName: Swift.String) -> Swift.Bool
  @objc override dynamic public func url(forKey defaultName: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WalletUseCase {
  public func getCardList(page: Swift.Int = 1, perPage: Swift.Int = 25, completion: @escaping (Swift.Result<WalletCoreKit.PaginatedResult<WalletCoreKit.Card>, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func searchWallets(keyword: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.SearchCardsResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func deleteWallet(walletId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func deleteWallets(walletIds: [Swift.String], completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func moveWallet(moveTo: WalletCoreKit.WalletGroup, walletId: Swift.String, completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  public func moveWallets(moveTo: WalletCoreKit.WalletGroup, walletIds: [Swift.String], completion: @escaping (Swift.Result<WalletCoreKit.MessageResponse, WalletCoreKit.TadaWalletKitError>) -> Swift.Void)
  @objc deinit
}
extension WalletCoreKit.SortProductOptions : Swift.Equatable {}
extension WalletCoreKit.SortProductOptions : Swift.Hashable {}
extension WalletCoreKit.CardNotificationPreferencesResponse.Settings : Swift.Equatable {}
extension WalletCoreKit.CardNotificationPreferencesResponse.Settings : Swift.Hashable {}
extension WalletCoreKit.CardNotificationPreferencesResponse.Settings : Swift.RawRepresentable {}
extension WalletCoreKit.TransactionType : Swift.Equatable {}
extension WalletCoreKit.TransactionType : Swift.Hashable {}
extension WalletCoreKit.CatalogType : Swift.Equatable {}
extension WalletCoreKit.CatalogType : Swift.Hashable {}
extension WalletCoreKit.CatalogType : Swift.RawRepresentable {}
extension WalletCoreKit.PhoneNumberError : Swift.Equatable {}
extension WalletCoreKit.PhoneNumberError : Swift.Hashable {}
extension WalletCoreKit.PhoneNumberFormat : Swift.Equatable {}
extension WalletCoreKit.PhoneNumberFormat : Swift.Hashable {}
extension WalletCoreKit.PhoneNumberType : Swift.Equatable {}
extension WalletCoreKit.PhoneNumberType : Swift.Hashable {}
extension WalletCoreKit.PhoneNumberType : Swift.RawRepresentable {}
extension WalletCoreKit.PossibleLengthType : Swift.Equatable {}
extension WalletCoreKit.PossibleLengthType : Swift.Hashable {}
extension WalletCoreKit.PossibleLengthType : Swift.RawRepresentable {}
extension WalletCoreKit.ExternalPaymentResponse.Payment.GroupType : Swift.Equatable {}
extension WalletCoreKit.ExternalPaymentResponse.Payment.GroupType : Swift.Hashable {}
extension WalletCoreKit.ExternalPaymentResponse.Payment.GroupType : Swift.RawRepresentable {}
extension WalletCoreKit.ItemType : Swift.Equatable {}
extension WalletCoreKit.ItemType : Swift.Hashable {}
extension WalletCoreKit.ItemType : Swift.RawRepresentable {}
extension WalletCoreKit.MetadataTerritory.CodingKeys : Swift.Equatable {}
extension WalletCoreKit.MetadataTerritory.CodingKeys : Swift.Hashable {}
extension WalletCoreKit.MetadataTerritory.CodingKeys : Swift.RawRepresentable {}
extension WalletCoreKit.MetadataPhoneNumberFormat.CodingKeys : Swift.Equatable {}
extension WalletCoreKit.MetadataPhoneNumberFormat.CodingKeys : Swift.Hashable {}
extension WalletCoreKit.MetadataPhoneNumberFormat.CodingKeys : Swift.RawRepresentable {}
extension WalletCoreKit.OtpMethod : Swift.Equatable {}
extension WalletCoreKit.OtpMethod : Swift.Hashable {}
extension WalletCoreKit.PaymentMethodItem.PaymentCategory : Swift.Equatable {}
extension WalletCoreKit.PaymentMethodItem.PaymentCategory : Swift.Hashable {}
extension WalletCoreKit.PaymentMethodItem.PaymentCategory : Swift.RawRepresentable {}
extension WalletCoreKit.PaymentMethodItem.Channel : Swift.Equatable {}
extension WalletCoreKit.PaymentMethodItem.Channel : Swift.Hashable {}
extension WalletCoreKit.PaymentMethodItem.Channel : Swift.RawRepresentable {}
extension WalletCoreKit.PaymentType : Swift.Equatable {}
extension WalletCoreKit.PaymentType : Swift.Hashable {}
extension WalletCoreKit.PaymentType : Swift.RawRepresentable {}
extension WalletCoreKit.PrivilegeDetailResponse.PrivilegeType : Swift.Equatable {}
extension WalletCoreKit.PrivilegeDetailResponse.PrivilegeType : Swift.Hashable {}
extension WalletCoreKit.ReferralItem.ReferralStatus : Swift.Equatable {}
extension WalletCoreKit.ReferralItem.ReferralStatus : Swift.Hashable {}
extension WalletCoreKit.ReferralItem.ReferralStatus : Swift.RawRepresentable {}
extension WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.PaymentType : Swift.Equatable {}
extension WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.PaymentType : Swift.Hashable {}
extension WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.GroupType : Swift.Equatable {}
extension WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.GroupType : Swift.Hashable {}
extension WalletCoreKit.RemoteConfigModels.ExternalPayment.Item.GroupType : Swift.RawRepresentable {}
extension WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.PaymentType : Swift.Equatable {}
extension WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.PaymentType : Swift.Hashable {}
extension WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.GroupType : Swift.Equatable {}
extension WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.GroupType : Swift.Hashable {}
extension WalletCoreKit.RemoteConfigModels.PaymentSubscription.Payment.GroupType : Swift.RawRepresentable {}
extension WalletCoreKit.ViewControllerName : Swift.Equatable {}
extension WalletCoreKit.ViewControllerName : Swift.Hashable {}
extension WalletCoreKit.ViewControllerName : Swift.RawRepresentable {}
extension WalletCoreKit.VoucherStatus : Swift.Equatable {}
extension WalletCoreKit.VoucherStatus : Swift.Hashable {}
extension WalletCoreKit.VoucherStatus : Swift.RawRepresentable {}
extension WalletCoreKit.VoucherGroup : Swift.Equatable {}
extension WalletCoreKit.VoucherGroup : Swift.Hashable {}
extension WalletCoreKit.DiscountType : Swift.Equatable {}
extension WalletCoreKit.DiscountType : Swift.Hashable {}
extension WalletCoreKit.WalletGroup : Swift.Equatable {}
extension WalletCoreKit.WalletGroup : Swift.Hashable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.ExpiryType : Swift.Equatable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.ExpiryType : Swift.Hashable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.ExpiryType : Swift.RawRepresentable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.Menu.IconType : Swift.Equatable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.Menu.IconType : Swift.Hashable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.Menu.IconType : Swift.RawRepresentable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.Menu.Action : Swift.Equatable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.Menu.Action : Swift.Hashable {}
extension WalletCoreKit.WalletCoreKitCardDetailResponse.Program.Menu.Action : Swift.RawRepresentable {}
extension WalletCoreKit.ActiveLevelResponse.CodingKeys : Swift.Equatable {}
extension WalletCoreKit.ActiveLevelResponse.CodingKeys : Swift.Hashable {}
extension WalletCoreKit.ActiveLevelResponse.CodingKeys : Swift.RawRepresentable {}
extension WalletCoreKit.LevelType : Swift.Equatable {}
extension WalletCoreKit.LevelType : Swift.Hashable {}
extension WalletCoreKit.LevelResponse.CodingKeys : Swift.Equatable {}
extension WalletCoreKit.LevelResponse.CodingKeys : Swift.Hashable {}
extension WalletCoreKit.LevelResponse.CodingKeys : Swift.RawRepresentable {}
extension WalletCoreKit.RegisterOpenMemberRulesViewModel.ExpiryType : Swift.Equatable {}
extension WalletCoreKit.RegisterOpenMemberRulesViewModel.ExpiryType : Swift.Hashable {}
extension WalletCoreKit.RegisterOpenMemberRulesViewModel.ExpiryType : Swift.RawRepresentable {}
